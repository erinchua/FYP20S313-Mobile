{"ast":null,"code":"var _jsxFileName = \"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\src\\\\components\\\\OpenHouseProgrammes\\\\ProgTalkInfo.tsx\";\nimport { IonGrid, IonRow, IonCol, IonButton, IonPage, IonContent, IonAlert, IonHeader } from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport '../../css/Global.css';\nimport '../../css/ProgrammeTalks.css';\nimport { db } from '../../firebase';\nimport TopNav from '../TopNav';\n\nconst ProgTalkInfo = ({\n  match\n}) => {\n  {\n    /* Register Alert */\n  }\n  const [registerSuccess, setRegisterSuccess] = useState(false);\n  const [registerFail, setRegisterFail] = useState(false);\n  {\n    /*Programme Talk selected */\n  }\n  const [programmeTalk, setProgrammeTalk] = useState([]);\n\n  const fetchData = async () => {\n    const talkRef = db.collection('ProgrammeTalks').doc(match.params.id);\n    const doc = (await talkRef.get()).data();\n    setProgrammeTalk(doc);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const displayRegisterAlert = () => {\n    {\n      /* Logic to check if there is another existing programme in My Schedule that is the same day & timing \r\n      of the programme the user wants to add*/\n    }\n    {\n      /* if (exist) {\r\n          setRegisterSuccess(true);\r\n          setRegisterFail(false);\r\n      } else {\r\n          setRegisterFail(true);\r\n         setRegisterSuccess(false);\r\n      } */\n    }\n    {\n      /* set state to disable the + btn in else {} */\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: registerSuccess,\n    onDidDismiss: () => setRegisterSuccess(false),\n    cssClass: \"alertBox\",\n    mode: \"md\",\n    header: 'Successfully Registered',\n    message: 'You have successfully registered for the programme talk and it has been successfully added to My Schedule.',\n    buttons: ['Close'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: registerFail,\n    onDidDismiss: () => setRegisterFail(false),\n    cssClass: \"alertBox\",\n    mode: \"md\",\n    header: 'Registration Unsuccessful',\n    message: 'There exists an open house programme in your scheduler at this timing. Please remove the existing programme from your scheduler first!',\n    buttons: ['Close'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TopNav, {\n    title: \"Programme Talks\",\n    route: \"/u/openHouseMain/programmeTalks\",\n    backarrow: true,\n    hamburger: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(IonContent, {\n    fullscreen: true,\n    className: \"progTalkIonContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IonGrid, {\n    id: \"progTalkInfoGrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(IonRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"4\",\n    sizeSm: \"4\",\n    className: \"progTalkInfoHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, \"Programme Talk:\"), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"8\",\n    sizeSm: \"8\",\n    className: \"progTalkInfoData\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 29\n    }\n  }, programmeTalk.talkName)), /*#__PURE__*/React.createElement(IonRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"4\",\n    sizeSm: \"4\",\n    className: \"progTalkInfoHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }, \"Awarding University:\"), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"8\",\n    sizeSm: \"8\",\n    className: \"progTalkInfoData\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  }, programmeTalk.awardingUni)), /*#__PURE__*/React.createElement(IonRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"4\",\n    sizeSm: \"4\",\n    className: \"progTalkInfoHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 29\n    }\n  }, \"Date:\"), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"8\",\n    sizeSm: \"8\",\n    className: \"progTalkInfoData\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 29\n    }\n  }, programmeTalk.date)), /*#__PURE__*/React.createElement(IonRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"4\",\n    sizeSm: \"4\",\n    className: \"progTalkInfoHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }, \"Time:\"), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"8\",\n    sizeSm: \"8\",\n    className: \"progTalkInfoData\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, programmeTalk.startTime + \" to \" + programmeTalk.endTime)), /*#__PURE__*/React.createElement(IonRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"4\",\n    sizeSm: \"4\",\n    className: \"progTalkInfoHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }, \"Venue:\"), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"8\",\n    sizeSm: \"8\",\n    className: \"progTalkInfoData\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 29\n    }\n  }, programmeTalk.venue)), /*#__PURE__*/React.createElement(IonRow, {\n    class: \"ion-justify-content-center\",\n    style: {\n      marginTop: \"10%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    size: \"large\",\n    id: \"registerProgTalkBtn\",\n    type: \"submit\",\n    onClick: displayRegisterAlert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 29\n    }\n  }, \"REGISTER\"))))));\n};\n\nexport default ProgTalkInfo;","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/components/OpenHouseProgrammes/ProgTalkInfo.tsx"],"names":["IonGrid","IonRow","IonCol","IonButton","IonPage","IonContent","IonAlert","IonHeader","React","useState","useEffect","db","TopNav","ProgTalkInfo","match","registerSuccess","setRegisterSuccess","registerFail","setRegisterFail","programmeTalk","setProgrammeTalk","fetchData","talkRef","collection","doc","params","id","get","data","displayRegisterAlert","talkName","awardingUni","date","startTime","endTime","venue","marginTop"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,OAA7C,EAAsDC,UAAtD,EAAkEC,QAAlE,EAA4EC,SAA5E,QAA6F,cAA7F;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AAEA,OAAO,sBAAP;AACA,OAAO,8BAAP;AACA,SAASC,EAAT,QAAmB,gBAAnB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,YAA2C,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAE7D;AAAC;AAAqB;AACtB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,KAAD,CAAhD;AAEA;AAAC;AAA6B;AAC9B,QAAM,CAACU,aAAD,EAAeC,gBAAf,IAAmCX,QAAQ,CAAC,EAAD,CAAjD;;AAEA,QAAMY,SAAS,GAAG,YAAW;AAEzB,UAAMC,OAAO,GAAGX,EAAE,CAACY,UAAH,CAAc,gBAAd,EAAgCC,GAAhC,CAAoCV,KAAK,CAACW,MAAN,CAAaC,EAAjD,CAAhB;AACA,UAAMF,GAAQ,GAAI,CAAC,MAAMF,OAAO,CAACK,GAAR,EAAP,EAAsBC,IAAtB,EAAlB;AACAR,IAAAA,gBAAgB,CAACI,GAAD,CAAhB;AACH,GALD;;AAMAd,EAAAA,SAAS,CAAC,MAAI;AACVW,IAAAA,SAAS;AAEZ,GAHQ,EAGP,EAHO,CAAT;;AAKA,QAAMQ,oBAAoB,GAAG,MAAM;AAC/B;AAAC;;AACyC;AAE1C;AAAC;;;;;;;AAMI;AAEL;AAAC;AAAgD;AACpD,GAbD;;AAeA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AACI,IAAA,MAAM,EAAEd,eADZ;AAEI,IAAA,YAAY,EAAE,MAAMC,kBAAkB,CAAC,KAAD,CAF1C;AAGI,IAAA,QAAQ,EAAC,UAHb;AAII,IAAA,IAAI,EAAC,IAJT;AAKI,IAAA,MAAM,EAAE,yBALZ;AAMI,IAAA,OAAO,EAAE,4GANb;AAOI,IAAA,OAAO,EAAE,CAAC,OAAD,CAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAWI,oBAAC,QAAD;AACI,IAAA,MAAM,EAAEC,YADZ;AAEI,IAAA,YAAY,EAAE,MAAMC,eAAe,CAAC,KAAD,CAFvC;AAGI,IAAA,QAAQ,EAAC,UAHb;AAII,IAAA,IAAI,EAAC,IAJT;AAKI,IAAA,MAAM,EAAE,2BALZ;AAMI,IAAA,OAAO,EAAE,wIANb;AAOI,IAAA,OAAO,EAAE,CAAC,OAAD,CAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,eAqBI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,iBAAd;AAAgC,IAAA,KAAK,EAAC,iCAAtC;AAAwE,IAAA,SAAS,EAAG,IAApF;AAA2F,IAAA,SAAS,EAAG,IAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAKI,oBAAC,UAAD;AAAY,IAAA,UAAU,MAAtB;AAAuB,IAAA,SAAS,EAAC,oBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAC,kBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAC,oBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAC,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,aAAa,CAACW,QADnB,CALJ,CAFJ,eAaI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAC,oBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAC,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,aAAa,CAACY,WADnB,CALJ,CAbJ,eAwBI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAC,oBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAC,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKZ,aAAa,CAACa,IADnB,CALJ,CAxBJ,eAmCI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAC,oBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAC,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,aAAa,CAACc,SAAd,GAAwB,MAAxB,GAA+Bd,aAAa,CAACe,OADlD,CALJ,CAnCJ,eA8CI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAC,oBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAC,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKf,aAAa,CAACgB,KADnB,CALJ,CA9CJ,eAwDI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,4BAAd;AAA2C,IAAA,KAAK,EAAE;AAACC,MAAAA,SAAS,EAAC;AAAX,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,OAAhB;AAAwB,IAAA,EAAE,EAAC,qBAA3B;AAAiD,IAAA,IAAI,EAAC,QAAtD;AAA+D,IAAA,OAAO,EAAEP,oBAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CAxDJ,CADJ,CALJ,CArBJ,CADJ;AA8FH,CAjID;;AAmIA,eAAehB,YAAf","sourcesContent":["import { IonGrid, IonRow, IonCol, IonButton, IonPage, IonContent, IonAlert, IonHeader } from '@ionic/react';\r\nimport React, { useState,useEffect } from 'react';\r\nimport {RouteComponentProps} from 'react-router'\r\nimport '../../css/Global.css';\r\nimport '../../css/ProgrammeTalks.css'\r\nimport { db } from '../../firebase';\r\n\r\nimport TopNav from '../TopNav';\r\n\r\nconst ProgTalkInfo: React.FC<RouteComponentProps> = ({match}) => {\r\n\r\n    {/* Register Alert */}\r\n    const [registerSuccess, setRegisterSuccess] = useState(false);\r\n    const [registerFail, setRegisterFail] = useState(false);\r\n\r\n    {/*Programme Talk selected */}\r\n    const [programmeTalk,setProgrammeTalk] = useState([])\r\n\r\n    const fetchData = async () =>{\r\n\r\n        const talkRef = db.collection('ProgrammeTalks').doc(match.params.id)\r\n        const doc :any =  (await talkRef.get()).data()\r\n        setProgrammeTalk(doc)\r\n    }\r\n    useEffect(()=>{\r\n        fetchData()\r\n        \r\n    },[])\r\n\r\n    const displayRegisterAlert = () => {\r\n        {/* Logic to check if there is another existing programme in My Schedule that is the same day & timing \r\n         of the programme the user wants to add*/}\r\n        \r\n        {/* if (exist) {\r\n             setRegisterSuccess(true);\r\n             setRegisterFail(false);\r\n         } else {\r\n             setRegisterFail(true);\r\n            setRegisterSuccess(false);\r\n        } */}\r\n\r\n        {/* set state to disable the + btn in else {} */}\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <IonAlert\r\n                isOpen={registerSuccess}\r\n                onDidDismiss={() => setRegisterSuccess(false)}\r\n                cssClass='alertBox'\r\n                mode='md'\r\n                header={'Successfully Registered'}\r\n                message={'You have successfully registered for the programme talk and it has been successfully added to My Schedule.'}\r\n                buttons={['Close']}\r\n             ></IonAlert>\r\n\r\n            <IonAlert\r\n                isOpen={registerFail}\r\n                onDidDismiss={() => setRegisterFail(false)}\r\n                cssClass='alertBox'\r\n                mode='md'\r\n                header={'Registration Unsuccessful'}\r\n                message={'There exists an open house programme in your scheduler at this timing. Please remove the existing programme from your scheduler first!'}\r\n                buttons={['Close']}\r\n             ></IonAlert>\r\n\r\n            <IonPage>\r\n                <IonHeader>\r\n                    <TopNav title=\"Programme Talks\" route=\"/u/openHouseMain/programmeTalks\" backarrow={ true } hamburger={ true } />\r\n                </IonHeader>\r\n                \r\n                <IonContent fullscreen className=\"progTalkIonContent\">\r\n                    <IonGrid id=\"progTalkInfoGrid\">\r\n                        {/* Programme Talk */}\r\n                        <IonRow>\r\n                            <IonCol size=\"4\" sizeSm=\"4\" className=\"progTalkInfoHeader\">\r\n                                Programme Talk:\r\n                            </IonCol>\r\n\r\n                            <IonCol size=\"8\" sizeSm=\"8\" className=\"progTalkInfoData\">\r\n                                {programmeTalk.talkName}\r\n                            </IonCol>\r\n                        </IonRow>\r\n\r\n                        {/* Awarding Uni */}\r\n                        <IonRow>\r\n                            <IonCol size=\"4\" sizeSm=\"4\" className=\"progTalkInfoHeader\">\r\n                                Awarding University:\r\n                            </IonCol>\r\n\r\n                            <IonCol size=\"8\" sizeSm=\"8\" className=\"progTalkInfoData\">\r\n                                {programmeTalk.awardingUni}\r\n                            </IonCol>\r\n                        </IonRow>\r\n\r\n                        {/* Date */}\r\n                        <IonRow>\r\n                            <IonCol size=\"4\" sizeSm=\"4\" className=\"progTalkInfoHeader\">\r\n                                Date:\r\n                            </IonCol>\r\n\r\n                            <IonCol size=\"8\" sizeSm=\"8\" className=\"progTalkInfoData\">\r\n                                {programmeTalk.date}\r\n                            </IonCol>\r\n                        </IonRow>\r\n\r\n                        {/* Time */}\r\n                        <IonRow>\r\n                            <IonCol size=\"4\" sizeSm=\"4\" className=\"progTalkInfoHeader\">\r\n                                Time:\r\n                            </IonCol>\r\n\r\n                            <IonCol size=\"8\" sizeSm=\"8\" className=\"progTalkInfoData\">\r\n                                {programmeTalk.startTime+\" to \"+programmeTalk.endTime}\r\n                            </IonCol>\r\n                        </IonRow>\r\n\r\n                        {/* Venue */}\r\n                        <IonRow>\r\n                            <IonCol size=\"4\" sizeSm=\"4\" className=\"progTalkInfoHeader\">\r\n                                Venue:\r\n                            </IonCol>\r\n\r\n                            <IonCol size=\"8\" sizeSm=\"8\" className=\"progTalkInfoData\">\r\n                                {programmeTalk.venue}\r\n                            </IonCol>\r\n                        </IonRow>\r\n\r\n                        <IonRow class=\"ion-justify-content-center\" style={{marginTop:\"10%\"}}>\r\n                            <IonButton size=\"large\" id=\"registerProgTalkBtn\" type=\"submit\" onClick={displayRegisterAlert}>REGISTER</IonButton>\r\n                        </IonRow>\r\n                    </IonGrid>\r\n                    \r\n\r\n                </IonContent>\r\n            </IonPage>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ProgTalkInfo;"]},"metadata":{},"sourceType":"module"}