{"ast":null,"code":"import { db } from \"./firebase\";\nexport function conflictCheck(progItem, uid) {\n  let isConflict = false;\n  db.collection('PersonalScheduler').doc(uid).get().then(snapshot => {\n    const registered = snapshot.data().registeredProgrammes;\n\n    if (registered) {\n      registered.forEach(item => {\n        const itemType = item.split(\"-\");\n\n        switch (itemType[0]) {\n          case \"talk\":\n            return db.collection('ProgrammeTalks').doc(item).onSnapshot(doc => {\n              //console.log(doc.data().startTime.slice(-2, doc.data().startTime.length))\n              console.log(\"date\", progItem.date, doc.data().date);\n\n              if (progItem.date == doc.data().date) {\n                //console.log(true)\n                let progStart = Number(progItem.startTime.split(\":\")[0]),\n                    progEnd = Number(progItem.endTime.split(\":\")[0]);\n                let itemStart = Number(doc.data().startTime.split(\":\")[0]),\n                    itemEnd = Number(doc.data().endTime.split(\":\")[0]); //console.log(progStart, itemStart)\n\n                if (progItem.startTime.slice(-2, progItem.startTime.length) == \"PM\") progStart += 12;\n                if (progItem.endTime.slice(-2, progItem.startTime.length) == \"PM\") progStart += 12;\n                if (doc.data().startTime.slice(-2, doc.data().startTime.length) == \"PM\") progStart += 12;\n                if (doc.data().endTime.slice(-2, doc.data().endTime.length) == \"PM\") progStart += 12; //console.log(\"progStart\", progStart)\n                //console.log(\"progEnd\", progEnd)\n                //console.log(\"itemStart\", itemStart)\n                //console.log(\"itenEnd\", itemEnd)\n\n                if (progStart >= itemStart && progStart < itemEnd || progEnd > itemStart && progEnd <= itemEnd) {\n                  console.log(\"conflict\", true);\n                  console.log(\"conflict\", progItem.id, doc.data().id);\n                  isConflict = true;\n                } else {\n                  console.log(\"conflict\", false);\n                  console.log(\"conflict\", progItem.id, doc.data().id);\n                  isConflict = false;\n                }\n              } else {\n                isConflict = false;\n              }\n            });\n\n          case \"tour\": //return db.collection('GuidedTours').doc(item).onSnapshot(doc => {});\n\n          case \"performance\": //return db.collection('Performances').doc(item).onSnapshot(doc => {});\n\n          default:\n            console.log(\"default\");\n        }\n      });\n    }\n  });\n  console.log(\"isconflict\", isConflict);\n  return isConflict; //progitem is item from main collection\n  //get list of registered items\n  //get their date and time\n  //compare with progitem\n}","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/checker.ts"],"names":["db","conflictCheck","progItem","uid","isConflict","collection","doc","get","then","snapshot","registered","data","registeredProgrammes","forEach","item","itemType","split","onSnapshot","console","log","date","progStart","Number","startTime","progEnd","endTime","itemStart","itemEnd","slice","length","id"],"mappings":"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","sourcesContent":["import { db } from \"./firebase\";\r\n\r\nexport function conflictCheck(progItem: any, uid: any) {\r\n    let isConflict = false;\r\n\r\n    db.collection('PersonalScheduler').doc(uid).get().then((snapshot: any) => {\r\n        const registered = snapshot.data().registeredProgrammes;\r\n    \r\n        if (registered) {\r\n            registered.forEach((item: any) => {\r\n                const itemType = item.split(\"-\");\r\n\r\n                switch (itemType[0]) {\r\n                    case \"talk\":\r\n                        return db.collection('ProgrammeTalks').doc(item).onSnapshot((doc: any) => {\r\n                            //console.log(doc.data().startTime.slice(-2, doc.data().startTime.length))\r\n                            console.log(\"date\", progItem.date, doc.data().date)\r\n                            if (progItem.date == doc.data().date) {\r\n                                //console.log(true)\r\n                                let progStart = Number(progItem.startTime.split(\":\")[0]), progEnd = Number(progItem.endTime.split(\":\")[0]);\r\n                                let itemStart = Number(doc.data().startTime.split(\":\")[0]), itemEnd = Number(doc.data().endTime.split(\":\")[0]);\r\n                                //console.log(progStart, itemStart)\r\n                                if (progItem.startTime.slice(-2, progItem.startTime.length) == \"PM\") progStart += 12;\r\n                                if (progItem.endTime.slice(-2, progItem.startTime.length) == \"PM\") progStart += 12;\r\n                                if (doc.data().startTime.slice(-2, doc.data().startTime.length) == \"PM\") progStart += 12;\r\n                                if (doc.data().endTime.slice(-2, doc.data().endTime.length) == \"PM\") progStart += 12;\r\n\r\n                                //console.log(\"progStart\", progStart)\r\n                                //console.log(\"progEnd\", progEnd)\r\n                                //console.log(\"itemStart\", itemStart)\r\n                                //console.log(\"itenEnd\", itemEnd)\r\n\r\n                                if ((progStart >= itemStart && progStart < itemEnd) || (progEnd > itemStart && progEnd <= itemEnd)) {\r\n                                    console.log(\"conflict\", true)\r\n                                    console.log(\"conflict\", progItem.id, doc.data().id)\r\n                                    isConflict = true;\r\n                                } else {\r\n                                    console.log(\"conflict\", false)\r\n                                    console.log(\"conflict\", progItem.id, doc.data().id)\r\n                                    isConflict = false;\r\n                                }\r\n                            } else {\r\n                                isConflict = false;\r\n                            }\r\n                        });\r\n                    case \"tour\":\r\n                        //return db.collection('GuidedTours').doc(item).onSnapshot(doc => {});\r\n                    case \"performance\":\r\n                        //return db.collection('Performances').doc(item).onSnapshot(doc => {});\r\n                    default:\r\n                        console.log(\"default\")\r\n                }\r\n            });\r\n        }\r\n    });\r\n        console.log(\"isconflict\", isConflict)\r\n        return isConflict;\r\n\r\n    //progitem is item from main collection\r\n    //get list of registered items\r\n    //get their date and time\r\n    //compare with progitem\r\n}"]},"metadata":{},"sourceType":"module"}