{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{Plugins}from'@capacitor/core';import{toDateObject}from'../modules/convert';import moment from'moment';var LocalNotifications=Plugins.LocalNotifications;var Notifications=/*#__PURE__*/function(){function Notifications(){_classCallCheck(this,Notifications);}_createClass(Notifications,[{key:\"schedule\",value:function(){var _schedule=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(date,time,progName){var pending,progTime,sysTime,scheduled;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return LocalNotifications.requestPermission();case 3:if(_context.sent.granted){_context.next=5;break;}return _context.abrupt(\"return\");case 5:_context.next=7;return LocalNotifications.getPending();case 7:pending=_context.sent;if(!(pending.notifications.length>0)){_context.next=11;break;}_context.next=11;return LocalNotifications.cancel(pending);case 11:progTime=toDateObject(date,time);sysTime=moment().toDate();scheduled=moment(progTime).subtract(60*4.7,'s').toDate();if(!(scheduled>sysTime)){_context.next=19;break;}_context.next=17;return LocalNotifications.schedule({notifications:[{title:'SIM Openhouse scheduled event is commencing soon',body:progName,id:1,schedule:{at:scheduled}}]});case 17:_context.next=21;break;case 19:_context.next=21;return LocalNotifications.schedule({notifications:[{title:'SIM Openhouse scheduled event is has commenced',body:progName,id:1,schedule:{at:new Date(Date.now()+1000*5)}}]});case 21:_context.next=26;break;case 23:_context.prev=23;_context.t0=_context[\"catch\"](0);console.error(_context.t0);case 26:case\"end\":return _context.stop();}}},_callee,null,[[0,23]]);}));function schedule(_x,_x2,_x3){return _schedule.apply(this,arguments);}return schedule;}()},{key:\"requestPermission\",value:function(){var _requestPermission=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(\"Pressed\");_context2.prev=1;_context2.next=4;return LocalNotifications.areEnabled();case 4:if(_context2.sent){_context2.next=7;break;}_context2.next=7;return LocalNotifications.requestPermission();case 7:_context2.next=12;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](1);console.log(_context2.t0);case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[1,9]]);}));function requestPermission(){return _requestPermission.apply(this,arguments);}return requestPermission;}()}]);return Notifications;}();export default new Notifications();","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/temp/Notifications.tsx"],"names":["Plugins","toDateObject","moment","LocalNotifications","Notifications","date","time","progName","requestPermission","granted","getPending","pending","notifications","length","cancel","progTime","sysTime","toDate","scheduled","subtract","schedule","title","body","id","at","Date","now","console","error","log","areEnabled"],"mappings":"+yBAAA,OAASA,OAAT,KAA2C,iBAA3C,CACA,OAASC,YAAT,KAA6B,oBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB,C,GACQC,CAAAA,kB,CAAuBH,O,CAAvBG,kB,IAGFC,CAAAA,a,2OACoBC,I,CAAcC,I,CAAcC,Q,+LAG9BJ,CAAAA,kBAAkB,CAACK,iBAAnB,E,yBAAwCC,O,uFAG9BN,CAAAA,kBAAkB,CAACO,UAAnB,E,QAAhBC,O,oBACFA,OAAO,CAACC,aAAR,CAAsBC,MAAtB,CAA+B,C,kDACzBV,CAAAA,kBAAkB,CAACW,MAAnB,CAA0BH,OAA1B,C,SAEJI,Q,CAAWd,YAAY,CAACI,IAAD,CAAOC,IAAP,C,CACvBU,O,CAAUd,MAAM,GAAGe,MAAT,E,CACVC,S,CAAYhB,MAAM,CAACa,QAAD,CAAN,CAAiBI,QAAjB,CAA0B,GAAK,GAA/B,CAAoC,GAApC,EAAyCF,MAAzC,E,MACdC,SAAS,CAAGF,O,kDACNb,CAAAA,kBAAkB,CAACiB,QAAnB,CAA4B,CAC9BR,aAAa,CAAE,CAAC,CACZS,KAAK,CAAE,kDADK,CAEZC,IAAI,CAAEf,QAFM,CAGZgB,EAAE,CAAE,CAHQ,CAIZH,QAAQ,CAAE,CACNI,EAAE,CAAEN,SADE,CAJE,CAAD,CADe,CAA5B,C,+DAYAf,CAAAA,kBAAkB,CAACiB,QAAnB,CAA4B,CAC9BR,aAAa,CAAE,CAAC,CACZS,KAAK,CAAE,gDADK,CAEZC,IAAI,CAAEf,QAFM,CAGZgB,EAAE,CAAE,CAHQ,CAIZH,QAAQ,CAAE,CACNI,EAAE,CAAE,GAAIC,CAAAA,IAAJ,CAASA,IAAI,CAACC,GAAL,GAAa,KAAO,CAA7B,CADE,CAJE,CAAD,CADe,CAA5B,C,0FAaVC,OAAO,CAACC,KAAR,c,oaAKJD,OAAO,CAACE,GAAR,CAAY,SAAZ,E,wCAGgB1B,CAAAA,kBAAkB,CAAC2B,UAAnB,E,0EACF3B,CAAAA,kBAAkB,CAACK,iBAAnB,E,2FAGVmB,OAAO,CAACE,GAAR,e,gNAOZ,cAAe,IAAIzB,CAAAA,aAAJ,EAAf","sourcesContent":["import { Plugins, LocalNotification } from '@capacitor/core';\r\nimport { toDateObject } from '../modules/convert'\r\nimport moment from 'moment'\r\nconst { LocalNotifications } = Plugins;\r\n\r\n\r\nclass Notifications {\r\n    public async schedule(date: string, time: string, progName: string) {\r\n        try {\r\n            // Request/ check permissions\r\n            if (!(await LocalNotifications.requestPermission()).granted) return;\r\n\r\n            // Clear old notifications in prep for refresh (OPTIONAL)\r\n            const pending = await LocalNotifications.getPending();\r\n            if (pending.notifications.length > 0)\r\n                await LocalNotifications.cancel(pending);\r\n\r\n            const progTime = toDateObject(date, time)\r\n            const sysTime = moment().toDate()\r\n            const scheduled = moment(progTime).subtract(60 * 4.7, 's').toDate()\r\n            if (scheduled > sysTime) {\r\n                await LocalNotifications.schedule({\r\n                    notifications: [{\r\n                        title: 'SIM Openhouse scheduled event is commencing soon',\r\n                        body: progName,\r\n                        id: 1,\r\n                        schedule: {\r\n                            at: scheduled\r\n                        }\r\n                    }]\r\n                });\r\n            }\r\n            else {\r\n                await LocalNotifications.schedule({\r\n                    notifications: [{\r\n                        title: 'SIM Openhouse scheduled event is has commenced',\r\n                        body: progName,\r\n                        id: 1,\r\n                        schedule: {\r\n                            at: new Date(Date.now() + 1000 * 5)\r\n                        }\r\n                    }]\r\n                });\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    public async requestPermission() {\r\n        console.log(\"Pressed\")\r\n        try {\r\n            // Request/ check permissions\r\n            if (! await LocalNotifications.areEnabled())\r\n                await LocalNotifications.requestPermission();\r\n        }\r\n        catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default new Notifications()"]},"metadata":{},"sourceType":"module"}