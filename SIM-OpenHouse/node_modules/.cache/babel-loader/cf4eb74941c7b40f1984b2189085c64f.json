{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vincent\\\\Documents\\\\FYP\\\\FYP20S313-Mobile\\\\sim-openhouse\\\\src\\\\pages\\\\Study@SIM\\\\Study@SIMProgList.tsx\";\nimport { IonAlert, IonBadge, IonButton, IonCol, IonContent, IonGrid, IonHeader, IonLabel, IonPage, IonPopover, IonRouterLink, IonRow, IonTitle, IonToolbar } from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faFilter } from '@fortawesome/free-solid-svg-icons';\nimport '../../css/Global.css';\nimport '../../css/Study@SIMProgList.css';\nimport TopNav from '../../components/TopNav';\nimport CompareProgPopoverContent from '../../components/Study@SIM/CompareProgPopoverContent';\nimport FilterPopoverContent from '../../components/FilterPopoverContent';\nimport { db } from '../../firebase';\n\n// interface myProps {\n//     compareProgList: Programme[],\n//     onCompareProgListChange: (programmes: Programme[]) => void\n// }\nconst StudySIMProgList = props => {\n  const {\n    match\n  } = props;\n  const {\n    params: {\n      discipline,\n      category\n    }\n  } = match; //Frontend\n\n  /*To remove selected programmes in comparePopOver */\n\n  const removeProg = programme => {\n    const newProgList = [...compareProgList];\n    const newProgID = programme.id;\n    const updatedProgList = newProgList.filter(programme => {\n      return programme.id !== newProgID;\n    });\n    setCompareProgList(updatedProgList);\n  };\n  /*To remove all selected programmes in comparePopOver */\n\n\n  const removeAllProg = programmes => {\n    const newProgList = [...compareProgList];\n    const updatedProgList = newProgList.filter(programme => {\n      return programme.id === '';\n    });\n    setCompareProgList(updatedProgList);\n  };\n  /* Display Compare Prog Popover */\n\n\n  const [showCompareProgPopover, setShowCompareProgPopover] = useState({\n    open: false,\n    event: undefined\n  });\n  /* \"If no prog is added to compare\" Alert */\n\n  const [showCompareProgAlert, setShowCompareProgAlert] = useState(false);\n  /* Display Filter Menu Popover */\n\n  const [showProgCourseFilterPopover, setShowProgCourseFilterPopover] = useState({\n    open: false,\n    event: undefined\n  }); //Programme List\n\n  const [programmes, setProgrammes] = useState([]);\n  /* When page first load, data retrieval*/\n\n  useEffect(() => {\n    console.log(\"ProgList rendered\");\n    /*Fetching Programmes Data from firestore*/\n\n    const fetchData = async (discipline, category) => {\n      const programmes = [];\n      await db.collection('ProgrammesMobile').where(\"discipline\", \"array-contains\", discipline).where(\"academicLevel\", '==', category).get().then(snapshot => {\n        snapshot.docs.forEach(doc => {\n          const data = doc.data();\n          programmes.push(data);\n        });\n        setProgrammes(programmes);\n      }).catch(error => console.log(error));\n    };\n\n    fetchData(discipline, category);\n    const sessionList = window.sessionStorage.compareProgList ? JSON.parse(window.sessionStorage.compareProgList) : [];\n    setCompareProgList(sessionList);\n  }, []); //Compare function\n  //programmes to be rendered and the comparepopover list\n\n  const [compareProgList, setCompareProgList] = useState(window.sessionStorage.compareProgList ? JSON.parse(window.sessionStorage.compareProgList) : []); //To get the unique disciplines for rendering at the header\n\n  const allDisc = programmes.map(programme => programme.discipline);\n  const disc = [];\n  allDisc.map(data => data.map(data => disc.push(data)));\n  let uniqueDisc = [...new Set(disc)]; //For storing the compare list into session\n\n  useEffect(() => {\n    return () => {\n      window.sessionStorage.setItem(\"compareProgList\", JSON.stringify(compareProgList));\n    };\n  }, [compareProgList]);\n  /* Adding programme for comparison - Need to be generated dynamically */\n\n  const compareProgramme = programme => {\n    const newProgList = [...compareProgList];\n    const newProgID = programme.id;\n\n    if (newProgList.length < 3) {\n      if (newProgList.includes(programme)) {\n        const updatedProgList = newProgList.filter(existingProg => {\n          return existingProg.id !== newProgID;\n        });\n        setCompareProgList(updatedProgList);\n      } else {\n        newProgList.push(programme);\n        setCompareProgList(newProgList);\n      }\n    } else {\n      if (newProgList.includes(programme)) {\n        const updatedProgList = newProgList.filter(existingProg => {\n          return existingProg.id != newProgID;\n        });\n        setCompareProgList(updatedProgList);\n      } else {\n        setShowCompareProgAlert(true);\n      }\n    }\n  }; //Filter functions\n\n\n  const [filterCondition, setFilterCondition] = useState({\n    mos: ['fullPartTime', 'partTime', 'fullTime'],\n    discipline: [discipline],\n    uni: [],\n    acadLvl: [category],\n    entry: [],\n    subDisc: []\n  }); //update the filter condition from FilterPopoverContent \n\n  const onUpdateFilter = (mosFilter, discFilter, uniFilter, acadLvlFilter, entryFilter, subDiscFilter) => {\n    setFilterCondition(prevState => {\n      let filter = { ...prevState\n      };\n      Object.keys(filter).map(key => {\n        if (key === 'mos') filter[key] = mosFilter;\n        if (key === 'discipline') filter[key] = discFilter;\n        if (key === 'uni') filter[key] = uniFilter;\n        if (key === 'acadLvl') filter[key] = acadLvlFilter;\n        if (key === 'entry') filter[key] = entryFilter;\n        if (key === 'subDisc') filter[key] = subDiscFilter;\n      });\n      return filter;\n    });\n  };\n\n  const filterProgrammes = async condition => {\n    const initialList = [];\n    let filteredList = [];\n    let segmentFilter = [];\n    await db.collection('ProgrammesMobile').get().then(snapshot => {\n      snapshot.docs.forEach(doc => {\n        const data = doc.data();\n        initialList.push(data);\n      });\n    });\n    Object.entries(condition).map(([key, value]) => {\n      if (key === 'mos') {\n        if (value.length < 3 && value.length > 0) {\n          value.forEach(value => {\n            if (value === 'fullPartTime') {\n              segmentFilter = initialList.filter(programme => programme.modeOfStudy.fullTime && programme.modeOfStudy.partTime);\n              filteredList = filteredList.concat(segmentFilter);\n            }\n\n            if (value === 'fullTime') {\n              segmentFilter = initialList.filter(programme => programme.modeOfStudy.fullTime && !programme.modeOfStudy.partTime);\n              filteredList = filteredList.concat(segmentFilter);\n            }\n\n            if (value === 'partTime') {\n              segmentFilter = initialList.filter(programme => !programme.modeOfStudy.fullTime && programme.modeOfStudy.partTime);\n              filteredList = filteredList.concat(segmentFilter);\n            }\n          });\n        } else if (value.length === 0 || value.length === 3) {\n          filteredList = initialList;\n        }\n      } else if (key === 'discipline') {\n        let discFiltered = [];\n\n        if (value.length > 0 && value.length <= 4) {\n          value.forEach(value => {\n            segmentFilter = filteredList.filter(programme => programme.discipline.includes(value));\n            discFiltered = discFiltered.concat(segmentFilter);\n          });\n          filteredList = discFiltered;\n        }\n      } else if (key === 'uni') {\n        let uniFiltered = [];\n\n        if (value.length > 0) {\n          value.forEach(value => {\n            segmentFilter = filteredList.filter(programme => programme.awardedBy == value);\n            uniFiltered = uniFiltered.concat(segmentFilter);\n          });\n          filteredList = uniFiltered;\n        }\n      } else if (key === 'acadLvl') {\n        let acadFiltered = [];\n\n        if (value.length > 0) {\n          value.forEach(value => {\n            segmentFilter = filteredList.filter(programme => programme.academicLevel === value);\n            acadFiltered = acadFiltered.concat(segmentFilter);\n          });\n          filteredList = acadFiltered;\n        }\n      } else if (key === 'entry') {\n        let entryFiltered = [];\n\n        if (value.length > 0) {\n          value.forEach(value => {\n            if (value === 'aLevel') {\n              segmentFilter = filteredList.filter(programme => programme.entryQualifications.aLevel);\n              entryFiltered = entryFiltered.concat(segmentFilter);\n            } else if (value === 'oLevel') {\n              segmentFilter = filteredList.filter(programme => programme.entryQualifications.oLevel);\n              entryFiltered = entryFiltered.concat(segmentFilter);\n            } else if (value === 'diploma') {\n              segmentFilter = filteredList.filter(programme => programme.entryQualifications.diploma);\n              entryFiltered = entryFiltered.concat(segmentFilter);\n            } else if (value === 'degree') {\n              segmentFilter = filteredList.filter(programme => programme.entryQualifications.degree);\n              entryFiltered = entryFiltered.concat(segmentFilter);\n            }\n          });\n          filteredList = entryFiltered;\n        }\n      } else if (key === 'subDisc') {\n        let subDiscFiltered = [];\n\n        if (value.length > 0) {\n          value.forEach(value => {\n            segmentFilter = filteredList.filter(programme => programme.subDiscipline.includes(value));\n            subDiscFiltered = subDiscFiltered.concat(segmentFilter);\n          });\n          filteredList = subDiscFiltered;\n        }\n      }\n    });\n    setProgrammes(filteredList);\n  }; //When filter condition updated, runs the filter programme\n\n\n  useEffect(() => {\n    filterProgrammes(filterCondition);\n  }, [filterCondition]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: showCompareProgAlert,\n    onDidDismiss: () => setShowCompareProgAlert(false),\n    cssClass: \"alertBox\",\n    mode: \"md\",\n    message: 'You may compare up to 3 programmes at a time by tapping on the Compare button of the programme(s).',\n    buttons: ['OK'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TopNav, {\n    title: \"Study@SIM\",\n    route: \"/u/study@SIMMain\",\n    backarrow: true,\n    hamburger: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(IonToolbar, {\n    id: \"studySIMProgListHeaderToolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(IonGrid, {\n    style: {\n      padding: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonRow, {\n    id: \"studySIMProgListHeaderRow\",\n    class: \"ion-align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"6\",\n    sizeSm: \"6\",\n    class: \"ion-text-left\",\n    className: \"studySIMProgListCol\",\n    style: {\n      paddingLeft: \"3%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonTitle, {\n    className: \"studyProgListTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 37\n    }\n  }, uniqueDisc.length === 1 ? uniqueDisc.map(disc => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: disc,\n      className: \"ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 53\n      }\n    }, disc);\n  }) : '')), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"4\",\n    sizeSm: \"4\",\n    class: \"ion-text-right\",\n    className: \"studySIMProgListCol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    id: \"compareBtn\",\n    fill: \"clear\",\n    onClick: e => {\n      if (compareProgList.length < 1 || compareProgList.length > 3) {\n        setShowCompareProgAlert(true);\n      } else {\n        setShowCompareProgPopover({\n          open: true,\n          event: e.nativeEvent\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    className: \"compareLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 41\n    }\n  }, \"Compare\"), /*#__PURE__*/React.createElement(IonBadge, {\n    id: \"compareBadge\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 41\n    }\n  }, compareProgList.length))), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"2\",\n    sizeSm: \"2\",\n    class: \"ion-text-center\",\n    className: \"studySIMProgListCol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    id: \"filterBtn\",\n    fill: \"clear\",\n    onClick: e => {\n      setShowProgCourseFilterPopover({\n        open: true,\n        event: e.nativeEvent\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    className: \"filterIcon\",\n    size: \"lg\",\n    icon: faFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 41\n    }\n  }))))))), /*#__PURE__*/React.createElement(IonContent, {\n    fullscreen: true,\n    id: \"studySIMProgListContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IonGrid, {\n    id: \"studySIMProgListGrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 21\n    }\n  }, programmes ? programmes.map(programme => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: programme.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IonRow, {\n      className: \"studySIMProgListRow\",\n      class: \"ion-align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(IonCol, {\n      size: \"4\",\n      sizeSm: \"4\",\n      class: \"ion-text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: programme.uniLogo,\n      className: \"studyProgUniImg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"8\",\n      sizeSm: \"8\",\n      className: \"studySIMProgListColDetails\",\n      class: \"ion-text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(IonRow, {\n      className: \"progCourseRow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(IonRouterLink, {\n      id: \"progCourseTitleLink\",\n      href: `/u/study@SIMMain/Study@SIMProgInfo/${programme.id}/${discipline}/${category}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(IonTitle, {\n      className: \"progCourseTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 65\n      }\n    }, programme.programmeTitle)))), /*#__PURE__*/React.createElement(IonRow, {\n      className: \"progCourseRow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(IonCol, {\n      size: \"4\",\n      sizeSm: \"4\",\n      class: \"ion-text-left\",\n      className: \"progCourseAwardingUniCol\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(IonLabel, {\n      className: \"progCourseAwardingUniLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 65\n      }\n    }, \"Awarded by:\"))), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"8\",\n      sizeSm: \"8\",\n      class: \"ion-text-left\",\n      className: \"progCourseAwardingUniCol\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(IonLabel, {\n      className: \"progCourseAwardingUniName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 65\n      }\n    }, programme.awardedBy)))), /*#__PURE__*/React.createElement(IonRow, {\n      className: \"progCompareBtnRow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(IonCol, {\n      size: \"12\",\n      sizeSm: \"12\",\n      class: \"ion-text-right\",\n      className: \"progCompareBtnCol\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 57\n      }\n    }, compareProgList.includes(programme) ? /*#__PURE__*/React.createElement(IonButton, {\n      className: \"progCompareBtnSelected\",\n      size: \"small\",\n      type: \"submit\",\n      onClick: e => compareProgramme(programme),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 65\n      }\n    }, \"Compared\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        paddingLeft: \"3%\"\n      },\n      icon: faCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 53\n      }\n    })) : /*#__PURE__*/React.createElement(IonButton, {\n      className: \"progCompareBtn\",\n      size: \"small\",\n      type: \"submit\",\n      onClick: e => compareProgramme(programme),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 66\n      }\n    }, \"Compare\")))))));\n  }) : ''), /*#__PURE__*/React.createElement(IonPopover, {\n    id: \"compareProgPopover\",\n    cssClass: \"compareProgPopover\",\n    isOpen: showCompareProgPopover.open,\n    event: showCompareProgPopover.event,\n    onDidDismiss: e => setShowCompareProgPopover({\n      open: false,\n      event: undefined\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CompareProgPopoverContent, {\n    compareProgList: compareProgList,\n    removeProg: removeProg,\n    removeAllProg: removeAllProg,\n    viewResults: () => console.log('Add viewResults function here'),\n    href: `/u/study@SIMMain/${props.match.params.discipline}/${props.match.params.category}/courseComparator`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(IonPopover, {\n    id: \"progCourseFilterPopover\",\n    cssClass: \"progCourseFilterPopover\",\n    isOpen: showProgCourseFilterPopover.open,\n    event: showProgCourseFilterPopover.event,\n    onDidDismiss: e => setShowProgCourseFilterPopover({\n      open: false,\n      event: undefined\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FilterPopoverContent, {\n    filterFunction: filterProgrammes,\n    programmes: programmes,\n    filterFor: \"study@SIM\",\n    filterCondition: filterCondition,\n    onUpdateFilter: onUpdateFilter,\n    discipline: discipline,\n    category: category,\n    setState: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default StudySIMProgList;","map":{"version":3,"sources":["C:/Users/Vincent/Documents/FYP/FYP20S313-Mobile/sim-openhouse/src/pages/Study@SIM/Study@SIMProgList.tsx"],"names":["IonAlert","IonBadge","IonButton","IonCol","IonContent","IonGrid","IonHeader","IonLabel","IonPage","IonPopover","IonRouterLink","IonRow","IonTitle","IonToolbar","React","useState","useEffect","FontAwesomeIcon","faCheck","faFilter","TopNav","CompareProgPopoverContent","FilterPopoverContent","db","StudySIMProgList","props","match","params","discipline","category","removeProg","programme","newProgList","compareProgList","newProgID","id","updatedProgList","filter","setCompareProgList","removeAllProg","programmes","showCompareProgPopover","setShowCompareProgPopover","open","event","undefined","showCompareProgAlert","setShowCompareProgAlert","showProgCourseFilterPopover","setShowProgCourseFilterPopover","setProgrammes","console","log","fetchData","collection","where","get","then","snapshot","docs","forEach","doc","data","push","catch","error","sessionList","window","sessionStorage","JSON","parse","allDisc","map","disc","uniqueDisc","Set","setItem","stringify","compareProgramme","length","includes","existingProg","filterCondition","setFilterCondition","mos","uni","acadLvl","entry","subDisc","onUpdateFilter","mosFilter","discFilter","uniFilter","acadLvlFilter","entryFilter","subDiscFilter","prevState","Object","keys","key","filterProgrammes","condition","initialList","filteredList","segmentFilter","entries","value","modeOfStudy","fullTime","partTime","concat","discFiltered","uniFiltered","awardedBy","acadFiltered","academicLevel","entryFiltered","entryQualifications","aLevel","oLevel","diploma","degree","subDiscFiltered","subDiscipline","padding","paddingLeft","e","nativeEvent","uniLogo","programmeTitle"],"mappings":"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","sourcesContent":["import { IonAlert, IonBadge, IonButton, IonCol, IonContent, IonGrid, IonHeader, IonLabel, IonPage, IonPopover, IonRouterLink, IonRow, IonTitle, IonToolbar } from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faFilter } from '@fortawesome/free-solid-svg-icons';\n\nimport '../../css/Global.css';\nimport '../../css/Study@SIMProgList.css';\nimport TopNav from '../../components/TopNav';\nimport CompareProgPopoverContent from '../../components/Study@SIM/CompareProgPopoverContent';\nimport FilterPopoverContent from '../../components/FilterPopoverContent';\nimport { db } from '../../firebase';\nimport { Programme, ProgrammeFilter } from '../../modules/map';\n\ninterface StudySIMProgList_Props extends RouteComponentProps<{\n    discipline: string;\n    category: string;\n}> { }\n\n// interface myProps {\n//     compareProgList: Programme[],\n//     onCompareProgListChange: (programmes: Programme[]) => void\n// }\nconst StudySIMProgList: React.FC<StudySIMProgList_Props> = (props) => {\n\n    const { match } = props;\n    const { params: { discipline, category } } = match\n\n    //Frontend\n    /*To remove selected programmes in comparePopOver */\n    const removeProg = (programme: Programme) => {\n        const newProgList = [...compareProgList]\n        const newProgID = programme.id\n        const updatedProgList = newProgList.filter(programme => { return programme.id !== newProgID })\n        setCompareProgList(updatedProgList)\n\n    }\n    /*To remove all selected programmes in comparePopOver */\n    const removeAllProg = (programmes: Programme[]) => {\n        const newProgList = [...compareProgList]\n        const updatedProgList = newProgList.filter(programme => { return programme.id === '' })\n        setCompareProgList(updatedProgList)\n\n    }\n\n    /* Display Compare Prog Popover */\n    const [showCompareProgPopover, setShowCompareProgPopover] = useState<{ open: boolean, event: Event | undefined }>({\n        open: false,\n        event: undefined,\n    });\n\n    /* \"If no prog is added to compare\" Alert */\n    const [showCompareProgAlert, setShowCompareProgAlert] = useState(false);\n\n    /* Display Filter Menu Popover */\n    const [showProgCourseFilterPopover, setShowProgCourseFilterPopover] = useState<{ open: boolean, event: Event | undefined }>({\n        open: false,\n        event: undefined,\n    });\n\n    //Programme List\n    const [programmes, setProgrammes] = useState<Programme[]>([])\n\n    /* When page first load, data retrieval*/\n    useEffect(() => {\n        console.log(\"ProgList rendered\")\n        /*Fetching Programmes Data from firestore*/\n        const fetchData = async (discipline: string, category: string) => {\n            const programmes: any = []\n            await db.collection('ProgrammesMobile')\n                .where(\"discipline\", \"array-contains\", discipline)\n                .where(\"academicLevel\", '==', category)\n                .get()\n                .then((snapshot: any) => {\n                    snapshot.docs.forEach((doc: any) => {\n                        const data = doc.data()\n                        programmes.push(data)\n                    })\n                    setProgrammes(programmes)\n                }).catch((error) => console.log(error));\n\n        }\n\n        fetchData(discipline, category)\n\n        const sessionList: Programme[] = window.sessionStorage.compareProgList ? JSON.parse(window.sessionStorage.compareProgList) : [];\n        setCompareProgList(sessionList);\n    }, [])\n\n    //Compare function\n    //programmes to be rendered and the comparepopover list\n    const [compareProgList, setCompareProgList] = useState<Programme[]>(window.sessionStorage.compareProgList ? JSON.parse(window.sessionStorage.compareProgList) : [])\n\n    //To get the unique disciplines for rendering at the header\n    const allDisc = programmes.map(programme => programme.discipline)\n    const disc: string[] = []\n    allDisc.map(data => data.map(data => disc.push(data)))\n    let uniqueDisc: string[] = [...new Set(disc)]\n\n    //For storing the compare list into session\n    useEffect(() => {\n        return () => {\n            window.sessionStorage.setItem(\"compareProgList\", JSON.stringify(compareProgList));\n        }\n    }, [compareProgList])\n\n    /* Adding programme for comparison - Need to be generated dynamically */\n    const compareProgramme = (programme: Programme) => {\n        const newProgList = [...compareProgList]\n        const newProgID = programme.id\n\n        if (newProgList.length < 3) {\n            if (newProgList.includes(programme)) {\n                const updatedProgList = newProgList.filter(existingProg => { return existingProg.id !== newProgID })\n                setCompareProgList(updatedProgList)\n            }\n            else {\n                newProgList.push(programme)\n                setCompareProgList(newProgList)\n            }\n        }\n        else {\n\n            if (newProgList.includes(programme)) {\n                const updatedProgList = newProgList.filter(existingProg => { return existingProg.id != newProgID })\n                setCompareProgList(updatedProgList)\n            }\n            else {\n                setShowCompareProgAlert(true);\n            }\n\n        }\n    };\n\n\n\n    //Filter functions\n    const [filterCondition, setFilterCondition] = useState<ProgrammeFilter>({\n        mos: ['fullPartTime', 'partTime', 'fullTime'],\n        discipline: [discipline],\n        uni: [],\n        acadLvl: [category],\n        entry: [],\n        subDisc: []\n    })\n\n    //update the filter condition from FilterPopoverContent \n    const onUpdateFilter = (mosFilter: string[], discFilter: string[], uniFilter: string[], acadLvlFilter: string[], entryFilter: string[], subDiscFilter: string[]) => {\n        setFilterCondition(prevState => {\n            let filter = { ...prevState };\n            Object.keys(filter).map(key => {\n                if (key === 'mos')\n                    filter[key] = mosFilter;\n                if (key === 'discipline')\n                    filter[key] = discFilter;\n                if (key === 'uni')\n                    filter[key] = uniFilter;\n                if (key === 'acadLvl')\n                    filter[key] = acadLvlFilter;\n                if (key === 'entry')\n                    filter[key] = entryFilter;\n                if (key === 'subDisc')\n                    filter[key] = subDiscFilter;\n            })\n            return filter;\n        })\n    }\n\n    const filterProgrammes = async (condition: ProgrammeFilter) => {\n        const initialList: Programme[] = []\n        let filteredList: Programme[] = []\n        let segmentFilter: Programme[] = []\n\n        await db.collection('ProgrammesMobile')\n            .get()\n            .then(snapshot => {\n                snapshot.docs.forEach((doc: any) => {\n                    const data = doc.data()\n                    initialList.push(data)\n                })\n            })\n\n        Object.entries(condition).map(([key, value]) => {\n            if (key === 'mos') {\n                if (value.length < 3 && value.length > 0) {\n                    value.forEach((value: string) => {\n                        if (value === 'fullPartTime') {\n                            segmentFilter = initialList.filter(programme => programme.modeOfStudy.fullTime && programme.modeOfStudy.partTime)\n                            filteredList = filteredList.concat(segmentFilter)\n\n\n                        }\n                        if (value === 'fullTime') {\n                            segmentFilter = initialList.filter(programme => programme.modeOfStudy.fullTime && !programme.modeOfStudy.partTime)\n                            filteredList = filteredList.concat(segmentFilter)\n\n                        }\n                        if (value === 'partTime') {\n                            segmentFilter = initialList.filter(programme => !programme.modeOfStudy.fullTime && programme.modeOfStudy.partTime)\n                            filteredList = filteredList.concat(segmentFilter)\n\n                        }\n                    })\n                }\n                else if (value.length === 0 || value.length === 3) {\n                    filteredList = initialList\n                }\n            }\n            else if (key === 'discipline') {\n                let discFiltered: Programme[] = []\n                if (value.length > 0 && value.length <= 4) {\n                    value.forEach((value: string) => {\n                        segmentFilter = filteredList.filter(programme => programme.discipline.includes(value))\n                        discFiltered = discFiltered.concat(segmentFilter)\n                    })\n                    filteredList = discFiltered\n                }\n\n            }\n\n            else if (key === 'uni') {\n                let uniFiltered: Programme[] = []\n                if (value.length > 0) {\n                    value.forEach((value: string) => {\n                        segmentFilter = filteredList.filter(programme => programme.awardedBy == value)\n                        uniFiltered = uniFiltered.concat(segmentFilter)\n                    })\n                    filteredList = uniFiltered\n                }\n            }\n            else if (key === 'acadLvl') {\n                let acadFiltered: Programme[] = []\n                if (value.length > 0) {\n                    value.forEach((value: string) => {\n                        segmentFilter = filteredList.filter(programme => programme.academicLevel === value)\n                        acadFiltered = acadFiltered.concat(segmentFilter)\n                    })\n                    filteredList = acadFiltered\n                }\n            }\n\n            else if (key === 'entry') {\n                let entryFiltered: Programme[] = []\n                if (value.length > 0) {\n                    value.forEach((value: string) => {\n                        if (value === 'aLevel') {\n                            segmentFilter = filteredList.filter(programme => programme.entryQualifications.aLevel)\n                            entryFiltered = entryFiltered.concat(segmentFilter)\n                        }\n                        else if (value === 'oLevel') {\n                            segmentFilter = filteredList.filter(programme => programme.entryQualifications.oLevel)\n                            entryFiltered = entryFiltered.concat(segmentFilter)\n                        }\n                        else if (value === 'diploma') {\n                            segmentFilter = filteredList.filter(programme => programme.entryQualifications.diploma)\n                            entryFiltered = entryFiltered.concat(segmentFilter)\n                        }\n                        else if (value === 'degree') {\n                            segmentFilter = filteredList.filter(programme => programme.entryQualifications.degree)\n                            entryFiltered = entryFiltered.concat(segmentFilter)\n                        }\n                    })\n                    filteredList = entryFiltered\n                }\n            }\n            else if (key === 'subDisc') {\n                let subDiscFiltered: Programme[] = []\n\n                if (value.length > 0) {\n                    value.forEach((value: string) => {\n                        segmentFilter = filteredList.filter(programme => programme.subDiscipline.includes(value))\n                        subDiscFiltered = subDiscFiltered.concat(segmentFilter)\n                    })\n                    filteredList = subDiscFiltered\n\n                }\n            }\n        }\n        )\n        setProgrammes(filteredList)\n\n    }\n\n    //When filter condition updated, runs the filter programme\n    useEffect(() => {\n        filterProgrammes(filterCondition)\n    }, [filterCondition])\n\n    return (\n        <React.Fragment>\n\n            <IonAlert\n                isOpen={showCompareProgAlert}\n                onDidDismiss={() => setShowCompareProgAlert(false)}\n                cssClass='alertBox'\n                mode='md'\n                message={'You may compare up to 3 programmes at a time by tapping on the Compare button of the programme(s).'}\n                buttons={['OK']}\n            ></IonAlert>\n\n\n            <IonPage>\n                <IonHeader>\n                    <TopNav title=\"Study@SIM\" route='/u/study@SIMMain' backarrow={true} hamburger={true} />\n\n                    <IonToolbar id=\"studySIMProgListHeaderToolbar\">\n                        <IonGrid style={{ padding: \"0\" }}>\n                            <IonRow id=\"studySIMProgListHeaderRow\" class=\"ion-align-items-center\">\n                                <IonCol size=\"6\" sizeSm=\"6\" class=\"ion-text-left\" className=\"studySIMProgListCol\" style={{ paddingLeft: \"3%\" }}>\n                                    <IonTitle className=\"studyProgListTitle\">\n                                        {uniqueDisc.length === 1 ? uniqueDisc.map(disc => {\n                                            return (<div key={disc} className=\"ion-text-wrap\">{disc}</div>)\n                                        }) : ''}\n\n                                    </IonTitle>\n                                </IonCol>\n\n                                <IonCol size=\"4\" sizeSm=\"4\" class=\"ion-text-right\" className=\"studySIMProgListCol\">\n                                    <IonButton id=\"compareBtn\" fill=\"clear\" onClick={(e) => {\n                                        if (compareProgList.length < 1 || compareProgList.length > 3) {\n                                            setShowCompareProgAlert(true);\n                                        } else {\n                                            setShowCompareProgPopover({ open: true, event: e.nativeEvent })\n                                        }\n                                    }\n                                    }>\n                                        <IonLabel className=\"compareLabel\">Compare</IonLabel>\n                                        <IonBadge id=\"compareBadge\">{compareProgList.length}</IonBadge>\n                                    </IonButton>\n                                </IonCol>\n\n                                <IonCol size=\"2\" sizeSm=\"2\" class=\"ion-text-center\" className=\"studySIMProgListCol\">\n                                    <IonButton id=\"filterBtn\" fill=\"clear\" onClick={(e) => {\n                                        setShowProgCourseFilterPopover({ open: true, event: e.nativeEvent })\n                                    }\n                                    }>\n                                        <FontAwesomeIcon className=\"filterIcon\" size=\"lg\" icon={faFilter} />\n                                    </IonButton>\n                                </IonCol>\n                            </IonRow>\n                        </IonGrid>\n                    </IonToolbar>\n\n                </IonHeader>\n\n                <IonContent fullscreen={true} id=\"studySIMProgListContent\">\n                    <IonGrid id=\"studySIMProgListGrid\">\n\n                        {/* Programme List */}\n                        {programmes ?\n                            programmes.map((programme: Programme) => {\n                                return (\n                                    <div key={programme.id}>\n                                        <>\n                                            <IonRow className=\"studySIMProgListRow\" class=\"ion-align-items-center\">\n                                                <IonCol size=\"4\" sizeSm=\"4\" class=\"ion-text-center\">\n                                                    <img src={programme.uniLogo} className=\"studyProgUniImg\"></img>\n                                                </IonCol>\n\n                                                <IonCol size=\"8\" sizeSm=\"8\" className=\"studySIMProgListColDetails\" class=\"ion-text-left\">\n                                                    {/* Programme Title */}\n                                                    <IonRow className=\"progCourseRow\">\n                                                        <IonRouterLink id=\"progCourseTitleLink\" href={`/u/study@SIMMain/Study@SIMProgInfo/${programme.id}/${discipline}/${category}`}>\n                                                            <IonTitle className=\"progCourseTitle\">\n                                                                <div className=\"ion-text-wrap\">{programme.programmeTitle}</div>\n                                                            </IonTitle>\n                                                        </IonRouterLink>\n                                                    </IonRow>\n\n                                                    {/* Awarding Uni */}\n                                                    <IonRow className=\"progCourseRow\">\n                                                        <IonCol size=\"4\" sizeSm=\"4\" class=\"ion-text-left\" className=\"progCourseAwardingUniCol\">\n                                                            <IonLabel className=\"progCourseAwardingUniLabel\">\n                                                                <div className=\"ion-text-wrap\">Awarded by:</div>\n                                                            </IonLabel>\n                                                        </IonCol>\n\n                                                        <IonCol size=\"8\" sizeSm=\"8\" class=\"ion-text-left\" className=\"progCourseAwardingUniCol\">\n                                                            <IonLabel className=\"progCourseAwardingUniName\">\n                                                                <div className=\"ion-text-wrap\">{programme.awardedBy}</div>\n                                                            </IonLabel>\n                                                        </IonCol>\n                                                    </IonRow>\n\n                                                    <IonRow className=\"progCompareBtnRow\">\n                                                        <IonCol size=\"12\" sizeSm=\"12\" class=\"ion-text-right\" className=\"progCompareBtnCol\">\n                                                            {compareProgList.includes(programme) ?\n                                                                <IonButton className=\"progCompareBtnSelected\" size=\"small\" type=\"submit\" onClick={e => compareProgramme(programme)}>Compared\n                                                    <FontAwesomeIcon style={{ paddingLeft: \"3%\" }} icon={faCheck} />\n                                                                </IonButton>\n                                                                :\n                                                                (<IonButton className=\"progCompareBtn\" size=\"small\" type=\"submit\" onClick={e => compareProgramme(programme)}>Compare</IonButton>)\n                                                            }\n\n                                                        </IonCol>\n                                                    </IonRow>\n                                                </IonCol>\n                                            </IonRow>\n                                        </></div>\n                                )\n                            })\n\n                            : ''\n                        }\n\n                    </IonGrid>\n\n                    {/* Compare Programme Popover */}\n                    <IonPopover id=\"compareProgPopover\"\n                        cssClass='compareProgPopover'\n                        isOpen={showCompareProgPopover.open}\n                        event={showCompareProgPopover.event}\n                        onDidDismiss={e => setShowCompareProgPopover({ open: false, event: undefined })}\n                    >\n                        <CompareProgPopoverContent compareProgList={compareProgList} removeProg={removeProg} removeAllProg={removeAllProg} viewResults={() => (console.log('Add viewResults function here'))}\n                            href={`/u/study@SIMMain/${props.match.params.discipline}/${props.match.params.category}/courseComparator`} />\n\n                    </IonPopover>\n\n\n                    {/* Filter Programmes Popover */}\n                    <IonPopover id=\"progCourseFilterPopover\"\n                        cssClass='progCourseFilterPopover'\n                        isOpen={showProgCourseFilterPopover.open}\n                        event={showProgCourseFilterPopover.event}\n                        onDidDismiss={e => setShowProgCourseFilterPopover({ open: false, event: undefined })}\n                    >\n                        <FilterPopoverContent filterFunction={filterProgrammes} programmes={programmes} filterFor={\"study@SIM\"} filterCondition={filterCondition} onUpdateFilter={onUpdateFilter} discipline={discipline} category={category} setState=\"\" />\n                    </IonPopover>\n                </IonContent>\n\n            </IonPage>\n        </React.Fragment>\n    );\n};\n\nexport default StudySIMProgList;"]},"metadata":{},"sourceType":"module"}