{"ast":null,"code":"var _jsxFileName = \"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\src\\\\components\\\\OpenHouseProgrammes\\\\ProgTalkSchedule.tsx\";\nimport { IonGrid, IonRow, IonCol, IonButton, IonAlert, IonLoading } from '@ionic/react';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport firebase from 'firebase';\nimport '../../css/Global.css';\nimport '../../css/ProgrammeTalks.css';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { db } from '../../firebase';\nimport { useAuth } from '../../auth';\nimport { toDateObject } from '../../convert';\n\nconst ProgTalkSchedule = props => {\n  const {\n    userID\n  } = useAuth();\n  const [alert, setAlert] = useState({\n    registerSuccess: false,\n    registerFail: false,\n    loading: false\n  });\n  const programmeTalkDay1 = props.programmeTalk.filter(talk => {\n    return talk.date == props.openhouseDates[0];\n  });\n  const programmeTalkDay2 = props.programmeTalk.filter(talk => {\n    return talk.date == props.openhouseDates[1];\n  });\n\n  const displayRegisterAlert = () => {\n    {\n      /* Logic to check if there is another existing programme in My Schedule that is the same day & timing \r\n       of the programme the user wants to add*/\n    }\n    {\n      /* if (exist) {\r\n          setRegisterSuccess(true);\r\n          setRegisterFail(false);\r\n      } else {\r\n          setRegisterFail(true);\r\n         setRegisterSuccess(false);\r\n      } */\n    }\n    {\n      /* set state to disable the + btn in else {} */\n    }\n  };\n\n  const addToSchedule = async programme => {\n    try {\n      setAlert({\n        registerSuccess: false,\n        registerFail: false,\n        loading: true\n      });\n      await db.collection('PersonalScheduler').doc(userID).get().then(snapshot => {\n        const registered = snapshot.data().registeredProgrammes;\n\n        if (registered != null) {\n          if (registered.length > 0) {\n            for (let item of registered) {\n              const itemType = item.split(\"-\");\n\n              switch (itemType[0]) {\n                case \"talk\":\n                  return db.collection('ProgrammeTalks').doc(item).onSnapshot(doc => {\n                    if (programme.date == doc.data().date) {\n                      const progStart = toDateObject(programme.date, programme.startTime),\n                            progEnd = toDateObject(programme.date, programme.endTime);\n                      const itemStart = toDateObject(doc.data().date, doc.data().startTime),\n                            itemEnd = toDateObject(doc.data().date, doc.data().endTime); //let progStart = Number(programme.startTime.split(\":\")[0]), progEnd = Number(programme.endTime.split(\":\")[0]);\n                      //let itemStart = Number(doc.data().startTime.split(\":\")[0]), itemEnd = Number(doc.data().endTime.split(\":\")[0]);\n                      //if (programme.startTime.slice(-2, programme.startTime.length) == \"PM\") progStart += 12;\n                      //if (programme.endTime.slice(-2, programme.startTime.length) == \"PM\") progStart += 12;\n                      //if (doc.data().startTime.slice(-2, doc.data().startTime.length) == \"PM\") progStart += 12;\n                      //if (doc.data().endTime.slice(-2, doc.data().endTime.length) == \"PM\") progStart += 12;\n\n                      if (progStart >= itemStart && progStart < itemEnd || progEnd > itemStart && progEnd <= itemEnd) {\n                        setAlert({\n                          registerSuccess: false,\n                          registerFail: true,\n                          loading: false\n                        });\n                      } else {\n                        db.collection('PersonalScheduler').doc(userID).update({\n                          registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                        });\n                        setAlert({\n                          registerSuccess: true,\n                          registerFail: false,\n                          loading: false\n                        });\n                      }\n                    } else {\n                      db.collection('PersonalScheduler').doc(userID).update({\n                        registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                      });\n                      setAlert({\n                        registerSuccess: true,\n                        registerFail: false,\n                        loading: false\n                      });\n                    }\n                  });\n\n                case \"tour\":\n                  return db.collection('GuidedTours').doc(item).onSnapshot(doc => {\n                    if (programme.date == doc.data().date) {\n                      const progStart = toDateObject(programme.date, programme.startTime),\n                            progEnd = toDateObject(programme.date, programme.endTime);\n                      const itemStart = toDateObject(doc.data().date, doc.data().startTime),\n                            itemEnd = toDateObject(doc.data().date, doc.data().endTime);\n\n                      if (progStart >= itemStart && progStart < itemEnd || progEnd > itemStart && progEnd <= itemEnd) {\n                        setAlert({\n                          registerSuccess: false,\n                          registerFail: true,\n                          loading: false\n                        });\n                      } else {\n                        db.collection('PersonalScheduler').doc(userID).update({\n                          registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                        });\n                        setAlert({\n                          registerSuccess: true,\n                          registerFail: false,\n                          loading: false\n                        });\n                      }\n                    } else {\n                      db.collection('PersonalScheduler').doc(userID).update({\n                        registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                      });\n                      setAlert({\n                        registerSuccess: true,\n                        registerFail: false,\n                        loading: false\n                      });\n                    }\n                  });\n\n                case \"performance\":\n                  return db.collection('Performances').doc(item).onSnapshot(doc => {\n                    if (programme.date == doc.data().date) {\n                      const progStart = toDateObject(programme.date, programme.startTime),\n                            progEnd = toDateObject(programme.date, programme.endTime);\n                      const itemStart = toDateObject(doc.data().date, doc.data().startTime),\n                            itemEnd = toDateObject(doc.data().date, doc.data().endTime);\n\n                      if (progStart >= itemStart && progStart < itemEnd || progEnd > itemStart && progEnd <= itemEnd) {\n                        setAlert({\n                          registerSuccess: false,\n                          registerFail: true,\n                          loading: false\n                        });\n                      } else {\n                        db.collection('PersonalScheduler').doc(userID).update({\n                          registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                        });\n                        setAlert({\n                          registerSuccess: true,\n                          registerFail: false,\n                          loading: false\n                        });\n                      }\n                    } else {\n                      db.collection('PersonalScheduler').doc(userID).update({\n                        registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                      });\n                      setAlert({\n                        registerSuccess: true,\n                        registerFail: false,\n                        loading: false\n                      });\n                    }\n                  });\n\n                default:\n                  setAlert({\n                    registerSuccess: true,\n                    registerFail: false,\n                    loading: false\n                  });\n              }\n\n              if (!alert.registerSuccess) {\n                break;\n              }\n            }\n\n            {\n              /* registered.forEach((item: any) => {\r\n                 const itemType = item.split(\"-\");\r\n                 console.log(\"-----------------------------------------------------------\")\r\n                 console.log(item)\r\n                 console.log(\"-----------------------------------------------------------\")\r\n                               switch (itemType[0]) {\r\n                     case \"talk\":\r\n                         return db.collection('ProgrammeTalks').doc(item).onSnapshot((doc: any) => {\r\n                             //console.log(doc.data().startTime.slice(-2, doc.data().startTime.length))\r\n                             console.log(\"date\", programmeTalk.date, doc.data().date)\r\n                             if (programmeTalk.date == doc.data().date) {\r\n                                 //console.log(true)\r\n                                 let progStart = Number(programmeTalk.startTime.split(\":\")[0]), progEnd = Number(programmeTalk.endTime.split(\":\")[0]);\r\n                                 let itemStart = Number(doc.data().startTime.split(\":\")[0]), itemEnd = Number(doc.data().endTime.split(\":\")[0]);\r\n                                 //console.log(progStart, itemStart)\r\n                                 if (programmeTalk.startTime.slice(-2, programmeTalk.startTime.length) == \"PM\") progStart += 12;\r\n                                 if (programmeTalk.endTime.slice(-2, programmeTalk.startTime.length) == \"PM\") progStart += 12;\r\n                                 if (doc.data().startTime.slice(-2, doc.data().startTime.length) == \"PM\") progStart += 12;\r\n                                 if (doc.data().endTime.slice(-2, doc.data().endTime.length) == \"PM\") progStart += 12;\r\n                                               //console.log(\"progStart\", progStart)\r\n                                 //console.log(\"progEnd\", progEnd)\r\n                                 //console.log(\"itemStart\", itemStart)\r\n                                 //console.log(\"itenEnd\", itemEnd)\r\n                                               if ((progStart >= itemStart && progStart < itemEnd) || (progEnd > itemStart && progEnd <= itemEnd)) {\r\n                                     console.log(\"conflict\", true)\r\n                                     console.log(\"conflict\", programmeTalk.id, doc.data().id)\r\n                                     //isConflict = true;\r\n                                     int = 1\r\n                                     //return;\r\n                                 } else {\r\n                                     console.log(\"conflict\", false)\r\n                                     console.log(\"conflict\", programmeTalk.id, doc.data().id)\r\n                                     //isConflict = false;\r\n                                     int = 0\r\n                                     console.log(\"conflict test 1\", int)\r\n                                       db.collection('PersonalScheduler').doc(userID).update({\r\n                                         registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programmeTalk.id)\r\n                                     });\r\n                                     //return;\r\n                                 }\r\n                             } else {\r\n                                 //isConflict = false;\r\n                                 int = 0\r\n                                 //console.log(\"asdsdadsd\")\r\n                                 //return;\r\n                                 db.collection('PersonalScheduler').doc(userID).update({\r\n                                     registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programmeTalk.id)\r\n                                 });\r\n                             }\r\n                         });\r\n                     case \"tour\":\r\n                         //return db.collection('GuidedTours').doc(item).onSnapshot(doc => {});\r\n                     case \"performance\":\r\n                         //return db.collection('Performances').doc(item).onSnapshot(doc => {});\r\n                     default:\r\n                         console.log(\"default\")\r\n                 }\r\n              }); */\n            }\n          } else {\n            db.collection('PersonalScheduler').doc(userID).update({\n              registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n            });\n            setAlert({\n              registerSuccess: true,\n              registerFail: false,\n              loading: false\n            });\n          }\n        } else {\n          db.collection('PersonalScheduler').doc(userID).update({\n            registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n          });\n          setAlert({\n            registerSuccess: true,\n            registerFail: false,\n            loading: false\n          });\n        }\n      });\n\n      if (alert.registerSuccess) {// disable button\n      }\n    } catch (e) {\n      setAlert({\n        registerSuccess: false,\n        registerFail: false,\n        loading: false\n      });\n      return console.log(e);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: alert.registerSuccess,\n    onDidDismiss: () => setAlert({\n      registerSuccess: false,\n      registerFail: false,\n      loading: false\n    }),\n    cssClass: \"alertBox\",\n    mode: \"md\",\n    header: 'Successfully Registered',\n    message: 'You have successfully registered for the programme talk and it has been successfully added to My Schedule.',\n    buttons: ['Close'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: alert.registerFail,\n    onDidDismiss: () => setAlert({\n      registerSuccess: false,\n      registerFail: false,\n      loading: false\n    }),\n    cssClass: \"alertBox\",\n    mode: \"md\",\n    header: 'Registration Unsuccessful',\n    message: 'There exists an open house programme in your scheduler at this timing. Please remove the existing programme from your scheduler first!',\n    buttons: ['Close'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonGrid, {\n    className: \"progTalk-TableGrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonRow, {\n    className: \"ion-justify-content-center progTalk-TableHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"3\",\n    sizeSm: \"3\",\n    className: \"progTalk-DataHeader ion-text-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 21\n    }\n  }, \"Programme Talk\"), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"3\",\n    sizeSm: \"3\",\n    className: \"progTalk-DataHeader ion-text-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 21\n    }\n  }, \"Awarding University\"), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"2\",\n    sizeSm: \"2\",\n    className: \"progTalk-DataHeader ion-text-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 21\n    }\n  }, \"Time\"), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"2\",\n    sizeSm: \"2\",\n    className: \"progTalk-DataHeader ion-text-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 21\n    }\n  }, \"Venue\"), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"2\",\n    sizeSm: \"2\",\n    className: \"progTalk-DataHeader ion-text-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 21\n    }\n  }, \"Add to My Schedule\")), props.day1 === 'day1' ? programmeTalkDay1.map(programmeTalk => {\n    return /*#__PURE__*/React.createElement(IonRow, {\n      className: \"ion-justify-content-center\",\n      id: \"progTalk-DataRow\",\n      key: programmeTalk.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(IonCol, {\n      size: \"3\",\n      sizeSm: \"3\",\n      className: \"progTalk-DataInfo ion-text-wrap progName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      id: \"uniLink\",\n      to: `/programmeTalks/progTalkInfo/${programmeTalk.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 37\n      }\n    }, programmeTalk.talkName)), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"3\",\n      sizeSm: \"3\",\n      className: \"progTalk-DataInfo ion-text-wrap\",\n      id: \"awardingUni\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 33\n      }\n    }, programmeTalk.awardingUni, \" \"), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"2\",\n      sizeSm: \"2\",\n      className: \"progTalk-DataInfo ion-text-wrap\",\n      id: \"talkTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 33\n      }\n    }, programmeTalk.startTime + \" to \" + programmeTalk.endTime), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"2\",\n      sizeSm: \"2\",\n      className: \"progTalk-DataInfo ion-text-wrap\",\n      id: \"talkVenue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 33\n      }\n    }, programmeTalk.venue), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"2\",\n      sizeSm: \"2\",\n      className: \"progTalk-DataInfo ion-text-wrap\",\n      id: \"addCol\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(IonButton, {\n      className: \"progTalk-DataBtn\",\n      id: \"addBtn\",\n      size: \"small\",\n      style: {\n        marginTop: \"-5%\",\n        marginBottom: \"-5%\"\n      },\n      onClick: () => addToSchedule(programmeTalk),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 41\n      }\n    }))));\n  }) : '', props.day2 === 'day2' ? programmeTalkDay2.map(programmeTalk => {\n    return /*#__PURE__*/React.createElement(IonRow, {\n      className: \"ion-justify-content-center\",\n      id: \"progTalk-DataRow\",\n      key: programmeTalk.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(IonCol, {\n      sizeSm: \"3\",\n      className: \"progTalk-DataInfo ion-text-wrap progName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: `/programmeTalks/progTalkInfo/${programmeTalk.id}`,\n      id: \"uniLink\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 37\n      }\n    }, programmeTalk.talkName)), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"3\",\n      sizeSm: \"3\",\n      className: \"progTalk-DataInfo ion-text-wrap\",\n      id: \"awardingUni\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 33\n      }\n    }, programmeTalk.awardingUni), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"2\",\n      sizeSm: \"2\",\n      className: \"progTalk-DataInfo ion-text-wrap\",\n      id: \"talkTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 33\n      }\n    }, programmeTalk.startTime + \" to \" + programmeTalk.endTime), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"2\",\n      sizeSm: \"2\",\n      className: \"progTalk-DataInfo ion-text-wrap\",\n      id: \"talkVenue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 33\n      }\n    }, programmeTalk.venue), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"2\",\n      sizeSm: \"2\",\n      className: \"progTalk-DataInfo ion-text-wrap\",\n      id: \"addCol\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(IonButton, {\n      className: \"progTalk-DataBtn\",\n      id: \"addBtn\",\n      size: \"small\",\n      style: {\n        marginTop: \"-5%\",\n        marginBottom: \"-5%\"\n      },\n      onClick: () => addToSchedule(programmeTalk),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 41\n      }\n    }))));\n  }) : ''), /*#__PURE__*/React.createElement(IonLoading, {\n    isOpen: alert.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default ProgTalkSchedule;","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/components/OpenHouseProgrammes/ProgTalkSchedule.tsx"],"names":["IonGrid","IonRow","IonCol","IonButton","IonAlert","IonLoading","React","useState","Link","firebase","faPlus","FontAwesomeIcon","db","useAuth","toDateObject","ProgTalkSchedule","props","userID","alert","setAlert","registerSuccess","registerFail","loading","programmeTalkDay1","programmeTalk","filter","talk","date","openhouseDates","programmeTalkDay2","displayRegisterAlert","addToSchedule","programme","collection","doc","get","then","snapshot","registered","data","registeredProgrammes","length","item","itemType","split","onSnapshot","progStart","startTime","progEnd","endTime","itemStart","itemEnd","update","firestore","FieldValue","arrayUnion","id","e","console","log","day1","map","talkName","awardingUni","venue","marginTop","marginBottom","day2"],"mappings":"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","sourcesContent":["import { IonGrid, IonRow, IonCol, IonButton, IonAlert, IonLoading } from '@ionic/react';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { sync } from 'ionicons/icons';\r\nimport firebase from 'firebase';\r\n\r\nimport '../../css/Global.css';\r\nimport '../../css/ProgrammeTalks.css'\r\n\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { db } from '../../firebase';\r\nimport { useAuth } from '../../auth';\r\nimport { toDateObject } from '../../convert';\r\n\r\nconst ProgTalkSchedule: React.FC<{\r\n    day1: any;\r\n    day2: any;\r\n    programmeTalk: any;\r\n    openhouseDates: any;\r\n}> = props => {\r\n    const { userID } = useAuth();\r\n    const [alert, setAlert] = useState({ registerSuccess: false, registerFail: false, loading: false });\r\n\r\n    const programmeTalkDay1 = props.programmeTalk\r\n        .filter((talk: any) => {\r\n            return talk.date == props.openhouseDates[0]\r\n        })\r\n\r\n    const programmeTalkDay2 = props.programmeTalk\r\n        .filter((talk: any) => {\r\n            return talk.date == props.openhouseDates[1]\r\n        })\r\n\r\n    const displayRegisterAlert = () => {\r\n        {/* Logic to check if there is another existing programme in My Schedule that is the same day & timing \r\n          of the programme the user wants to add*/}\r\n\r\n        {/* if (exist) {\r\n             setRegisterSuccess(true);\r\n             setRegisterFail(false);\r\n         } else {\r\n             setRegisterFail(true);\r\n            setRegisterSuccess(false);\r\n        } */}\r\n\r\n        {/* set state to disable the + btn in else {} */ }\r\n    };\r\n\r\n    const addToSchedule = async (programme: any) => {\r\n        try {\r\n            setAlert({ registerSuccess: false, registerFail: false, loading: true });\r\n\r\n            await db.collection('PersonalScheduler').doc(userID).get().then((snapshot: any) => {\r\n                const registered = snapshot.data().registeredProgrammes;\r\n                \r\n                if (registered != null) {\r\n                    if (registered.length > 0) {\r\n                        \r\n                        for (let item of registered) {\r\n                            const itemType = item.split(\"-\");\r\n            \r\n                            switch (itemType[0]) {\r\n                                case \"talk\":\r\n                                    return db.collection('ProgrammeTalks').doc(item).onSnapshot((doc: any) => {\r\n\r\n                                        if (programme.date == doc.data().date) {\r\n\r\n                                            const progStart = toDateObject(programme.date, programme.startTime), progEnd = toDateObject(programme.date, programme.endTime);\r\n                                            const itemStart = toDateObject(doc.data().date, doc.data().startTime), itemEnd = toDateObject(doc.data().date, doc.data().endTime);\r\n\r\n                                            //let progStart = Number(programme.startTime.split(\":\")[0]), progEnd = Number(programme.endTime.split(\":\")[0]);\r\n                                            //let itemStart = Number(doc.data().startTime.split(\":\")[0]), itemEnd = Number(doc.data().endTime.split(\":\")[0]);\r\n\r\n                                            //if (programme.startTime.slice(-2, programme.startTime.length) == \"PM\") progStart += 12;\r\n                                            //if (programme.endTime.slice(-2, programme.startTime.length) == \"PM\") progStart += 12;\r\n                                            //if (doc.data().startTime.slice(-2, doc.data().startTime.length) == \"PM\") progStart += 12;\r\n                                            //if (doc.data().endTime.slice(-2, doc.data().endTime.length) == \"PM\") progStart += 12;\r\n            \r\n                                            if ((progStart >= itemStart && progStart < itemEnd) || (progEnd > itemStart && progEnd <= itemEnd)) {\r\n                                                setAlert({ registerSuccess: false, registerFail: true, loading: false });\r\n                                            } else {\r\n                                                db.collection('PersonalScheduler').doc(userID).update({\r\n                                                    registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                                });\r\n                                                setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                            }\r\n\r\n                                        } else {\r\n                                            db.collection('PersonalScheduler').doc(userID).update({\r\n                                                registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                            });\r\n                                            setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                        }\r\n                                    });\r\n\r\n                                case \"tour\":\r\n                                    return db.collection('GuidedTours').doc(item).onSnapshot((doc: any) => {\r\n\r\n                                        if (programme.date == doc.data().date) {\r\n\r\n                                            const progStart = toDateObject(programme.date, programme.startTime), progEnd = toDateObject(programme.date, programme.endTime);\r\n                                            const itemStart = toDateObject(doc.data().date, doc.data().startTime), itemEnd = toDateObject(doc.data().date, doc.data().endTime);\r\n            \r\n                                            if ((progStart >= itemStart && progStart < itemEnd) || (progEnd > itemStart && progEnd <= itemEnd)) {\r\n                                                setAlert({ registerSuccess: false, registerFail: true, loading: false });\r\n                                            } else {\r\n                                                db.collection('PersonalScheduler').doc(userID).update({\r\n                                                    registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                                });\r\n                                                setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                            }\r\n\r\n                                        } else {\r\n                                            db.collection('PersonalScheduler').doc(userID).update({\r\n                                                registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                            });\r\n                                            setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                        }\r\n                                    });\r\n\r\n                                case \"performance\":\r\n                                    return db.collection('Performances').doc(item).onSnapshot((doc: any) => {\r\n\r\n                                        if (programme.date == doc.data().date) {\r\n\r\n                                            const progStart = toDateObject(programme.date, programme.startTime), progEnd = toDateObject(programme.date, programme.endTime);\r\n                                            const itemStart = toDateObject(doc.data().date, doc.data().startTime), itemEnd = toDateObject(doc.data().date, doc.data().endTime);\r\n            \r\n                                            if ((progStart >= itemStart && progStart < itemEnd) || (progEnd > itemStart && progEnd <= itemEnd)) {\r\n                                                setAlert({ registerSuccess: false, registerFail: true, loading: false });\r\n                                            } else {\r\n                                                db.collection('PersonalScheduler').doc(userID).update({\r\n                                                    registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                                });\r\n                                                setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                            }\r\n\r\n                                        } else {\r\n                                            db.collection('PersonalScheduler').doc(userID).update({\r\n                                                registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                            });\r\n                                            setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                        }\r\n                                    });\r\n\r\n                                default:\r\n                                    setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                            }\r\n\r\n                            if (!alert.registerSuccess) {\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        {/* registered.forEach((item: any) => {\r\n                            const itemType = item.split(\"-\");\r\n                            console.log(\"-----------------------------------------------------------\")\r\n                            console.log(item)\r\n                            console.log(\"-----------------------------------------------------------\")\r\n            \r\n                            switch (itemType[0]) {\r\n                                case \"talk\":\r\n                                    return db.collection('ProgrammeTalks').doc(item).onSnapshot((doc: any) => {\r\n                                        //console.log(doc.data().startTime.slice(-2, doc.data().startTime.length))\r\n                                        console.log(\"date\", programmeTalk.date, doc.data().date)\r\n                                        if (programmeTalk.date == doc.data().date) {\r\n                                            //console.log(true)\r\n                                            let progStart = Number(programmeTalk.startTime.split(\":\")[0]), progEnd = Number(programmeTalk.endTime.split(\":\")[0]);\r\n                                            let itemStart = Number(doc.data().startTime.split(\":\")[0]), itemEnd = Number(doc.data().endTime.split(\":\")[0]);\r\n                                            //console.log(progStart, itemStart)\r\n                                            if (programmeTalk.startTime.slice(-2, programmeTalk.startTime.length) == \"PM\") progStart += 12;\r\n                                            if (programmeTalk.endTime.slice(-2, programmeTalk.startTime.length) == \"PM\") progStart += 12;\r\n                                            if (doc.data().startTime.slice(-2, doc.data().startTime.length) == \"PM\") progStart += 12;\r\n                                            if (doc.data().endTime.slice(-2, doc.data().endTime.length) == \"PM\") progStart += 12;\r\n            \r\n                                            //console.log(\"progStart\", progStart)\r\n                                            //console.log(\"progEnd\", progEnd)\r\n                                            //console.log(\"itemStart\", itemStart)\r\n                                            //console.log(\"itenEnd\", itemEnd)\r\n            \r\n                                            if ((progStart >= itemStart && progStart < itemEnd) || (progEnd > itemStart && progEnd <= itemEnd)) {\r\n                                                console.log(\"conflict\", true)\r\n                                                console.log(\"conflict\", programmeTalk.id, doc.data().id)\r\n                                                //isConflict = true;\r\n                                                int = 1\r\n                                                //return;\r\n                                            } else {\r\n                                                console.log(\"conflict\", false)\r\n                                                console.log(\"conflict\", programmeTalk.id, doc.data().id)\r\n                                                //isConflict = false;\r\n                                                int = 0\r\n                                                console.log(\"conflict test 1\", int)\r\n\r\n                                                db.collection('PersonalScheduler').doc(userID).update({\r\n                                                    registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programmeTalk.id)\r\n                                                });\r\n                                                //return;\r\n                                            }\r\n                                        } else {\r\n                                            //isConflict = false;\r\n                                            int = 0\r\n                                            //console.log(\"asdsdadsd\")\r\n                                            //return;\r\n                                            db.collection('PersonalScheduler').doc(userID).update({\r\n                                                registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programmeTalk.id)\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                case \"tour\":\r\n                                    //return db.collection('GuidedTours').doc(item).onSnapshot(doc => {});\r\n                                case \"performance\":\r\n                                    //return db.collection('Performances').doc(item).onSnapshot(doc => {});\r\n                                default:\r\n                                    console.log(\"default\")\r\n                            }\r\n                        }); */}\r\n\r\n                    } else {\r\n                        db.collection('PersonalScheduler').doc(userID).update({\r\n                            registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                        });\r\n                        setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                    }\r\n                } else {\r\n                    db.collection('PersonalScheduler').doc(userID).update({\r\n                        registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                    });\r\n                    setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                }\r\n            });\r\n\r\n            if (alert.registerSuccess) {\r\n                // disable button\r\n            }\r\n\r\n        } catch (e) {\r\n            setAlert({ registerSuccess: false, registerFail: false, loading: false });\r\n            return console.log(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <IonAlert\r\n                isOpen={alert.registerSuccess}\r\n                onDidDismiss={() => setAlert({ registerSuccess: false, registerFail: false, loading: false })}\r\n                cssClass='alertBox'\r\n                mode='md'\r\n                header={'Successfully Registered'}\r\n                message={'You have successfully registered for the programme talk and it has been successfully added to My Schedule.'}\r\n                buttons={['Close']}\r\n            ></IonAlert>\r\n\r\n            <IonAlert\r\n                isOpen={alert.registerFail}\r\n                onDidDismiss={() => setAlert({ registerSuccess: false, registerFail: false, loading: false })}\r\n                cssClass='alertBox'\r\n                mode='md'\r\n                header={'Registration Unsuccessful'}\r\n                message={'There exists an open house programme in your scheduler at this timing. Please remove the existing programme from your scheduler first!'}\r\n                buttons={['Close']}\r\n            ></IonAlert>\r\n\r\n            <IonGrid className=\"progTalk-TableGrid\">\r\n                <IonRow className=\"ion-justify-content-center progTalk-TableHeader\">\r\n                    <IonCol size=\"3\" sizeSm=\"3\" className=\"progTalk-DataHeader ion-text-wrap\">Programme Talk</IonCol>\r\n                    <IonCol size=\"3\" sizeSm=\"3\" className=\"progTalk-DataHeader ion-text-wrap\">Awarding University</IonCol>\r\n                    <IonCol size=\"2\" sizeSm=\"2\" className=\"progTalk-DataHeader ion-text-wrap\">Time</IonCol>\r\n                    <IonCol size=\"2\" sizeSm=\"2\" className=\"progTalk-DataHeader ion-text-wrap\">Venue</IonCol>\r\n                    <IonCol size=\"2\" sizeSm=\"2\" className=\"progTalk-DataHeader ion-text-wrap\">Add to My Schedule</IonCol>\r\n                </IonRow>\r\n\r\n                {props.day1 === 'day1' ?\r\n                    programmeTalkDay1.map((programmeTalk: any) => {\r\n                        return (\r\n                            <IonRow className=\"ion-justify-content-center\" id=\"progTalk-DataRow\" key={programmeTalk.id}>\r\n                                <IonCol size=\"3\" sizeSm=\"3\" className=\"progTalk-DataInfo ion-text-wrap progName\">\r\n                                    <Link id=\"uniLink\" to={`/programmeTalks/progTalkInfo/${programmeTalk.id}`}>{programmeTalk.talkName}</Link>\r\n                                </IonCol>\r\n\r\n                                <IonCol size=\"3\" sizeSm=\"3\" className=\"progTalk-DataInfo ion-text-wrap\" id=\"awardingUni\">{programmeTalk.awardingUni} </IonCol>\r\n                                <IonCol size=\"2\" sizeSm=\"2\" className=\"progTalk-DataInfo ion-text-wrap\" id=\"talkTime\">{programmeTalk.startTime + \" to \" + programmeTalk.endTime}</IonCol>\r\n                                <IonCol size=\"2\" sizeSm=\"2\" className=\"progTalk-DataInfo ion-text-wrap\" id=\"talkVenue\">{programmeTalk.venue}</IonCol>\r\n                                <IonCol size=\"2\" sizeSm=\"2\" className=\"progTalk-DataInfo ion-text-wrap\" id=\"addCol\">\r\n                                    <IonButton className=\"progTalk-DataBtn\" id=\"addBtn\" size=\"small\" style={{ marginTop: \"-5%\", marginBottom: \"-5%\" }} onClick={() => addToSchedule(programmeTalk)}>\r\n                                        <FontAwesomeIcon icon={faPlus} size=\"lg\" />\r\n                                    </IonButton>\r\n                                </IonCol>\r\n                            </IonRow>\r\n                        )\r\n                    }) : ''\r\n                }\r\n\r\n                {props.day2 === 'day2' ?\r\n                    programmeTalkDay2.map((programmeTalk: any) => {\r\n                        return (\r\n                            <IonRow className=\"ion-justify-content-center\" id=\"progTalk-DataRow\" key={programmeTalk.id}>\r\n                                <IonCol sizeSm=\"3\" className=\"progTalk-DataInfo ion-text-wrap progName\">\r\n                                    <Link to={`/programmeTalks/progTalkInfo/${programmeTalk.id}`}  id=\"uniLink\">{programmeTalk.talkName}</Link>\r\n                                </IonCol>\r\n\r\n                                <IonCol size=\"3\" sizeSm=\"3\" className=\"progTalk-DataInfo ion-text-wrap\" id=\"awardingUni\">{programmeTalk.awardingUni}</IonCol>\r\n                                <IonCol size=\"2\" sizeSm=\"2\" className=\"progTalk-DataInfo ion-text-wrap\" id=\"talkTime\">{programmeTalk.startTime + \" to \" + programmeTalk.endTime}</IonCol>\r\n                                <IonCol size=\"2\" sizeSm=\"2\" className=\"progTalk-DataInfo ion-text-wrap\" id=\"talkVenue\">{programmeTalk.venue}</IonCol>\r\n                                <IonCol size=\"2\" sizeSm=\"2\" className=\"progTalk-DataInfo ion-text-wrap\" id=\"addCol\">\r\n                                    <IonButton className=\"progTalk-DataBtn\" id=\"addBtn\" size=\"small\" style={{ marginTop: \"-5%\", marginBottom: \"-5%\" }} onClick={() => addToSchedule(programmeTalk)}>\r\n                                        <FontAwesomeIcon icon={faPlus} size=\"lg\" />\r\n                                    </IonButton>\r\n                                </IonCol>\r\n                            </IonRow>)\r\n                    }) : ''\r\n                }\r\n            </IonGrid>\r\n            <IonLoading isOpen={alert.loading} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProgTalkSchedule;"]},"metadata":{},"sourceType":"module"}