{"ast":null,"code":"export function formatDate(isoDate){return new Date(isoDate).toLocaleDateString('en-UK',{day:'numeric',month:'short',year:'numeric'});}export function toDateObject(date,time){if(time===\"\")time=\"00:00AM\";var dateSplit=date.split(\"-\");var timeSplit=time.split(\":\");var monthString=dateSplit[1];if(monthString.length>3)monthString=monthString.slice(0,3);var monthsArray=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];var day=+dateSplit[0],month=+monthsArray.indexOf(dateSplit[1]),year=+dateSplit[2];var hours=+timeSplit[0];var minutes=+timeSplit[1].slice(0,2),meridiem=timeSplit[1].slice(-2,timeSplit[1].length);var seconds=0,milliseconds=0;if(hours==12&&meridiem.toUpperCase()==\"AM\")hours=0;if(hours>0&&hours<12&&meridiem.toUpperCase()===\"PM\")hours+=12;return new Date(year,month,day,hours,minutes,seconds,milliseconds);}export function camalize(str){return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g,function(m,chr){return chr.toUpperCase();});}","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/modules/convert.ts"],"names":["formatDate","isoDate","Date","toLocaleDateString","day","month","year","toDateObject","date","time","dateSplit","split","timeSplit","monthString","length","slice","monthsArray","indexOf","hours","minutes","meridiem","seconds","milliseconds","toUpperCase","camalize","str","toLowerCase","replace","m","chr"],"mappings":"AAAA,MAAO,SAASA,CAAAA,UAAT,CAAoBC,OAApB,CAAkC,CACrC,MAAO,IAAIC,CAAAA,IAAJ,CAASD,OAAT,EAAkBE,kBAAlB,CAAqC,OAArC,CAA8C,CACjDC,GAAG,CAAE,SAD4C,CACjCC,KAAK,CAAE,OAD0B,CACjBC,IAAI,CAAE,SADW,CAA9C,CAAP,CAGH,CAED,MAAO,SAASC,CAAAA,YAAT,CAAsBC,IAAtB,CAAoCC,IAApC,CAAkD,CACrD,GAAIA,IAAI,GAAK,EAAb,CAAiBA,IAAI,CAAG,SAAP,CAEjB,GAAMC,CAAAA,SAAS,CAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAlB,CACA,GAAMC,CAAAA,SAAS,CAAGH,IAAI,CAACE,KAAL,CAAW,GAAX,CAAlB,CAEA,GAAIE,CAAAA,WAAW,CAAGH,SAAS,CAAC,CAAD,CAA3B,CACA,GAAIG,WAAW,CAACC,MAAZ,CAAqB,CAAzB,CAA4BD,WAAW,CAAGA,WAAW,CAACE,KAAZ,CAAkB,CAAlB,CAAqB,CAArB,CAAd,CAE5B,GAAMC,CAAAA,WAAW,CAAG,CAAC,KAAD,CAAQ,KAAR,CAAe,KAAf,CAAsB,KAAtB,CAA6B,KAA7B,CAAoC,KAApC,CAA2C,KAA3C,CAAkD,KAAlD,CAAyD,KAAzD,CAAgE,KAAhE,CAAuE,KAAvE,CAA8E,KAA9E,CAApB,CAEA,GAAMZ,CAAAA,GAAG,CAAG,CAACM,SAAS,CAAC,CAAD,CAAtB,CAA2BL,KAAK,CAAG,CAACW,WAAW,CAACC,OAAZ,CAAoBP,SAAS,CAAC,CAAD,CAA7B,CAApC,CAAuEJ,IAAI,CAAG,CAACI,SAAS,CAAC,CAAD,CAAxF,CACA,GAAIQ,CAAAA,KAAK,CAAG,CAACN,SAAS,CAAC,CAAD,CAAtB,CACA,GAAMO,CAAAA,OAAO,CAAG,CAACP,SAAS,CAAC,CAAD,CAAT,CAAaG,KAAb,CAAmB,CAAnB,CAAsB,CAAtB,CAAjB,CAA2CK,QAAQ,CAAGR,SAAS,CAAC,CAAD,CAAT,CAAaG,KAAb,CAAmB,CAAC,CAApB,CAAuBH,SAAS,CAAC,CAAD,CAAT,CAAaE,MAApC,CAAtD,CACA,GAAMO,CAAAA,OAAO,CAAG,CAAhB,CAAmBC,YAAY,CAAG,CAAlC,CAGA,GAAIJ,KAAK,EAAI,EAAT,EAAeE,QAAQ,CAACG,WAAT,IAA0B,IAA7C,CAAmDL,KAAK,CAAG,CAAR,CACnD,GAAKA,KAAK,CAAG,CAAR,EAAaA,KAAK,CAAG,EAAtB,EAA6BE,QAAQ,CAACG,WAAT,KAA2B,IAA5D,CAAkEL,KAAK,EAAI,EAAT,CAElE,MAAO,IAAIhB,CAAAA,IAAJ,CAASI,IAAT,CAAeD,KAAf,CAAsBD,GAAtB,CAA2Bc,KAA3B,CAAkCC,OAAlC,CAA2CE,OAA3C,CAAoDC,YAApD,CAAP,CACH,CAED,MAAO,SAASE,CAAAA,QAAT,CAAkBC,GAAlB,CAA+B,CAClC,MAAOA,CAAAA,GAAG,CAACC,WAAJ,GAAkBC,OAAlB,CAA0B,mBAA1B,CAA+C,SAACC,CAAD,CAAYC,GAAZ,QAA4BA,CAAAA,GAAG,CAACN,WAAJ,EAA5B,EAA/C,CAAP,CACH","sourcesContent":["export function formatDate(isoDate: any) {\r\n    return new Date(isoDate).toLocaleDateString('en-UK', {\r\n        day: 'numeric', month: 'short', year: 'numeric'\r\n    });\r\n}\r\n\r\nexport function toDateObject(date: string, time: string) {\r\n    if (time === \"\") time = \"00:00AM\";\r\n\r\n    const dateSplit = date.split(\"-\");\r\n    const timeSplit = time.split(\":\");\r\n    \r\n    let monthString = dateSplit[1];\r\n    if (monthString.length > 3) monthString = monthString.slice(0, 3);\r\n\r\n    const monthsArray = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n\r\n    const day = +dateSplit[0], month = +monthsArray.indexOf(dateSplit[1]), year = +dateSplit[2];\r\n    let hours = +timeSplit[0];\r\n    const minutes = +timeSplit[1].slice(0, 2), meridiem = timeSplit[1].slice(-2, timeSplit[1].length);\r\n    const seconds = 0, milliseconds = 0;\r\n\r\n    \r\n    if (hours == 12 && meridiem.toUpperCase() == \"AM\") hours = 0;\r\n    if ((hours > 0 && hours < 12) && meridiem.toUpperCase() === \"PM\") hours += 12;\r\n\r\n    return new Date(year, month, day, hours, minutes, seconds, milliseconds);\r\n}\r\n\r\nexport function camalize(str: string) {\r\n    return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m: string, chr: string) => chr.toUpperCase());\r\n}"]},"metadata":{},"sourceType":"module"}