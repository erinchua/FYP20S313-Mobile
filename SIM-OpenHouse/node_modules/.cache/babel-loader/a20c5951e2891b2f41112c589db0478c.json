{"ast":null,"code":"import { Plugins } from '@capacitor/core';\nimport { toDateObject } from './convert';\nimport moment from 'moment';\nconst {\n  LocalNotifications\n} = Plugins;\nexport async function notification(date, time, description, type) {\n  const allowAnnouncement = window.sessionStorage.getItem('allowAnnouncementNotif');\n  const allowOpenhouse = window.sessionStorage.getItem('allowOpenhouseNotif');\n  const isAllowOpenhouse = allowOpenhouse == 'true';\n  const isAllowAnnouncement = allowAnnouncement == 'true';\n\n  try {\n    // Request/ check permissions\n    if (type === 'programme') {\n      if (!(await LocalNotifications.requestPermission()).granted || !isAllowOpenhouse) return;\n    }\n\n    if (type === 'announcement') {\n      console.log(\"In notification announcement\");\n\n      if (!(await LocalNotifications.requestPermission()).granted || !isAllowAnnouncement) {\n        console.log(\"Permission denied\");\n        return;\n      }\n    }\n\n    const subTime = toDateObject(date, time);\n    const sysTime = moment().toDate();\n\n    if (type === \"programme\") {\n      //schedule notification at 5 min before the actual start time\n      const scheduled = moment(subTime).subtract(60 * 4.7, 's').toDate();\n\n      if (scheduled > sysTime) {\n        await LocalNotifications.schedule({\n          notifications: [{\n            title: 'SIM Openhouse scheduled event is commencing soon',\n            body: description,\n            id: 1,\n            schedule: {\n              at: scheduled\n            }\n          }]\n        });\n      } else {\n        await LocalNotifications.schedule({\n          notifications: [{\n            title: 'SIM Openhouse scheduled event has commenced',\n            body: description,\n            id: 1,\n            schedule: {\n              at: new Date(Date.now() + 1000 * 5)\n            }\n          }]\n        });\n      }\n    }\n\n    if (type === \"announcement\") {\n      if (sysTime <= subTime) {\n        const scheduled = moment(subTime).toDate();\n        await LocalNotifications.schedule({\n          notifications: [{\n            title: 'New announcement from SIM Openhouse',\n            body: description,\n            id: 1,\n            schedule: {\n              at: scheduled\n            }\n          }]\n        });\n      }\n    }\n  } catch (error) {\n    return console.error(error);\n  }\n}","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/modules/Notifications.ts"],"names":["Plugins","toDateObject","moment","LocalNotifications","notification","date","time","description","type","allowAnnouncement","window","sessionStorage","getItem","allowOpenhouse","isAllowOpenhouse","isAllowAnnouncement","requestPermission","granted","console","log","subTime","sysTime","toDate","scheduled","subtract","schedule","notifications","title","body","id","at","Date","now","error"],"mappings":"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","sourcesContent":["import { Plugins } from '@capacitor/core';\r\nimport { toDateObject } from './convert';\r\nimport moment from 'moment';\r\n\r\nconst { LocalNotifications } = Plugins;\r\n\r\nexport async function notification(date: string, time: string, description: string, type: string) {\r\n\r\n    const allowAnnouncement = window.sessionStorage.getItem('allowAnnouncementNotif');\r\n    const allowOpenhouse = window.sessionStorage.getItem('allowOpenhouseNotif');\r\n    const isAllowOpenhouse: boolean = (allowOpenhouse == 'true');\r\n    const isAllowAnnouncement: boolean = (allowAnnouncement == 'true');\r\n\r\n    try {\r\n        // Request/ check permissions\r\n        if (type === 'programme') {\r\n            if (!(await LocalNotifications.requestPermission()).granted || !isAllowOpenhouse) return;\r\n        }\r\n\r\n        if (type === 'announcement') {\r\n            console.log(\"In notification announcement\")\r\n            if (!(await LocalNotifications.requestPermission()).granted || !isAllowAnnouncement) {\r\n                console.log(\"Permission denied\")\r\n                return;\r\n            }\r\n        }\r\n\r\n        const subTime = toDateObject(date, time);\r\n        const sysTime = moment().toDate();\r\n\r\n        if (type === \"programme\") {\r\n            //schedule notification at 5 min before the actual start time\r\n            const scheduled = moment(subTime).subtract(60 * 4.7, 's').toDate();\r\n\r\n            if (scheduled > sysTime) {\r\n                await LocalNotifications.schedule({\r\n                    notifications: [{\r\n                        title: 'SIM Openhouse scheduled event is commencing soon',\r\n                        body: description,\r\n                        id: 1,\r\n                        schedule: {\r\n                            at: scheduled\r\n                        }\r\n                    }]\r\n                });\r\n            } else {\r\n                await LocalNotifications.schedule({\r\n                    notifications: [{\r\n                        title: 'SIM Openhouse scheduled event has commenced',\r\n                        body: description,\r\n                        id: 1,\r\n                        schedule: {\r\n                            at: new Date(Date.now() + 1000 * 5)\r\n                        }\r\n                    }]\r\n                });\r\n            }\r\n        }\r\n\r\n        if (type === \"announcement\") {\r\n            if (sysTime <= subTime) {\r\n                const scheduled = moment(subTime).toDate();\r\n                await LocalNotifications.schedule({\r\n                    notifications: [{\r\n                        title: 'New announcement from SIM Openhouse',\r\n                        body: description,\r\n                        id: 1,\r\n                        schedule: {\r\n                            at: scheduled\r\n                        }\r\n                    }]\r\n                });\r\n            }\r\n        }\r\n\r\n    } catch (error) {\r\n        return console.error(error);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}