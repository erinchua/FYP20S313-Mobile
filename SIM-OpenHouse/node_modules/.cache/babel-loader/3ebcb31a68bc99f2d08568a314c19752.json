{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{Plugins}from'@capacitor/core';import{toDateObject}from'./convert';import moment from'moment';var LocalNotifications=Plugins.LocalNotifications;var notification=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(date,time,description,type){var allowAnnoucement,allowOpenhouse,isAllowOpenhouse,isAllowAnnouncement,pending,subTime,sysTime,scheduled;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:allowAnnoucement=window.sessionStorage.getItem('allowAnnoucementNotif');allowOpenhouse=window.sessionStorage.getItem('allowOpenhouseNotif');isAllowOpenhouse=allowOpenhouse=='true';isAllowAnnouncement=allowAnnoucement=='true';_context.prev=4;_context.next=7;return LocalNotifications.requestPermission();case 7:_context.t1=!_context.sent.granted;if(_context.t1){_context.next=10;break;}_context.t1=!isAllowOpenhouse;case 10:_context.t0=_context.t1;if(_context.t0){_context.next=13;break;}_context.t0=!isAllowAnnouncement;case 13:if(!_context.t0){_context.next=15;break;}return _context.abrupt(\"return\");case 15:_context.next=17;return LocalNotifications.getPending();case 17:pending=_context.sent;if(!(pending.notifications.length>0)){_context.next=21;break;}_context.next=21;return LocalNotifications.cancel(pending);case 21:subTime=toDateObject(date,time);sysTime=moment().toDate();if(!(type===\"programme\")){_context.next=32;break;}//schedule notification at 5 min before the actual start time\nscheduled=moment(subTime).subtract(60*4.7,'s').toDate();if(!(scheduled>sysTime)){_context.next=30;break;}_context.next=28;return LocalNotifications.schedule({notifications:[{title:'SIM Openhouse scheduled event is commencing soon',body:description,id:1,schedule:{at:scheduled}}]});case 28:_context.next=32;break;case 30:_context.next=32;return LocalNotifications.schedule({notifications:[{title:'SIM Openhouse scheduled event has commenced',body:description,id:1,schedule:{at:new Date(Date.now()+1000*5)}}]});case 32:if(!(type===\"announcement\")){_context.next=36;break;}if(!(sysTime>=subTime)){_context.next=36;break;}_context.next=36;return LocalNotifications.schedule({notifications:[{title:'New announcement from SIM Openhouse',body:description,id:1,schedule:{at:new Date(Date.now()+1000*5)}}]});case 36:_context.next=41;break;case 38:_context.prev=38;_context.t2=_context[\"catch\"](4);return _context.abrupt(\"return\",console.error(_context.t2));case 41:case\"end\":return _context.stop();}}},_callee,null,[[4,38]]);}));return function notification(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();export default notification;","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/modules/Notifications.ts"],"names":["Plugins","toDateObject","moment","LocalNotifications","notification","date","time","description","type","allowAnnoucement","window","sessionStorage","getItem","allowOpenhouse","isAllowOpenhouse","isAllowAnnouncement","requestPermission","granted","getPending","pending","notifications","length","cancel","subTime","sysTime","toDate","scheduled","subtract","schedule","title","body","id","at","Date","now","console","error"],"mappings":"uZAAA,OAASA,OAAT,KAAwB,iBAAxB,CACA,OAASC,YAAT,KAA6B,WAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB,C,GAEQC,CAAAA,kB,CAAuBH,O,CAAvBG,kB,CAER,GAAMC,CAAAA,YAAY,0FAAG,iBAAOC,IAAP,CAAqBC,IAArB,CAAmCC,WAAnC,CAAwDC,IAAxD,6NAEXC,gBAFW,CAEQC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,uBAA9B,CAFR,CAGXC,cAHW,CAGMH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,qBAA9B,CAHN,CAIXE,gBAJW,CAIkBD,cAAc,EAAI,MAJpC,CAKXE,mBALW,CAKqBN,gBAAgB,EAAI,MALzC,uCASDN,CAAAA,kBAAkB,CAACa,iBAAnB,EATC,mCASuCC,OATvC,qDASkD,CAACH,gBATnD,qFASuE,CAACC,mBATxE,kHAYSZ,CAAAA,kBAAkB,CAACe,UAAnB,EAZT,SAYPC,OAZO,oBAaTA,OAAO,CAACC,aAAR,CAAsBC,MAAtB,CAA+B,CAbtB,kDAcHlB,CAAAA,kBAAkB,CAACmB,MAAnB,CAA0BH,OAA1B,CAdG,SAgBPI,OAhBO,CAgBGtB,YAAY,CAACI,IAAD,CAAOC,IAAP,CAhBf,CAiBPkB,OAjBO,CAiBGtB,MAAM,GAAGuB,MAAT,EAjBH,MAmBTjB,IAAI,GAAK,WAnBA,2BAoBT;AACMkB,SArBG,CAqBSxB,MAAM,CAACqB,OAAD,CAAN,CAAgBI,QAAhB,CAAyB,GAAK,GAA9B,CAAmC,GAAnC,EAAwCF,MAAxC,EArBT,MAuBLC,SAAS,CAAGF,OAvBP,kDAwBCrB,CAAAA,kBAAkB,CAACyB,QAAnB,CAA4B,CAC9BR,aAAa,CAAE,CAAC,CACZS,KAAK,CAAE,kDADK,CAEZC,IAAI,CAAEvB,WAFM,CAGZwB,EAAE,CAAE,CAHQ,CAIZH,QAAQ,CAAE,CACNI,EAAE,CAAEN,SADE,CAJE,CAAD,CADe,CAA5B,CAxBD,+DAmCCvB,CAAAA,kBAAkB,CAACyB,QAAnB,CAA4B,CAC9BR,aAAa,CAAE,CAAC,CACZS,KAAK,CAAE,6CADK,CAEZC,IAAI,CAAEvB,WAFM,CAGZwB,EAAE,CAAE,CAHQ,CAIZH,QAAQ,CAAE,CACNI,EAAE,CAAE,GAAIC,CAAAA,IAAJ,CAASA,IAAI,CAACC,GAAL,GAAa,KAAO,CAA7B,CADE,CAJE,CAAD,CADe,CAA5B,CAnCD,cAgDT1B,IAAI,GAAK,cAhDA,gCAiDLgB,OAAO,EAAID,OAjDN,kDAkDCpB,CAAAA,kBAAkB,CAACyB,QAAnB,CAA4B,CAC9BR,aAAa,CAAE,CAAC,CACZS,KAAK,CAAE,qCADK,CAEZC,IAAI,CAAEvB,WAFM,CAGZwB,EAAE,CAAE,CAHQ,CAIZH,QAAQ,CAAE,CACNI,EAAE,CAAE,GAAIC,CAAAA,IAAJ,CAASA,IAAI,CAACC,GAAL,GAAa,KAAO,CAA7B,CADE,CAJE,CAAD,CADe,CAA5B,CAlDD,0HAgENC,OAAO,CAACC,KAAR,aAhEM,uEAAH,kBAAZhC,CAAAA,YAAY,wDAAlB,CAoEA,cAAeA,CAAAA,YAAf","sourcesContent":["import { Plugins } from '@capacitor/core';\r\nimport { toDateObject } from './convert';\r\nimport moment from 'moment';\r\n\r\nconst { LocalNotifications } = Plugins;\r\n\r\nconst notification = async (date: string, time: string, description: string, type: string) => {\r\n\r\n    const allowAnnoucement = window.sessionStorage.getItem('allowAnnoucementNotif');\r\n    const allowOpenhouse = window.sessionStorage.getItem('allowOpenhouseNotif');\r\n    const isAllowOpenhouse: boolean = (allowOpenhouse == 'true');\r\n    const isAllowAnnouncement: boolean = (allowAnnoucement == 'true');\r\n\r\n    try {\r\n        // Request/ check permissions\r\n        if (!(await LocalNotifications.requestPermission()).granted || !isAllowOpenhouse || !isAllowAnnouncement) return;\r\n\r\n        // Clear old notifications in prep for refresh (OPTIONAL)\r\n        const pending = await LocalNotifications.getPending();\r\n        if (pending.notifications.length > 0)\r\n            await LocalNotifications.cancel(pending);\r\n\r\n        const subTime = toDateObject(date, time);\r\n        const sysTime = moment().toDate();\r\n\r\n        if (type === \"programme\") {\r\n            //schedule notification at 5 min before the actual start time\r\n            const scheduled = moment(subTime).subtract(60 * 4.7, 's').toDate();\r\n            \r\n            if (scheduled > sysTime) {\r\n                await LocalNotifications.schedule({\r\n                    notifications: [{\r\n                        title: 'SIM Openhouse scheduled event is commencing soon',\r\n                        body: description,\r\n                        id: 1,\r\n                        schedule: {\r\n                            at: scheduled\r\n                        }\r\n                    }]\r\n                });\r\n            } else {\r\n                await LocalNotifications.schedule({\r\n                    notifications: [{\r\n                        title: 'SIM Openhouse scheduled event has commenced',\r\n                        body: description,\r\n                        id: 1,\r\n                        schedule: {\r\n                            at: new Date(Date.now() + 1000 * 5)\r\n                        }\r\n                    }]\r\n                });\r\n            }\r\n        }\r\n\r\n        if (type === \"announcement\") {\r\n            if (sysTime >= subTime) {\r\n                await LocalNotifications.schedule({\r\n                    notifications: [{\r\n                        title: 'New announcement from SIM Openhouse',\r\n                        body: description,\r\n                        id: 1,\r\n                        schedule: {\r\n                            at: new Date(Date.now() + 1000 * 5)\r\n                        }\r\n                    }]\r\n                });\r\n            }\r\n        }\r\n\r\n    } catch (error) {\r\n        return console.error(error);\r\n    }\r\n}\r\n\r\nexport default notification;"]},"metadata":{},"sourceType":"module"}