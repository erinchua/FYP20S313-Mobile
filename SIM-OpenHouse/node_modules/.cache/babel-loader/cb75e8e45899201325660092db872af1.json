{"ast":null,"code":"var _jsxFileName = \"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\src\\\\components\\\\ChangePasswordModal.tsx\";\nimport { IonButton, IonCol, IonContent, IonGrid, IonInput, IonItem, IonModal, IonRow } from '@ionic/react';\nimport React, { useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport '../css/Global.css';\nimport '../css/MyProfile.css';\n\nconst ChangePasswordModal = props => {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    getValues,\n    reset,\n    watch\n  } = useForm();\n  const currentPasswordRef = useRef({});\n  const newPasswordRef = useRef({});\n  currentPasswordRef.current = watch(\"currentPassword\", \"\");\n  newPasswordRef.current = watch(\"newPassword\", \"\");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IonModal, {\n    isOpen: props.isOpen,\n    cssClass: \"editPasswordModal\",\n    onDidDismiss: props.onDidDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonContent, {\n    fullscreen: true,\n    className: \"editPasswordModalContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IonGrid, {\n    id: \"editPasswordModalGrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: props.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonRow, {\n    className: \"editPasswordModalRow\",\n    class: \"ion-align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"12\",\n    sizeSm: \"12\",\n    className: \"editPasswordModalCol\",\n    class: \"ion-text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonItem, {\n    className: \"editPasswordModalItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(IonInput, {\n    type: \"password\",\n    className: \"passwordInput\",\n    name: props.currentPasswordName,\n    placeholder: \"Current Password\",\n    ref: register({\n      required: true,\n      minLength: 8,\n      pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[.,/<>#^~`@$!%*?&])[A-Za-z\\d.,/<>#~`^@$!%*?&]{8,}$/\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 41\n    }\n  })), errors.currentPassword && errors.currentPassword.type === \"required\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 110\n    }\n  }, \"Current Password is required!\"), errors.currentPassword && errors.currentPassword.type === \"minLength\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 111\n    }\n  }, \"Password has to be at least 8 characters and must contain 1 uppercase, 1 lowercase, 1 number and 1 special character\"), errors.currentPassword && errors.currentPassword.type === \"pattern\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 109\n    }\n  }, \"Password has to be at least 8 characters and must contain 1 uppercase, 1 lowercase, 1 number and 1 special character\"))), /*#__PURE__*/React.createElement(IonRow, {\n    className: \"editPasswordModalRow\",\n    class: \"ion-align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"12\",\n    sizeSm: \"12\",\n    className: \"editPasswordModalCol\",\n    class: \"ion-text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonItem, {\n    className: \"editPasswordModalItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(IonInput, {\n    type: \"password\",\n    className: \"passwordInput\",\n    name: props.newPasswordName,\n    placeholder: \"New Password\",\n    ref: register({\n      required: true,\n      minLength: 8,\n      pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[.,/<>#^~`@$!%*?&])[A-Za-z\\d.,/<>#~`^@$!%*?&]{8,}$/,\n      validate: newPassword => newPassword !== currentPasswordRef.current\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 41\n    }\n  })), errors.newPassword && errors.newPassword.type === \"required\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 102\n    }\n  }, \"New Password is required!\"), errors.newPassword && errors.newPassword.type === \"minLength\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 103\n    }\n  }, \"New Password has to be at least 8 characters and must contain 1 uppercase, 1 lowercase, 1 number and 1 special character\"), errors.newPassword && errors.newPassword.type === \"pattern\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 101\n    }\n  }, \"New Password has to be at least 8 characters and must contain 1 uppercase, 1 lowercase, 1 number and 1 special character\"), errors.newPassword && errors.newPassword.type === \"validate\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 102\n    }\n  }, \"New Password cannot be the same as Current Password!\"))), /*#__PURE__*/React.createElement(IonRow, {\n    className: \"editPasswordModalRow\",\n    class: \"ion-align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"12\",\n    sizeSm: \"12\",\n    className: \"editPasswordModalCol\",\n    class: \"ion-text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonItem, {\n    className: \"editPasswordModalItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(IonInput, {\n    type: \"password\",\n    className: \"passwordInput\",\n    name: props.confirmNewPasswordName,\n    placeholder: \"Confirm New Password\",\n    ref: register({\n      required: true,\n      minLength: 8,\n      pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[.,/<>#^~`@$!%*?&])[A-Za-z\\d.,/<>#~`^@$!%*?&]{8,}$/,\n      validate: confirmNewPassword => confirmNewPassword === newPasswordRef.current\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 41\n    }\n  })), errors.confirmNewPassword && errors.confirmNewPassword.type === \"required\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 116\n    }\n  }, \"Confirm New Password is required!\"), errors.confirmNewPassword && errors.confirmNewPassword.type === \"minLength\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 117\n    }\n  }, \"Passwords do not match!\"), errors.confirmNewPassword && errors.confirmNewPassword.type === \"pattern\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 115\n    }\n  }, \"Passwords do not match!\"), errors.confirmNewPassword && errors.confirmNewPassword.type === \"validate\" && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 116\n    }\n  }, \"Passwords do not match!\"))), /*#__PURE__*/React.createElement(IonRow, {\n    class: \"ion-align-items-center\",\n    style: {\n      marginTop: \"5%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"4\",\n    sizeSm: \"4\",\n    class: \"ion-text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    className: \"editPasswordBtn\",\n    onClick: props.onClickCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 37\n    }\n  }, \"CANCEL\")), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"8\",\n    sizeSm: \"8\",\n    class: \"ion-text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    className: \"editPasswordBtn\",\n    type: \"submit\",\n    onClick: props.onClickSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 37\n    }\n  }, \"CHANGE PASSWORD\"))))))));\n};\n\nexport default ChangePasswordModal;","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/components/ChangePasswordModal.tsx"],"names":["IonButton","IonCol","IonContent","IonGrid","IonInput","IonItem","IonModal","IonRow","React","useRef","useForm","ChangePasswordModal","props","register","handleSubmit","errors","getValues","reset","watch","currentPasswordRef","newPasswordRef","current","isOpen","onDidDismiss","currentPasswordName","required","minLength","pattern","currentPassword","type","newPasswordName","validate","newPassword","confirmNewPasswordName","confirmNewPassword","marginTop","onClickCancel","onClickSubmit"],"mappings":"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","sourcesContent":["import { IonAlert, IonButton, IonButtons, IonCol, IonContent, IonGrid, IonHeader, IonInput, IonItem, IonModal, IonPage, IonRouterLink, IonRow, IonSelect, IonSelectOption, IonTitle } from '@ionic/react';\r\nimport React, { useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport '../css/Global.css';\r\nimport '../css/MyProfile.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAddressCard, faEnvelope, faMobileAlt, faBirthdayCake, faUserGraduate, faGlobe, faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport { faEdit } from '@fortawesome/free-regular-svg-icons';\r\n\r\n\r\nconst ChangePasswordModal: React.FC<{\r\n    isOpen: any; \r\n    handleSubmit: any;\r\n    onClickCancel: any;\r\n    onClickSubmit: any;\r\n    onDidDismiss: any;\r\n    currentPasswordName: any;\r\n    newPasswordName: any;\r\n    confirmNewPasswordName: any;\r\n}> = props => {\r\n\r\n    const { register, handleSubmit, errors, getValues, reset, watch } = useForm();\r\n\r\n    const currentPasswordRef = useRef({});\r\n    const newPasswordRef = useRef({});\r\n    currentPasswordRef.current = watch(\"currentPassword\", \"\");\r\n    newPasswordRef.current = watch(\"newPassword\", \"\");\r\n\r\n    return (\r\n        <>\r\n            <IonModal isOpen={props.isOpen} cssClass='editPasswordModal' onDidDismiss={props.onDidDismiss}>\r\n                <IonContent fullscreen className=\"editPasswordModalContent\">\r\n                    <IonGrid id=\"editPasswordModalGrid\">\r\n                        <form onSubmit={props.handleSubmit}>\r\n                            {/* Current Password */}\r\n                            <IonRow className=\"editPasswordModalRow\" class=\"ion-align-items-center\">\r\n                                <IonCol size=\"12\" sizeSm=\"12\" className=\"editPasswordModalCol\" class=\"ion-text-left\">\r\n                                    <IonItem className=\"editPasswordModalItem\">\r\n                                        <IonInput type=\"password\" className=\"passwordInput\" name={props.currentPasswordName} placeholder=\"Current Password\" ref={register({ required: true, minLength: 8, pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[.,/<>#^~`@$!%*?&])[A-Za-z\\d.,/<>#~`^@$!%*?&]{8,}$/ })} />\r\n                                    </IonItem>\r\n                                    {errors.currentPassword && errors.currentPassword.type === \"required\" && <p className=\"errorMsg\">Current Password is required!</p>}\r\n                                    {errors.currentPassword && errors.currentPassword.type === \"minLength\" && <p className=\"errorMsg\">Password has to be at least 8 characters and must contain 1 uppercase, 1 lowercase, 1 number and 1 special character</p>}\r\n                                    {errors.currentPassword && errors.currentPassword.type === \"pattern\" && <p className=\"errorMsg\">Password has to be at least 8 characters and must contain 1 uppercase, 1 lowercase, 1 number and 1 special character</p>}\r\n                                </IonCol>\r\n                            </IonRow>\r\n\r\n                            {/* New Password */}\r\n                            <IonRow className=\"editPasswordModalRow\" class=\"ion-align-items-center\">\r\n                                <IonCol size=\"12\" sizeSm=\"12\" className=\"editPasswordModalCol\" class=\"ion-text-left\">\r\n                                    <IonItem className=\"editPasswordModalItem\">\r\n                                        <IonInput type=\"password\" className=\"passwordInput\" name={props.newPasswordName} placeholder=\"New Password\" ref={register({ required: true, minLength: 8, pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[.,/<>#^~`@$!%*?&])[A-Za-z\\d.,/<>#~`^@$!%*?&]{8,}$/, validate: (newPassword) => newPassword !== currentPasswordRef.current })} />\r\n                                    </IonItem>\r\n                                    {errors.newPassword && errors.newPassword.type === \"required\" && <p className=\"errorMsg\">New Password is required!</p>}\r\n                                    {errors.newPassword && errors.newPassword.type === \"minLength\" && <p className=\"errorMsg\">New Password has to be at least 8 characters and must contain 1 uppercase, 1 lowercase, 1 number and 1 special character</p>}\r\n                                    {errors.newPassword && errors.newPassword.type === \"pattern\" && <p className=\"errorMsg\">New Password has to be at least 8 characters and must contain 1 uppercase, 1 lowercase, 1 number and 1 special character</p>}\r\n                                    {errors.newPassword && errors.newPassword.type === \"validate\" && <p className=\"errorMsg\">New Password cannot be the same as Current Password!</p>}\r\n                                </IonCol>\r\n                            </IonRow>\r\n\r\n                            {/* Confirm New Password */}\r\n                            <IonRow className=\"editPasswordModalRow\" class=\"ion-align-items-center\">\r\n                                <IonCol size=\"12\" sizeSm=\"12\" className=\"editPasswordModalCol\" class=\"ion-text-left\">\r\n                                    <IonItem className=\"editPasswordModalItem\">\r\n                                        <IonInput type=\"password\" className=\"passwordInput\" name={props.confirmNewPasswordName} placeholder=\"Confirm New Password\" ref={register({ required: true, minLength: 8, pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[.,/<>#^~`@$!%*?&])[A-Za-z\\d.,/<>#~`^@$!%*?&]{8,}$/, validate: (confirmNewPassword) => confirmNewPassword === newPasswordRef.current })} />\r\n                                    </IonItem>\r\n                                    {errors.confirmNewPassword && errors.confirmNewPassword.type === \"required\" && <p className=\"errorMsg\">Confirm New Password is required!</p>}\r\n                                    {errors.confirmNewPassword && errors.confirmNewPassword.type === \"minLength\" && <p className=\"errorMsg\">Passwords do not match!</p>}\r\n                                    {errors.confirmNewPassword && errors.confirmNewPassword.type === \"pattern\" && <p className=\"errorMsg\">Passwords do not match!</p>}\r\n                                    {errors.confirmNewPassword && errors.confirmNewPassword.type === \"validate\" && <p className=\"errorMsg\">Passwords do not match!</p>}\r\n                                </IonCol>\r\n                            </IonRow>\r\n\r\n                            <IonRow class=\"ion-align-items-center\" style={{marginTop:\"5%\"}}>\r\n                                <IonCol size=\"4\" sizeSm=\"4\" class=\"ion-text-right\">\r\n                                    <IonButton className=\"editPasswordBtn\" onClick={props.onClickCancel}>CANCEL</IonButton>\r\n                                </IonCol>\r\n\r\n                                <IonCol size=\"8\" sizeSm=\"8\" class=\"ion-text-center\">\r\n                                    <IonButton className=\"editPasswordBtn\" type=\"submit\" onClick={props.onClickSubmit}>CHANGE PASSWORD</IonButton>\r\n                                </IonCol>\r\n                            </IonRow>\r\n\r\n                        </form>\r\n                    </IonGrid>\r\n\r\n                </IonContent>\r\n            </IonModal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChangePasswordModal;"]},"metadata":{},"sourceType":"module"}