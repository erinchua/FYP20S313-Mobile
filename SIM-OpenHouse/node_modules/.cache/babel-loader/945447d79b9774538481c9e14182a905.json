{"ast":null,"code":"var _jsxFileName = \"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\src\\\\components\\\\OpenHouseProgrammes\\\\PerformancesContent.tsx\";\nimport { IonGrid, IonRow, IonCol, IonButton, IonAlert, IonLoading } from '@ionic/react';\nimport React, { useState } from 'react';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport firebase from 'firebase';\nimport '../../css/Global.css';\nimport '../../css/OpenHouseActivities.css';\nimport { db } from '../../firebase';\nimport { useAuth } from '../../auth';\nimport { toDateObject } from '../../convert';\n\nconst PerformancesContent = props => {\n  const {\n    userID\n  } = useAuth();\n  const [alert, setAlert] = useState({\n    registerSuccess: false,\n    registerFail: false,\n    loading: false\n  });\n  const performanceDay1 = props.performances.filter(performance => {\n    return performance.date == props.openhouseDates[0];\n  });\n  const performanceDay2 = props.performances.filter(performance => {\n    return performance.date == props.openhouseDates[1];\n  });\n\n  const addToSchedule = async programme => {\n    try {\n      setAlert({\n        registerSuccess: false,\n        registerFail: false,\n        loading: true\n      });\n      await db.collection('PersonalScheduler').doc(userID).get().then(snapshot => {\n        const registered = snapshot.data().registeredProgrammes;\n\n        if (registered != null) {\n          if (registered.length > 0) {\n            for (let item of registered) {\n              const itemType = item.split(\"-\");\n\n              switch (itemType[0]) {\n                case \"talk\":\n                  return db.collection('ProgrammeTalks').doc(item).onSnapshot(doc => {\n                    if (programme.date == doc.data().date) {\n                      const progStart = toDateObject(programme.date, programme.startTime),\n                            progEnd = toDateObject(programme.date, programme.endTime);\n                      const itemStart = toDateObject(doc.data().date, doc.data().startTime),\n                            itemEnd = toDateObject(doc.data().date, doc.data().endTime);\n\n                      if (progStart >= itemStart && progStart < itemEnd || progEnd > itemStart && progEnd <= itemEnd) {\n                        setAlert({\n                          registerSuccess: false,\n                          registerFail: true,\n                          loading: false\n                        });\n                      } else {\n                        db.collection('PersonalScheduler').doc(userID).update({\n                          registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                        });\n                        setAlert({\n                          registerSuccess: true,\n                          registerFail: false,\n                          loading: false\n                        });\n                      }\n                    } else {\n                      db.collection('PersonalScheduler').doc(userID).update({\n                        registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                      });\n                      setAlert({\n                        registerSuccess: true,\n                        registerFail: false,\n                        loading: false\n                      });\n                    }\n                  });\n\n                case \"tour\":\n                  return db.collection('GuidedTours').doc(item).onSnapshot(doc => {\n                    if (programme.date == doc.data().date) {\n                      const progStart = toDateObject(programme.date, programme.startTime),\n                            progEnd = toDateObject(programme.date, programme.endTime);\n                      const itemStart = toDateObject(doc.data().date, doc.data().startTime),\n                            itemEnd = toDateObject(doc.data().date, doc.data().endTime);\n\n                      if (progStart >= itemStart && progStart < itemEnd || progEnd > itemStart && progEnd <= itemEnd) {\n                        setAlert({\n                          registerSuccess: false,\n                          registerFail: true,\n                          loading: false\n                        });\n                      } else {\n                        db.collection('PersonalScheduler').doc(userID).update({\n                          registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                        });\n                        setAlert({\n                          registerSuccess: true,\n                          registerFail: false,\n                          loading: false\n                        });\n                      }\n                    } else {\n                      db.collection('PersonalScheduler').doc(userID).update({\n                        registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                      });\n                      setAlert({\n                        registerSuccess: true,\n                        registerFail: false,\n                        loading: false\n                      });\n                    }\n                  });\n\n                case \"performance\":\n                  return db.collection('Performances').doc(item).onSnapshot(doc => {\n                    if (programme.date == doc.data().date) {\n                      const progStart = toDateObject(programme.date, programme.startTime),\n                            progEnd = toDateObject(programme.date, programme.endTime);\n                      const itemStart = toDateObject(doc.data().date, doc.data().startTime),\n                            itemEnd = toDateObject(doc.data().date, doc.data().endTime);\n\n                      if (progStart >= itemStart && progStart < itemEnd || progEnd > itemStart && progEnd <= itemEnd) {\n                        setAlert({\n                          registerSuccess: false,\n                          registerFail: true,\n                          loading: false\n                        });\n                      } else {\n                        db.collection('PersonalScheduler').doc(userID).update({\n                          registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                        });\n                        setAlert({\n                          registerSuccess: true,\n                          registerFail: false,\n                          loading: false\n                        });\n                      }\n                    } else {\n                      db.collection('PersonalScheduler').doc(userID).update({\n                        registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n                      });\n                      setAlert({\n                        registerSuccess: true,\n                        registerFail: false,\n                        loading: false\n                      });\n                    }\n                  });\n\n                default:\n                  setAlert({\n                    registerSuccess: true,\n                    registerFail: false,\n                    loading: false\n                  });\n              }\n\n              if (!alert.registerSuccess) {\n                break;\n              }\n            }\n          } else {\n            db.collection('PersonalScheduler').doc(userID).update({\n              registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n            });\n            setAlert({\n              registerSuccess: true,\n              registerFail: false,\n              loading: false\n            });\n          }\n        } else {\n          db.collection('PersonalScheduler').doc(userID).update({\n            registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\n          });\n          setAlert({\n            registerSuccess: true,\n            registerFail: false,\n            loading: false\n          });\n        }\n      });\n\n      if (alert.registerSuccess) {// disable button\n      }\n    } catch (e) {\n      setAlert({\n        registerSuccess: false,\n        registerFail: false,\n        loading: false\n      });\n      return console.log(e);\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: alert.registerSuccess,\n    onDidDismiss: () => setAlert({\n      registerSuccess: false,\n      registerFail: false,\n      loading: false\n    }),\n    cssClass: \"alertBox\",\n    mode: \"md\",\n    header: 'Successfully Added',\n    message: 'You have successfully added this performance to My Schedule.',\n    buttons: ['Close'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: alert.registerFail,\n    onDidDismiss: () => setAlert({\n      registerSuccess: false,\n      registerFail: false,\n      loading: false\n    }),\n    cssClass: \"alertBox\",\n    mode: \"md\",\n    header: 'Error Occurred',\n    message: 'There exists a performance in your scheduler at this timing. Please remove the existing performance from your scheduler first!',\n    buttons: ['Close'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonGrid, {\n    id: \"performancesContent-tableGrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonRow, {\n    id: \"performancesContent-tableHeader\",\n    className: \"ion-justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    className: \"performancesContent-Header ion-text-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }, \"Performance\"), /*#__PURE__*/React.createElement(IonCol, {\n    className: \"performancesContent-Header ion-text-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 21\n    }\n  }, \"Time\"), /*#__PURE__*/React.createElement(IonCol, {\n    className: \"performancesContent-Header ion-text-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, \"Venue\"), /*#__PURE__*/React.createElement(IonCol, {\n    className: \"performancesContent-Header ion-text-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }\n  }, \"Add to My Schedule\")), props.day1 === 'day1' ? performanceDay1.map(performance => {\n    return /*#__PURE__*/React.createElement(IonRow, {\n      className: \"ion-justify-content-center\",\n      key: performance.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(IonCol, {\n      className: \"performancesContent-Data ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 33\n      }\n    }, performance.performanceName), /*#__PURE__*/React.createElement(IonCol, {\n      className: \"performancesContent-Data ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 33\n      }\n    }, performance.startTime + \" to \" + performance.endTime), /*#__PURE__*/React.createElement(IonCol, {\n      className: \"performancesContent-Data ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 33\n      }\n    }, performance.venue), /*#__PURE__*/React.createElement(IonCol, {\n      className: \"performancesContent-Data ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(IonButton, {\n      className: \"performancesContent-DataBtn\",\n      size: \"small\",\n      style: {\n        marginTop: \"-5%\",\n        marginBottom: \"-5%\"\n      },\n      onClick: () => addToSchedule(performance),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 41\n      }\n    }))));\n  }) : '', props.day2 === 'day2' ? performanceDay2.map(performance => {\n    return /*#__PURE__*/React.createElement(IonRow, {\n      className: \"ion-justify-content-center\",\n      key: performance.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(IonCol, {\n      className: \"performancesContent-Data ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 33\n      }\n    }, performance.performanceName), /*#__PURE__*/React.createElement(IonCol, {\n      className: \"performancesContent-Data ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 33\n      }\n    }, performance.startTime + \" to \" + performance.endTime), /*#__PURE__*/React.createElement(IonCol, {\n      className: \"performancesContent-Data ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 33\n      }\n    }, performance.venue), /*#__PURE__*/React.createElement(IonCol, {\n      className: \"performancesContent-Data ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(IonButton, {\n      className: \"performancesContent-DataBtn\",\n      size: \"small\",\n      style: {\n        marginTop: \"-5%\",\n        marginBottom: \"-5%\"\n      },\n      onClick: () => addToSchedule(performance),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 41\n      }\n    }))));\n  }) : ''), /*#__PURE__*/React.createElement(IonLoading, {\n    isOpen: alert.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default PerformancesContent;","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/components/OpenHouseProgrammes/PerformancesContent.tsx"],"names":["IonGrid","IonRow","IonCol","IonButton","IonAlert","IonLoading","React","useState","faPlus","FontAwesomeIcon","firebase","db","useAuth","toDateObject","PerformancesContent","props","userID","alert","setAlert","registerSuccess","registerFail","loading","performanceDay1","performances","filter","performance","date","openhouseDates","performanceDay2","addToSchedule","programme","collection","doc","get","then","snapshot","registered","data","registeredProgrammes","length","item","itemType","split","onSnapshot","progStart","startTime","progEnd","endTime","itemStart","itemEnd","update","firestore","FieldValue","arrayUnion","id","e","console","log","day1","map","performanceName","venue","marginTop","marginBottom","day2"],"mappings":"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","sourcesContent":["import { IonGrid, IonRow, IonCol, IonButton, IonAlert, IonLoading } from '@ionic/react';\r\nimport React, { useState } from 'react';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport firebase from 'firebase';\r\n\r\nimport '../../css/Global.css';\r\nimport '../../css/OpenHouseActivities.css'\r\nimport { db } from '../../firebase';\r\nimport { useAuth } from '../../auth';\r\nimport { toDateObject } from '../../convert';\r\n\r\nconst PerformancesContent: React.FC<{ day1: any; day2: any; performances: any; openhouseDates: any }> = props => {\r\n    const { userID } = useAuth();\r\n    const [alert, setAlert] = useState({ registerSuccess: false, registerFail: false, loading: false });\r\n\r\n    const performanceDay1 = props.performances.filter((performance: any) => {\r\n        return performance.date == props.openhouseDates[0]\r\n    })\r\n    const performanceDay2 = props.performances.filter((performance: any) => {\r\n        return performance.date == props.openhouseDates[1]\r\n    })\r\n\r\n    const addToSchedule = async (programme: any) => {\r\n        try {\r\n            setAlert({ registerSuccess: false, registerFail: false, loading: true });\r\n\r\n            await db.collection('PersonalScheduler').doc(userID).get().then((snapshot: any) => {\r\n                const registered = snapshot.data().registeredProgrammes;\r\n                \r\n                if (registered != null) {\r\n                    if (registered.length > 0) {\r\n                        \r\n                        for (let item of registered) {\r\n                            const itemType = item.split(\"-\");\r\n            \r\n                            switch (itemType[0]) {\r\n                                case \"talk\":\r\n                                    return db.collection('ProgrammeTalks').doc(item).onSnapshot((doc: any) => {\r\n\r\n                                        if (programme.date == doc.data().date) {\r\n\r\n                                            const progStart = toDateObject(programme.date, programme.startTime), progEnd = toDateObject(programme.date, programme.endTime);\r\n                                            const itemStart = toDateObject(doc.data().date, doc.data().startTime), itemEnd = toDateObject(doc.data().date, doc.data().endTime);\r\n            \r\n                                            if ((progStart >= itemStart && progStart < itemEnd) || (progEnd > itemStart && progEnd <= itemEnd)) {\r\n                                                setAlert({ registerSuccess: false, registerFail: true, loading: false });\r\n                                            } else {\r\n                                                db.collection('PersonalScheduler').doc(userID).update({\r\n                                                    registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                                });\r\n                                                setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                            }\r\n\r\n                                        } else {\r\n                                            db.collection('PersonalScheduler').doc(userID).update({\r\n                                                registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                            });\r\n                                            setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                        }\r\n                                    });\r\n\r\n                                case \"tour\":\r\n                                    return db.collection('GuidedTours').doc(item).onSnapshot((doc: any) => {\r\n\r\n                                        if (programme.date == doc.data().date) {\r\n\r\n                                            const progStart = toDateObject(programme.date, programme.startTime), progEnd = toDateObject(programme.date, programme.endTime);\r\n                                            const itemStart = toDateObject(doc.data().date, doc.data().startTime), itemEnd = toDateObject(doc.data().date, doc.data().endTime);\r\n            \r\n                                            if ((progStart >= itemStart && progStart < itemEnd) || (progEnd > itemStart && progEnd <= itemEnd)) {\r\n                                                setAlert({ registerSuccess: false, registerFail: true, loading: false });\r\n                                            } else {\r\n                                                db.collection('PersonalScheduler').doc(userID).update({\r\n                                                    registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                                });\r\n                                                setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                            }\r\n\r\n                                        } else {\r\n                                            db.collection('PersonalScheduler').doc(userID).update({\r\n                                                registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                            });\r\n                                            setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                        }\r\n                                    });\r\n\r\n                                case \"performance\":\r\n                                    return db.collection('Performances').doc(item).onSnapshot((doc: any) => {\r\n\r\n                                        if (programme.date == doc.data().date) {\r\n\r\n                                            const progStart = toDateObject(programme.date, programme.startTime), progEnd = toDateObject(programme.date, programme.endTime);\r\n                                            const itemStart = toDateObject(doc.data().date, doc.data().startTime), itemEnd = toDateObject(doc.data().date, doc.data().endTime);\r\n            \r\n                                            if ((progStart >= itemStart && progStart < itemEnd) || (progEnd > itemStart && progEnd <= itemEnd)) {\r\n                                                setAlert({ registerSuccess: false, registerFail: true, loading: false });\r\n                                            } else {\r\n                                                db.collection('PersonalScheduler').doc(userID).update({\r\n                                                    registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                                });\r\n                                                setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                            }\r\n\r\n                                        } else {\r\n                                            db.collection('PersonalScheduler').doc(userID).update({\r\n                                                registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                                            });\r\n                                            setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                                        }\r\n                                    });\r\n\r\n                                default:\r\n                                    setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                            }\r\n\r\n                            if (!alert.registerSuccess) {\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        db.collection('PersonalScheduler').doc(userID).update({\r\n                            registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                        });\r\n                        setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                    }\r\n\r\n                } else {\r\n                    db.collection('PersonalScheduler').doc(userID).update({\r\n                        registeredProgrammes: firebase.firestore.FieldValue.arrayUnion(programme.id)\r\n                    });\r\n                    setAlert({ registerSuccess: true, registerFail: false, loading: false });\r\n                }\r\n            });\r\n\r\n            if (alert.registerSuccess) {\r\n                // disable button\r\n            }\r\n\r\n        } catch (e) {\r\n            setAlert({ registerSuccess: false, registerFail: false, loading: false });\r\n            return console.log(e)\r\n        };\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <IonAlert\r\n                isOpen={alert.registerSuccess}\r\n                onDidDismiss={() => setAlert({ registerSuccess: false, registerFail: false, loading: false })}\r\n                cssClass='alertBox'\r\n                mode='md'\r\n                header={'Successfully Added'}\r\n                message={'You have successfully added this performance to My Schedule.'}\r\n                buttons={['Close']}\r\n            ></IonAlert>\r\n\r\n            <IonAlert\r\n                isOpen={alert.registerFail}\r\n                onDidDismiss={() => setAlert({ registerSuccess: false, registerFail: false, loading: false })}\r\n                cssClass='alertBox'\r\n                mode='md'\r\n                header={'Error Occurred'}\r\n                message={'There exists a performance in your scheduler at this timing. Please remove the existing performance from your scheduler first!'}\r\n                buttons={['Close']}\r\n            ></IonAlert>\r\n\r\n            <IonGrid id=\"performancesContent-tableGrid\">\r\n                <IonRow id=\"performancesContent-tableHeader\" className=\"ion-justify-content-center\">\r\n                    <IonCol className=\"performancesContent-Header ion-text-wrap\">Performance</IonCol>\r\n                    <IonCol className=\"performancesContent-Header ion-text-wrap\">Time</IonCol>\r\n                    <IonCol className=\"performancesContent-Header ion-text-wrap\">Venue</IonCol>\r\n                    <IonCol className=\"performancesContent-Header ion-text-wrap\">Add to My Schedule</IonCol>\r\n                </IonRow>\r\n                {props.day1 === 'day1' ?\r\n                    performanceDay1.map((performance: any) => {\r\n                        return (\r\n                            <IonRow className=\"ion-justify-content-center\" key={performance.id}>\r\n                                <IonCol className=\"performancesContent-Data ion-text-wrap\">{performance.performanceName}</IonCol>\r\n                                <IonCol className=\"performancesContent-Data ion-text-wrap\">{performance.startTime + \" to \" + performance.endTime}</IonCol>\r\n                                <IonCol className=\"performancesContent-Data ion-text-wrap\">{performance.venue}</IonCol>\r\n                                <IonCol className=\"performancesContent-Data ion-text-wrap\">\r\n                                    <IonButton className=\"performancesContent-DataBtn\" size=\"small\" style={{ marginTop: \"-5%\", marginBottom: \"-5%\" }} onClick={() => addToSchedule(performance)}>\r\n                                        <FontAwesomeIcon icon={faPlus} size=\"lg\" />\r\n                                    </IonButton>\r\n                                </IonCol>\r\n                            </IonRow>\r\n                        )\r\n                    })\r\n                    : ''\r\n                }\r\n                {props.day2 === 'day2' ?\r\n                    performanceDay2.map((performance: any) => {\r\n                        return (\r\n                            <IonRow className=\"ion-justify-content-center\" key={performance.id}>\r\n                                <IonCol className=\"performancesContent-Data ion-text-wrap\">{performance.performanceName}</IonCol>\r\n                                <IonCol className=\"performancesContent-Data ion-text-wrap\">{performance.startTime + \" to \" + performance.endTime}</IonCol>\r\n                                <IonCol className=\"performancesContent-Data ion-text-wrap\">{performance.venue}</IonCol>\r\n                                <IonCol className=\"performancesContent-Data ion-text-wrap\">\r\n                                    <IonButton className=\"performancesContent-DataBtn\" size=\"small\" style={{ marginTop: \"-5%\", marginBottom: \"-5%\" }} onClick={() => addToSchedule(performance)}>\r\n                                        <FontAwesomeIcon icon={faPlus} size=\"lg\" />\r\n                                    </IonButton>\r\n                                </IonCol>\r\n                            </IonRow>\r\n                        )\r\n                    })\r\n                    : ''\r\n                }\r\n            </IonGrid>\r\n            <IonLoading isOpen={alert.loading} />\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default PerformancesContent;"]},"metadata":{},"sourceType":"module"}