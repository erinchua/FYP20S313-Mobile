{"ast":null,"code":"export function formatDate(isoDate) {\n  return new Date(isoDate).toLocaleDateString('en-UK', {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric'\n  });\n}\nexport function toDateObject(date, time) {\n  if (time === \"\") time = \"00:00AM\";\n  const dateSplit = date.split(\"-\");\n  const timeSplit = time.split(\":\");\n  let monthString = dateSplit[1];\n  if (monthString.length > 3) monthString = monthString.slice(0, 3);\n  const monthsArray = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const day = +dateSplit[0],\n        month = +monthsArray.indexOf(dateSplit[1]),\n        year = +dateSplit[2];\n  let hours = +timeSplit[0];\n  const minutes = +timeSplit[1].slice(0, 2),\n        meridiem = timeSplit[1].slice(-2, timeSplit[1].length);\n  const seconds = 0,\n        milliseconds = 0;\n  if (hours === 12 && meridiem.toUpperCase() === \"AM\") hours = 0;\n  if (hours > 0 && hours < 12 && meridiem.toUpperCase() === \"PM\") hours += 12;\n  return new Date(year, month, day, hours, minutes, seconds, milliseconds);\n}\nexport function camalize(str) {\n  return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());\n}\nexport function sentence(str) {\n  const split = str.replace(/([A-Z])/g, \" $1\");\n  return split.charAt(0).toUpperCase() + split.slice(1);\n}","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/modules/convert.ts"],"names":["formatDate","isoDate","Date","toLocaleDateString","day","month","year","toDateObject","date","time","dateSplit","split","timeSplit","monthString","length","slice","monthsArray","indexOf","hours","minutes","meridiem","seconds","milliseconds","toUpperCase","camalize","str","toLowerCase","replace","m","chr","sentence","charAt"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,OAApB,EAAkC;AACrC,SAAO,IAAIC,IAAJ,CAASD,OAAT,EAAkBE,kBAAlB,CAAqC,OAArC,EAA8C;AACjDC,IAAAA,GAAG,EAAE,SAD4C;AACjCC,IAAAA,KAAK,EAAE,OAD0B;AACjBC,IAAAA,IAAI,EAAE;AADW,GAA9C,CAAP;AAGH;AAED,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAAoCC,IAApC,EAAkD;AACrD,MAAIA,IAAI,KAAK,EAAb,EAAiBA,IAAI,GAAG,SAAP;AAEjB,QAAMC,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAlB;AACA,QAAMC,SAAS,GAAGH,IAAI,CAACE,KAAL,CAAW,GAAX,CAAlB;AAEA,MAAIE,WAAW,GAAGH,SAAS,CAAC,CAAD,CAA3B;AACA,MAAIG,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4BD,WAAW,GAAGA,WAAW,CAACE,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAd;AAE5B,QAAMC,WAAW,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAApB;AAEA,QAAMZ,GAAG,GAAG,CAACM,SAAS,CAAC,CAAD,CAAtB;AAAA,QAA2BL,KAAK,GAAG,CAACW,WAAW,CAACC,OAAZ,CAAoBP,SAAS,CAAC,CAAD,CAA7B,CAApC;AAAA,QAAuEJ,IAAI,GAAG,CAACI,SAAS,CAAC,CAAD,CAAxF;AACA,MAAIQ,KAAK,GAAG,CAACN,SAAS,CAAC,CAAD,CAAtB;AACA,QAAMO,OAAO,GAAG,CAACP,SAAS,CAAC,CAAD,CAAT,CAAaG,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CAAjB;AAAA,QAA2CK,QAAQ,GAAGR,SAAS,CAAC,CAAD,CAAT,CAAaG,KAAb,CAAmB,CAAC,CAApB,EAAuBH,SAAS,CAAC,CAAD,CAAT,CAAaE,MAApC,CAAtD;AACA,QAAMO,OAAO,GAAG,CAAhB;AAAA,QAAmBC,YAAY,GAAG,CAAlC;AAGA,MAAIJ,KAAK,KAAK,EAAV,IAAgBE,QAAQ,CAACG,WAAT,OAA2B,IAA/C,EAAqDL,KAAK,GAAG,CAAR;AACrD,MAAKA,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAtB,IAA6BE,QAAQ,CAACG,WAAT,OAA2B,IAA5D,EAAkEL,KAAK,IAAI,EAAT;AAElE,SAAO,IAAIhB,IAAJ,CAASI,IAAT,EAAeD,KAAf,EAAsBD,GAAtB,EAA2Bc,KAA3B,EAAkCC,OAAlC,EAA2CE,OAA3C,EAAoDC,YAApD,CAAP;AACH;AAED,OAAO,SAASE,QAAT,CAAkBC,GAAlB,EAA+B;AAClC,SAAOA,GAAG,CAACC,WAAJ,GAAkBC,OAAlB,CAA0B,mBAA1B,EAA+C,CAACC,CAAD,EAAYC,GAAZ,KAA4BA,GAAG,CAACN,WAAJ,EAA3E,CAAP;AACH;AAED,OAAO,SAASO,QAAT,CAAkBL,GAAlB,EAA+B;AAClC,QAAMd,KAAK,GAAGc,GAAG,CAACE,OAAJ,CAAa,UAAb,EAAyB,KAAzB,CAAd;AACA,SAAOhB,KAAK,CAACoB,MAAN,CAAa,CAAb,EAAgBR,WAAhB,KAAgCZ,KAAK,CAACI,KAAN,CAAY,CAAZ,CAAvC;AACH","sourcesContent":["export function formatDate(isoDate: any) {\r\n    return new Date(isoDate).toLocaleDateString('en-UK', {\r\n        day: 'numeric', month: 'short', year: 'numeric'\r\n    });\r\n}\r\n\r\nexport function toDateObject(date: string, time: string) {\r\n    if (time === \"\") time = \"00:00AM\";\r\n\r\n    const dateSplit = date.split(\"-\");\r\n    const timeSplit = time.split(\":\");\r\n    \r\n    let monthString = dateSplit[1];\r\n    if (monthString.length > 3) monthString = monthString.slice(0, 3);\r\n\r\n    const monthsArray = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n\r\n    const day = +dateSplit[0], month = +monthsArray.indexOf(dateSplit[1]), year = +dateSplit[2];\r\n    let hours = +timeSplit[0];\r\n    const minutes = +timeSplit[1].slice(0, 2), meridiem = timeSplit[1].slice(-2, timeSplit[1].length);\r\n    const seconds = 0, milliseconds = 0;\r\n\r\n    \r\n    if (hours === 12 && meridiem.toUpperCase() === \"AM\") hours = 0;\r\n    if ((hours > 0 && hours < 12) && meridiem.toUpperCase() === \"PM\") hours += 12;\r\n\r\n    return new Date(year, month, day, hours, minutes, seconds, milliseconds);\r\n}\r\n\r\nexport function camalize(str: string) {\r\n    return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m: string, chr: string) => chr.toUpperCase());\r\n}\r\n\r\nexport function sentence(str: string) {\r\n    const split = str.replace( /([A-Z])/g, \" $1\" );\r\n    return split.charAt(0).toUpperCase() + split.slice(1);\r\n}"]},"metadata":{},"sourceType":"module"}