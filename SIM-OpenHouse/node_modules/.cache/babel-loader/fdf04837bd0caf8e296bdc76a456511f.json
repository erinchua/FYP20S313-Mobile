{"ast":null,"code":"var _jsxFileName = \"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\src\\\\pages\\\\Test.tsx\";\nimport { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonGrid, IonIcon, IonButtons, IonButton, IonAlert } from '@ionic/react';\nimport React, { useRef, useState } from 'react';\nimport '../css/Global.css';\nimport '../css/Test.css';\nimport { arrowBackOutline } from 'ionicons/icons';\nimport { useForm } from \"react-hook-form\";\n{\n  /*import { useHistory } from 'react-router-dom';*/\n}\n\nconst Test = () => {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch,\n    reset,\n    getValues\n  } = useForm();\n\n  const onSubmit = data => {\n    console.log(\"Submitted\");\n    console.log(data);\n  };\n\n  const newPassword = useRef({});\n  newPassword.current = watch(\"newPassword\", \"\");\n  const newPasswordRef = useRef(null);\n  const confirmNewPasswordRef = useRef(null);\n\n  const validatePassword = () => {};\n\n  const [showAlert, setShowAlert] = useState(false);\n  const [showAlert2, setShowAlert2] = useState(false);\n  const [test1, setTest1] = useState();\n  const [test2, setTest2] = useState();\n\n  const display = () => {\n    const values1 = getValues(\"test\");\n    const values2 = getValues(\"test1\");\n\n    if (values1 !== \"\" && values2 !== \"\") {\n      setShowAlert(true);\n      setShowAlert2(false);\n      return;\n    }\n\n    setTest1(values1);\n    setTest2(values2);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: showAlert,\n    onDidDismiss: () => setShowAlert(false),\n    cssClass: \"my-custom-class\",\n    header: 'Have Value',\n    subHeader: 'Subtitle',\n    message: 'This is an alert message.',\n    buttons: ['Cancel', 'Open Modal'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: showAlert2,\n    onDidDismiss: () => setShowAlert2(false),\n    cssClass: \"my-custom-class\",\n    header: 'No Value',\n    message: 'This is an alert message.',\n    buttons: ['Okay'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 14\n    }\n  }), /*#__PURE__*/React.createElement(IonPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IonToolbar, {\n    id: \"topBar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(IonButtons, {\n    slot: \"start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    routerLink: \"/main\",\n    onClick: () => {\n      reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonIcon, {\n    id: \"back_button\",\n    slot: \"icon-only\",\n    icon: arrowBackOutline,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(IonTitle, {\n    id: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, \"Reset Password\"))), /*#__PURE__*/React.createElement(IonContent, {\n    fullscreen: true,\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IonGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"test\",\n    ref: register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"test1\",\n    ref: register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: display,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, \"Get Values\"), test1 && test2 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 37\n    }\n  }, \"Value 1: \", test1), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 37\n    }\n  }, \"Value 2: \", test2)))))));\n};\n\nexport default Test;","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/pages/Test.tsx"],"names":["IonContent","IonHeader","IonPage","IonTitle","IonToolbar","IonGrid","IonIcon","IonButtons","IonButton","IonAlert","React","useRef","useState","arrowBackOutline","useForm","Test","register","handleSubmit","errors","watch","reset","getValues","onSubmit","data","console","log","newPassword","current","newPasswordRef","confirmNewPasswordRef","validatePassword","showAlert","setShowAlert","showAlert2","setShowAlert2","test1","setTest1","test2","setTest2","display","values1","values2"],"mappings":"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","sourcesContent":["import { IonContent, \r\n    IonHeader, \r\n    IonPage, \r\n    IonTitle, \r\n    IonToolbar, \r\n    IonGrid, \r\n    IonRow, \r\n    IonCol, \r\n    IonIcon, \r\n    IonButtons, \r\n    IonButton, \r\n    IonItem, \r\n    IonInput, \r\n    IonList, \r\n    IonAlert } from '@ionic/react';\r\nimport React, {useRef, useState} from 'react';\r\nimport '../css/Global.css';\r\nimport '../css/Test.css';\r\nimport { arrowBackOutline, shieldCheckmarkOutline } from 'ionicons/icons';\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport TestControl from '../components/TestControl';\r\nimport TestCom from '../components/TestCom';\r\nimport ReactCodeInput from 'react-verification-code-input';\r\n\r\n{/*import { useHistory } from 'react-router-dom';*/}\r\n \r\n\r\n\r\nconst Test: React.FC = () => {\r\n    const { register, handleSubmit, errors, watch, reset, getValues } = useForm();\r\n\r\n    const onSubmit = (data: any) => {\r\n        console.log(\"Submitted\");\r\n        console.log(data);\r\n    };\r\n\r\n    const newPassword = useRef({});\r\n    newPassword.current = watch(\"newPassword\", \"\");\r\n\r\n    const newPasswordRef = useRef<HTMLIonInputElement>(null);\r\n    const confirmNewPasswordRef = useRef<HTMLIonInputElement>(null);\r\n\r\n    const validatePassword = () => {};\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [showAlert2, setShowAlert2] = useState(false);\r\n\r\n    const [test1, setTest1] = useState<string>();\r\n    const [test2, setTest2] = useState<string>();\r\n    \r\n    const display = () => {\r\n        const values1 = getValues(\"test\");\r\n        const values2 = getValues(\"test1\");\r\n        if (values1 !== \"\" && values2 !== \"\") {\r\n            setShowAlert(true);\r\n            setShowAlert2(false);\r\n            return;\r\n        }\r\n        setTest1(values1);\r\n        setTest2(values2);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <IonAlert\r\n                isOpen={showAlert}\r\n                onDidDismiss={() => setShowAlert(false)}\r\n                cssClass='my-custom-class'\r\n                header={'Have Value'}\r\n                subHeader={'Subtitle'}\r\n                message={'This is an alert message.'}\r\n                buttons={['Cancel', 'Open Modal']}\r\n             ></IonAlert>\r\n\r\n             <IonAlert\r\n                isOpen={showAlert2}\r\n                onDidDismiss={() => setShowAlert2(false)}\r\n                cssClass='my-custom-class'\r\n                header={'No Value'}\r\n                message={'This is an alert message.'}\r\n                buttons={['Okay']}\r\n             ></IonAlert>\r\n\r\n            <IonPage>\r\n                <IonHeader>\r\n                    <IonToolbar id=\"topBar\">\r\n                    <IonButtons slot=\"start\">\r\n                        <IonButton routerLink=\"/main\" onClick={() => {reset()}}>\r\n                            <IonIcon id=\"back_button\" slot=\"icon-only\" icon={arrowBackOutline} />\r\n                        </IonButton>\r\n                    </IonButtons>\r\n        \r\n                    <IonTitle id=\"title\">\r\n                        Reset Password \r\n                    </IonTitle>\r\n                    </IonToolbar>\r\n                </IonHeader>\r\n        \r\n                {/* Screen Content*/}\r\n                <IonContent fullscreen style={{display: \"flex\"}}>\r\n                    <IonGrid>\r\n                        <form>\r\n                            <input name=\"test\" ref={register} />\r\n                            <input name=\"test1\" ref={register} />\r\n\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={display}>\r\n                                Get Values\r\n                            </button>\r\n\r\n                            {test1 && test2 && (\r\n                                <>\r\n                                    <h1>Value 1: {test1}</h1>\r\n                                    <h1>Value 2: {test2}</h1>\r\n                                </>\r\n                            )}\r\n                            \r\n                        </form>\r\n\r\n                        {/*<form onSubmit={handleSubmit(onSubmit)}>\r\n                            <IonRow class=\"ion-justify-content-center\">\r\n                                <IonCol></IonCol>\r\n                                <IonCol size=\"6\" style={{textAlign: \"center\"}}>\r\n                                    <IonIcon id=\"shield_logo\" icon={shieldCheckmarkOutline} />\r\n                                </IonCol>\r\n                                <IonCol></IonCol>\r\n                            </IonRow>\r\n        \r\n                            <IonRow>\r\n                                <IonCol></IonCol>\r\n                                <IonCol size=\"10\">\r\n                                    <IonList>\r\n                                    <p id=\"text1\"><b>Please enter your new password</b></p>\r\n                                    <IonItem>\r\n                                        <IonInput id=\"newPasswordID\" type=\"password\" placeholder=\"New Password\" name=\"newPassword\" ref={register({ required: true, minLength: 8, pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[.,/<>#^~`@$!%*?&])[A-Za-z\\d.,/<>#~`^@$!%*?&]{8,}$/ })}></IonInput>\r\n                                    </IonItem>\r\n                                    {errors.newPassword && errors.newPassword.type === \"required\" && <div className=\"errorMessage\">Password is required!</div>}\r\n                                    {errors.newPassword && errors.newPassword.type === \"minLength\" && <div className=\"errorMessage\">Password has to be at least 8 characters and must contain 1 uppercase, 1 lowercase, 1 number and 1 special character</div>}\r\n                                    {errors.newPassword && errors.newPassword.type === \"pattern\" && <div className=\"errorMessage\">Password has to be at least 8 characters and must contain 1 uppercase, 1 lowercase, 1 number and 1 special character</div>}\r\n                                \r\n                                    <IonItem>\r\n                                        <IonInput id=\"confirmNewPasswordID\" type=\"password\" placeholder=\"Confirm New Password\" name=\"confirmNewPassword\" ref={register({ required: true, validate: (value) => value === newPassword.current })}></IonInput>\r\n                                    </IonItem>\r\n                                    {errors.confirmNewPassword && errors.confirmNewPassword.type === \"required\" && <div className=\"errorMessage\">Please confirm your password!</div>}\r\n                                    {errors.confirmNewPassword && errors.confirmNewPassword.type === \"validate\" && <div className=\"errorMessage\">Passwords do not match!</div>}\r\n                                        \r\n                                    </IonList>\r\n                                </IonCol>\r\n                                <IonCol></IonCol>\r\n                            </IonRow>\r\n                            <IonRow class=\"ion-justify-content-center\">\r\n                            </IonRow>\r\n        \r\n                            <IonRow class=\"ion-justify-content-center\" style={{marginTop:\"5%\"}}>\r\n                                <IonButton size=\"large\" id=\"resetPwdBtn\" type=\"submit\" onClick={() => {\r\n                                    setShowAlert2(true);\r\n                                    const values=getValues();\r\n                                }}>RESET PASSWORD</IonButton>\r\n                            </IonRow>\r\n                        </form>*/}\r\n                    </IonGrid>\r\n                </IonContent>\r\n            </IonPage>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n\r\nexport default Test;"]},"metadata":{},"sourceType":"module"}