{"ast":null,"code":"var _jsxFileName = \"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\src\\\\temp\\\\VincentTest.tsx\";\nimport { IonContent, IonButton, IonHeader, IonPage, IonTitle, IonToolbar, IonCheckbox } from \"@ionic/react\";\nimport React, { useState, useEffect } from \"react\";\nimport QRCode from \"qrcode.react\";\nimport \"../css/Home.css\";\nimport { db } from \"../firebase\"; // import CreateClubAndCouncil from \"./CreateClubAndCouncil\";\n\n//<script src=\"../Resource/qrcode.min.js\"></script>;\nconst VincentTest = () => {\n  const [programmes, setProgrammes] = useState([]);\n  const [checkedFilter, setCheckFilter] = useState(['fullTime', 'partTime', 'fullPartTime']);\n  const [filteredProgrammes, setFilteredProgrammes] = useState([]);\n\n  const handleToggle = value => {\n    const currentIndex = checkedFilter.indexOf(value);\n    const newCheckedFilter = [...checkedFilter];\n\n    if (currentIndex === -1) {\n      newCheckedFilter.push(value);\n    } else {\n      newCheckedFilter.splice(currentIndex, 1);\n    }\n\n    setCheckFilter(newCheckedFilter); // console.log('New filters are' + newCheckedFilter)\n\n    filterProgrammes(newCheckedFilter);\n  };\n\n  const filterProgrammes = filters => {\n    console.log(\"I am inside filterProgrammes: \" + programmes);\n    const newProgrammes = [];\n    filters.map(filter => {\n      let programme = [];\n\n      if (filter == 'partTime') {\n        programme = programmes.filter(programme => {\n          return programme.modeOfStudy.partTime == true;\n        });\n        console.log('I am partTime' + programme);\n        newProgrammes.push(programme);\n      } else if (filter == 'fullTime') {\n        programme = programmes.filter(programme => {\n          return programme.modeOfStudy.fullTime == true;\n        });\n        console.log('I am fullTime' + programme);\n        newProgrammes.push(programme);\n      } else if (filter == 'fullPartTime') {\n        programme = programmes.filter(programme => {\n          return programme.modeOfStudy.fullTime == true && programme.modeOfStudy.partTime == true;\n        });\n        console.log('I am fullPartTime' + programme);\n        newProgrammes.push(programme);\n      }\n    });\n    console.log('newprogrammes are' + newProgrammes);\n    setFilteredProgrammes(newProgrammes);\n  };\n\n  useEffect(() => {\n    const programmes = [];\n    const dates = [];\n\n    const fetchData = async () => {\n      db.collection(\"TestProgrammes\").get().then(snapshot => {\n        snapshot.docs.forEach(doc => {\n          const data = doc.data();\n          programmes.push(data);\n        }); // console.log(\"First Useeffect programmes: \" + programmes)\n\n        setProgrammes(programmes);\n        setFilteredProgrammes(programmes);\n      });\n    };\n\n    const fetchDate = async () => {\n      db.collection(\"Openhouse\").get().then(snapshot => {\n        snapshot.forEach(doc => {\n          const data = doc.get(\"day\");\n\n          if (!Array.isArray(data)) {\n            for (var i = 0; i < Object.keys(data).length; i++) {\n              const date = data[Object.keys(data)[i]].date;\n              console.log(\"i am date\" + date);\n              dates.push(date);\n            }\n          }\n        });\n      });\n    };\n\n    fetchData();\n    fetchDate();\n  }, []); // useEffect(() => {\n  //   filterProgrammes(checkedFilter)\n  // }, [checkedFilter]);\n\n  /* console.log(\r\n    contacts.map((contact) => {\r\n      contact.data();\r\n    })\r\n  ); */\n\n  /*  const qrcode = new QRCode(document.getElementById(\"qrcode\")); */\n\n  const generateQR = () => {//qrcode.makeCode(qrdata);\n  };\n\n  return /*#__PURE__*/React.createElement(IonPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, \"QRTest\"))), /*#__PURE__*/React.createElement(IonContent, {\n    fullscreen: true,\n    className: \"ion-padding\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    onClick: generateQR,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \" Generate QR \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(QRCode, {\n    value: \"ThomasLee@gmail.com,Thomas,Lee\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, \"Full time & Part time\"), /*#__PURE__*/React.createElement(IonCheckbox, {\n    onIonChange: e => handleToggle(e.detail.value),\n    value: \"fullPartTime\",\n    checked: checkedFilter.indexOf('fullPartTime') === -1 ? false : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, \"Full time\"), /*#__PURE__*/React.createElement(IonCheckbox, {\n    onIonChange: e => handleToggle(e.detail.value),\n    value: \"fullTime\",\n    checked: checkedFilter.indexOf('fullTime') === -1 ? false : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, \"Part time\"), /*#__PURE__*/React.createElement(IonCheckbox, {\n    onIonChange: e => handleToggle(e.detail.value),\n    value: \"partTime\",\n    checked: checkedFilter.indexOf('partTime') === -1 ? false : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }), Array.isArray(filteredProgrammes) && filteredProgrammes.length && filteredProgrammes.map(programme => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: programme.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    }, programme.programmeTitle), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 15\n      }\n    }, programme.awardedBy), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }));\n  })));\n};\n\nexport default VincentTest;","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/temp/VincentTest.tsx"],"names":["IonContent","IonButton","IonHeader","IonPage","IonTitle","IonToolbar","IonCheckbox","React","useState","useEffect","QRCode","db","VincentTest","programmes","setProgrammes","checkedFilter","setCheckFilter","filteredProgrammes","setFilteredProgrammes","handleToggle","value","currentIndex","indexOf","newCheckedFilter","push","splice","filterProgrammes","filters","console","log","newProgrammes","map","filter","programme","modeOfStudy","partTime","fullTime","dates","fetchData","collection","get","then","snapshot","docs","forEach","doc","data","fetchDate","Array","isArray","i","Object","keys","length","date","generateQR","e","detail","id","programmeTitle","awardedBy"],"mappings":"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","sourcesContent":["import { IonContent, IonInput, IonButton, IonItem, IonLabel, IonHeader, IonPage, IonTitle, IonToolbar, IonSegmentButton, IonSegment, IonCheckbox } from \"@ionic/react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport QRCode from \"qrcode.react\";\r\nimport \"../css/Home.css\";\r\nimport { auth, db } from \"../firebase\";\r\n// import CreateClubAndCouncil from \"./CreateClubAndCouncil\";\r\nimport ViewClubAndCouncil from \"./ViewClubAndCouncil\";\r\nimport ViewContactInfo from \"./ViewContactInfo\";\r\nimport ViewProgrammeTalk from \"./ViewProgrammeTalk\";\r\n\r\n//<script src=\"../Resource/qrcode.min.js\"></script>;\r\n\r\nconst VincentTest: React.FC = () => {\r\n\r\n  const [programmes, setProgrammes] = useState<any>([])\r\n  const [checkedFilter, setCheckFilter] = useState<string[]>(['fullTime', 'partTime', 'fullPartTime'])\r\n  const [filteredProgrammes, setFilteredProgrammes] = useState([])\r\n\r\n  const handleToggle = (value: string) => {\r\n    const currentIndex = checkedFilter.indexOf(value)\r\n    const newCheckedFilter = [...checkedFilter]\r\n\r\n    if (currentIndex === -1) {\r\n      newCheckedFilter.push(value)\r\n    } else {\r\n      newCheckedFilter.splice(currentIndex, 1)\r\n    }\r\n\r\n    setCheckFilter(newCheckedFilter)\r\n    // console.log('New filters are' + newCheckedFilter)\r\n    filterProgrammes(newCheckedFilter)\r\n\r\n  }\r\n\r\n  const filterProgrammes = (filters: string[]) => {\r\n    console.log(\"I am inside filterProgrammes: \" + programmes)\r\n    const newProgrammes: any = []\r\n    filters.map(filter => {\r\n      let programme = []\r\n      if (filter == 'partTime') {\r\n        programme = programmes.filter((programme: { modeOfStudy: { partTime: boolean; }; }) => { return programme.modeOfStudy.partTime == true })\r\n        console.log('I am partTime' + programme)\r\n        newProgrammes.push(programme)\r\n      }\r\n      else if (filter == 'fullTime') {\r\n        programme = programmes.filter((programme: { modeOfStudy: { fullTime: boolean; }; }) => { return programme.modeOfStudy.fullTime == true })\r\n        console.log('I am fullTime' + programme)\r\n        newProgrammes.push(programme)\r\n      }\r\n      else if (filter == 'fullPartTime') {\r\n        programme = programmes.filter((programme: { modeOfStudy: { fullTime: boolean; partTime: boolean }; }) => { return programme.modeOfStudy.fullTime == true && programme.modeOfStudy.partTime == true })\r\n        console.log('I am fullPartTime' + programme)\r\n        newProgrammes.push(programme)\r\n      }\r\n    })\r\n    console.log('newprogrammes are' + newProgrammes)\r\n    setFilteredProgrammes(newProgrammes)\r\n  }\r\n  useEffect(() => {\r\n    const programmes: any = []\r\n    const dates: any = []\r\n    const fetchData = async () => {\r\n      db.collection(\"TestProgrammes\")\r\n        .get()\r\n        .then((snapshot) => {\r\n          snapshot.docs.forEach((doc) => {\r\n            const data = doc.data()\r\n            programmes.push(data)\r\n          });\r\n          // console.log(\"First Useeffect programmes: \" + programmes)\r\n          setProgrammes(programmes)\r\n          setFilteredProgrammes(programmes)\r\n\r\n        });\r\n    };\r\n\r\n    const fetchDate = async () => {\r\n      db.collection(\"Openhouse\")\r\n        .get()\r\n        .then((snapshot: any) => {\r\n          snapshot.forEach((doc: any) => {\r\n            const data = doc.get(\"day\");\r\n            if (!Array.isArray(data)) {\r\n              for (var i = 0; i < Object.keys(data).length; i++) {\r\n                const date = data[Object.keys(data)[i]].date;\r\n                console.log(\"i am date\" + date)\r\n                dates.push(date)\r\n              }\r\n            }\r\n\r\n\r\n          })\r\n        })\r\n    }\r\n    fetchData();\r\n    fetchDate();\r\n\r\n\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   filterProgrammes(checkedFilter)\r\n\r\n  // }, [checkedFilter]);\r\n\r\n  /* console.log(\r\n    contacts.map((contact) => {\r\n      contact.data();\r\n    })\r\n  ); */\r\n\r\n  /*  const qrcode = new QRCode(document.getElementById(\"qrcode\")); */\r\n\r\n  const generateQR = () => {\r\n    //qrcode.makeCode(qrdata);\r\n  };\r\n\r\n  return (\r\n    <IonPage>\r\n      {/* {      console.log(\"After rendering in filtered programmes are\" + JSON.stringify(filteredProgrammes))} */}\r\n      <IonHeader>\r\n        <IonToolbar>\r\n          <IonTitle>QRTest</IonTitle>\r\n        </IonToolbar>\r\n      </IonHeader>\r\n      <IonContent fullscreen className=\"ion-padding\">\r\n        {/* <IonInput\r\n          value={qrdata}\r\n          type=\"text\"\r\n          id=\"qr-data\"\r\n          onIonChange={(e: any) => {\r\n            setQRdata(e.detail.value);\r\n          }}\r\n        ></IonInput> */}\r\n        <IonButton onClick={generateQR}> Generate QR </IonButton>\r\n        <div>\r\n          <QRCode value=\"ThomasLee@gmail.com,Thomas,Lee\" />{\" \"}\r\n        </div>\r\n\r\n        {/* <CreateClubAndCouncil /> */}\r\n        {/* <ViewClubAndCouncil categoryType=\"InternationalStudent\"></ViewClubAndCouncil> */}\r\n        {/* <ViewContactInfo></ViewContactInfo> */}\r\n        {/* <ViewProgrammeTalk date=\"21-Nov-2020\"></ViewProgrammeTalk> */}\r\n\r\n        {/* {programmes.map(({ programOverview = [], applicationPeriod = [], programmeStructure = [], overseaOpportunity = [], intakeMonths = [], duration = [] }) => {\r\n          return (\r\n            <div>\r\n              {programOverview.map((item) => {\r\n                return (\r\n                  <li>{item}</li>\r\n                )\r\n              })}\r\n              <li>Jan 2021 Intake: {applicationPeriod.jan2021}</li>\r\n              <li>Coursework: {programmeStructure.coursework ? 'Yes' : 'No'}</li>\r\n              <li>Examination: {programmeStructure.examination ? 'Yes' : 'No'}</li>\r\n              <li>Exchange: {overseaOpportunity.exchange ? 'Yes' : 'No'}</li>\r\n              <li>Transfer: {overseaOpportunity.transfer ? 'Yes' : 'No'}</li>\r\n              <li>Intake Months Part Time: {intakeMonths.partTime}</li>\r\n              <li>Duration Part Time: {duration.partTime}</li>\r\n              <br />\r\n            </div>\r\n          )\r\n\r\n        })\r\n        } */}\r\n        <p>Full time & Part time</p>\r\n        <IonCheckbox onIonChange={e => handleToggle(e.detail.value)} value='fullPartTime' checked={checkedFilter.indexOf('fullPartTime') === -1 ? false : true}></IonCheckbox>\r\n        <br />\r\n        <p>Full time</p>\r\n        <IonCheckbox onIonChange={e => handleToggle(e.detail.value)} value='fullTime' checked={checkedFilter.indexOf('fullTime') === -1 ? false : true}></IonCheckbox>\r\n        <br />\r\n        <p>Part time</p>\r\n        <IonCheckbox onIonChange={e => handleToggle(e.detail.value)} value='partTime' checked={checkedFilter.indexOf('partTime') === -1 ? false : true}></IonCheckbox>\r\n        <br />\r\n        {/* {console.log(\"Before mapping programmes: \" + filteredProgrammes)} */}\r\n        {Array.isArray(filteredProgrammes) && filteredProgrammes.length && filteredProgrammes.map((programme: any) => {\r\n          return (\r\n\r\n            <div key={programme.id}>\r\n              {/* {console.log(\"i am ID: \" + programme.id)} */}\r\n              <li>{programme.programmeTitle}</li>\r\n              <li>{programme.awardedBy}</li>\r\n              {/* <li>{programme.modeOfStudy.fullTime ? 'Full-Time' : ''}</li>\r\n              <li>{programme.modeOfStudy.partTime ? 'Part-Time' : ''}</li> */}\r\n              <br />\r\n            </div>\r\n          )\r\n        })}\r\n      </IonContent>\r\n    </IonPage>\r\n  );\r\n};\r\n\r\nexport default VincentTest;\r\n"]},"metadata":{},"sourceType":"module"}