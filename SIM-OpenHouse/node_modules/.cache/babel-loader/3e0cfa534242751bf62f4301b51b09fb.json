{"ast":null,"code":"var _jsxFileName = \"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\src\\\\pages\\\\Study@SIM\\\\Study@SIMProgList.tsx\";\nimport { IonAlert, IonBadge, IonButton, IonCol, IonContent, IonGrid, IonHeader, IonLabel, IonPage, IonPopover, IonRouterLink, IonRow, IonTitle, IonToolbar } from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faFilter } from '@fortawesome/free-solid-svg-icons';\nimport '../../css/Global.css';\nimport '../../css/Study@SIMProgList.css';\nimport TopNav from '../../components/TopNav';\nimport CompareProgPopoverContent from '../../components/Study@SIM/CompareProgPopoverContent';\nimport FilterPopoverContent from '../../components/FilterPopoverContent';\nimport { db } from '../../firebase';\n\nconst StudySIMProgList = props => {\n  console.log(props);\n  const {\n    match\n  } = props;\n  const discipline = match.params.discipline;\n  const category = match.params.category;\n  const [disciplineName, setDisciplineName] = useState(['Arts & Social Sciences', 'Business', 'IT & Computer Science', 'Nursing', 'Specialty']);\n  const [filterCondition, setFilterCondition] = useState({\n    mos: ['fullPartTime', 'partTime', 'fullTime'],\n    discipline: [discipline],\n    uni: [],\n    acadLvl: [category],\n    entry: [],\n    subDisc: []\n  });\n\n  const onUpdateFilter = (mosFilter, discFilter, uniFilter, acadLvlFilter, entryFilter, subDiscFilter) => {\n    setFilterCondition(prevState => {\n      let filter = { ...prevState\n      };\n      Object.keys(filter).map(key => {\n        if (key == 'mos') filter[key] = mosFilter;\n        if (key == 'discipline') filter[key] = discFilter;\n        if (key == 'uni') filter[key] = uniFilter;\n        if (key == 'acadLvl') filter[key] = acadLvlFilter;\n        if (key == 'entry') filter[key] = entryFilter;\n        if (key == 'subDisc') filter[key] = subDiscFilter;\n      });\n      return filter;\n    });\n  }; //programmes to be rendered and the comparepopover list\n\n\n  const [programmes, setProgrammes] = useState([]);\n  const [compareProgList, setCompareProgList] = useState([]); //To get the unique disciplines for rendering at the header\n\n  const allDisc = programmes.map(programme => programme.discipline);\n  const disc = [];\n  allDisc.map(data => data.map(data => disc.push(data)));\n  let uniqueDisc = [...new Set(disc)]; //For storing the compare list into session\n\n  useEffect(() => {\n    return () => {\n      window.sessionStorage.setItem(\"compareProgList\", JSON.stringify(compareProgList));\n    };\n  }, [compareProgList]);\n  {\n    /* Adding programme for comparison - Need to be generated dynamically */\n  }\n\n  const compareProgramme = programme => {\n    const newProgList = [...compareProgList];\n    const newProgID = programme.id;\n\n    if (newProgList.length < 3) {\n      if (newProgList.includes(programme)) {\n        const updatedProgList = newProgList.filter(existingProg => {\n          return existingProg.id != newProgID;\n        });\n        setCompareProgList(updatedProgList);\n      } else {\n        newProgList.push(programme);\n        setCompareProgList(newProgList);\n      }\n    } else {\n      if (newProgList.includes(programme)) {\n        const updatedProgList = newProgList.filter(existingProg => {\n          return existingProg.id != newProgID;\n        });\n        setCompareProgList(updatedProgList);\n      } else {\n        setShowCompareProgAlert(true);\n      }\n    }\n  };\n\n  const filterProgrammes = async condition => {\n    const initialList = [];\n    let filteredList = [];\n    let segmentFilter = [];\n    console.log(\"In filterProgrammes, inputs:\" + JSON.stringify(condition));\n    await db.collection('TestProgrammes').get().then(snapshot => {\n      snapshot.docs.forEach(doc => {\n        const data = doc.data();\n        initialList.push(data);\n      });\n    });\n    console.log(initialList.length + JSON.stringify(initialList));\n    Object.entries(condition).map(([key, value]) => {\n      if (key == 'mos') {\n        if (value.length < 3 && value.length > 0) {\n          value.forEach(value => {\n            if (value == 'fullPartTime') {\n              segmentFilter = initialList.filter(programme => programme.modeOfStudy.fullTime && programme.modeOfStudy.partTime);\n              console.log(\"filtering full and part time\" + segmentFilter.length);\n              filteredList = filteredList.concat(segmentFilter);\n              console.log(\"Current filtered list\" + filteredList.length + JSON.stringify(filteredList));\n            }\n\n            if (value == 'fullTime') {\n              segmentFilter = initialList.filter(programme => programme.modeOfStudy.fullTime && !programme.modeOfStudy.partTime);\n              console.log(\"filtering full time\" + segmentFilter.length);\n              filteredList = filteredList.concat(segmentFilter);\n            }\n\n            if (value == 'partTime') {\n              segmentFilter = initialList.filter(programme => !programme.modeOfStudy.fullTime && programme.modeOfStudy.partTime);\n              console.log(\"filtering part time\" + segmentFilter.length);\n              filteredList = filteredList.concat(segmentFilter);\n            }\n          });\n        } else if (value.length == 0 || value.length == 3) {\n          filteredList = initialList;\n        }\n      } else if (key == 'discipline') {\n        let discFiltered = [];\n\n        if (value.length > 0 && value.length <= 4) {\n          console.log(\"Entered discipline filter\");\n          value.forEach(value => {\n            segmentFilter = filteredList.filter(programme => programme.discipline.includes(value));\n            console.log(\"filtering discipline\" + value + segmentFilter.length + JSON.stringify(segmentFilter));\n            discFiltered = discFiltered.concat(segmentFilter);\n          });\n          filteredList = discFiltered;\n        }\n      } else if (key == 'uni') {\n        let uniFiltered = [];\n\n        if (value.length > 0) {\n          value.forEach(value => {\n            segmentFilter = filteredList.filter(programme => programme.awardedBy == value);\n            console.log(\"filtering uni\" + value + segmentFilter.length + JSON.stringify(segmentFilter));\n            uniFiltered = uniFiltered.concat(segmentFilter); // console.log(\"current list\" + JSON.stringify(filteredList))\n          });\n          filteredList = uniFiltered;\n        }\n      } else if (key == 'acadLvl') {\n        let acadFiltered = [];\n\n        if (value.length > 0) {\n          value.forEach(value => {\n            segmentFilter = filteredList.filter(programme => programme.academicLevel == value);\n            console.log(\"filtering acadLvl\" + value + segmentFilter.length + JSON.stringify(segmentFilter));\n            acadFiltered = acadFiltered.concat(segmentFilter);\n          });\n          filteredList = acadFiltered;\n        }\n      } else if (key == 'entry') {\n        let entryFiltered = [];\n\n        if (value.length > 0) {\n          value.forEach(value => {\n            if (value == 'aLevel') {\n              segmentFilter = filteredList.filter(programme => programme.entryQualifications.aLevel);\n              console.log(\"Filering \" + value + segmentFilter.length + JSON.stringify(segmentFilter));\n              entryFiltered = entryFiltered.concat(segmentFilter);\n            } else if (value == 'oLevel') {\n              segmentFilter = filteredList.filter(programme => programme.entryQualifications.oLevel);\n              console.log(\"Filering \" + value + segmentFilter.length + JSON.stringify(segmentFilter));\n              entryFiltered = entryFiltered.concat(segmentFilter);\n            } else if (value == 'diploma') {\n              segmentFilter = filteredList.filter(programme => programme.entryQualifications.diploma);\n              console.log(\"Filering \" + value + segmentFilter.length + JSON.stringify(segmentFilter));\n              entryFiltered = entryFiltered.concat(segmentFilter);\n            } else if (value == 'degree') {\n              segmentFilter = filteredList.filter(programme => programme.entryQualifications.degree);\n              console.log(\"Filering \" + value + segmentFilter.length + JSON.stringify(segmentFilter));\n              entryFiltered = entryFiltered.concat(segmentFilter);\n            }\n          });\n          filteredList = entryFiltered;\n        }\n      } else if (key == 'subDisc') {\n        let subDiscFiltered = [];\n\n        if (value.length > 0) {\n          value.forEach(value => {\n            segmentFilter = filteredList.filter(programme => programme.subDiscipline.includes(value));\n            console.log(\"Filering subDisc\" + value + segmentFilter.length + JSON.stringify(segmentFilter));\n            subDiscFiltered = subDiscFiltered.concat(segmentFilter);\n          });\n          filteredList = subDiscFiltered;\n        }\n      }\n    } //newList.filter(programme=>{return programme.modeOfStudy})\n    );\n    console.log(\"New List are \" + filteredList.length + JSON.stringify(filteredList));\n    setProgrammes(filteredList);\n  };\n  /*To remove selected programmes in comparePopOver */\n\n\n  const removeProg = programme => {\n    const newProgList = [...compareProgList];\n    const newProgID = programme.id;\n    const updatedProgList = newProgList.filter(programme => {\n      return programme.id != newProgID;\n    });\n    setCompareProgList(updatedProgList);\n  };\n  /*To remove all selected programmes in comparePopOver */\n\n\n  const removeAllProg = programmes => {\n    const newProgList = [...compareProgList];\n    const updatedProgList = newProgList.filter(programme => {\n      return programme.id == '';\n    });\n    setCompareProgList(updatedProgList);\n  };\n\n  {\n    /* Display Compare Prog Popover */\n  }\n  const [showCompareProgPopover, setShowCompareProgPopover] = useState({\n    open: false,\n    event: undefined\n  });\n  {\n    /* \"If no prog is added to compare\" Alert */\n  }\n  const [showCompareProgAlert, setShowCompareProgAlert] = useState(false);\n  {\n    /* Display Filter Menu Popover */\n  }\n  const [showProgCourseFilterPopover, setShowProgCourseFilterPopover] = useState({\n    open: false,\n    event: undefined\n  });\n  {\n    /* When page first load */\n  }\n  useEffect(() => {\n    console.log(\"proglist rendered\");\n    {\n      /*Fetching Programmes Data from firestore*/\n    }\n\n    const fetchData = async (discipline, category) => {\n      const programmes = [];\n      await db.collection('TestProgrammes').where(\"discipline\", \"array-contains\", match.params.discipline).where(\"academicLevel\", '==', match.params.category).get().then(snapshot => {\n        snapshot.docs.forEach(doc => {\n          const data = doc.data();\n          programmes.push(data);\n          console.log(\"programme retrieved \" + data);\n        });\n        setProgrammes(programmes);\n      }).catch(error => console.log(error));\n    };\n\n    fetchData(match.params.discipline, match.params.category);\n    const sessionList = window.sessionStorage.compareProgList ? JSON.parse(window.sessionStorage.compareProgList) : [];\n    console.log(\"Session list retrieved! \" + sessionList);\n    setCompareProgList(sessionList);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }\n  }, console.log(\"disc are\" + disc + disc.length), console.log(\"uniqueDisc are\" + uniqueDisc), /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: showCompareProgAlert,\n    onDidDismiss: () => setShowCompareProgAlert(false),\n    cssClass: \"alertBox\",\n    mode: \"md\",\n    message: 'You may compare up to 3 programmes at a time by tapping on the Compare button of the programme(s).',\n    buttons: ['OK'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TopNav, {\n    title: \"Study@SIM\",\n    route: \"/u/study@SIMMain\",\n    backarrow: true,\n    hamburger: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(IonToolbar, {\n    id: \"studySIMProgListHeaderToolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(IonGrid, {\n    style: {\n      padding: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonRow, {\n    id: \"studySIMProgListHeaderRow\",\n    class: \"ion-align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    size: \"6\",\n    sizeSm: \"6\",\n    class: \"ion-text-left\",\n    className: \"studySIMProgListCol\",\n    style: {\n      paddingLeft: \"3%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonTitle, {\n    className: \"studyProgListTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 37\n    }\n  }, uniqueDisc.length == 1 ? uniqueDisc.map(disc => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: disc,\n      className: \"ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 53\n      }\n    }, disc);\n  }) : '')), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"4\",\n    sizeSm: \"4\",\n    class: \"ion-text-right\",\n    className: \"studySIMProgListCol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    id: \"compareBtn\",\n    fill: \"clear\",\n    onClick: e => {\n      if (compareProgList.length < 1 || compareProgList.length > 3) {\n        setShowCompareProgAlert(true);\n      } else {\n        setShowCompareProgPopover({\n          open: true,\n          event: e.nativeEvent\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    className: \"compareLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 41\n    }\n  }, \"Compare\"), /*#__PURE__*/React.createElement(IonBadge, {\n    id: \"compareBadge\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 41\n    }\n  }, compareProgList.length))), /*#__PURE__*/React.createElement(IonCol, {\n    size: \"2\",\n    sizeSm: \"2\",\n    class: \"ion-text-center\",\n    className: \"studySIMProgListCol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    id: \"filterBtn\",\n    fill: \"clear\",\n    onClick: e => {\n      setShowProgCourseFilterPopover({\n        open: true,\n        event: e.nativeEvent\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    className: \"filterIcon\",\n    size: \"lg\",\n    icon: faFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 41\n    }\n  }))))))), /*#__PURE__*/React.createElement(IonContent, {\n    fullscreen: true,\n    id: \"studySIMProgListContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IonGrid, {\n    id: \"studySIMProgListGrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 21\n    }\n  }, programmes ? programmes.map(programme => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: programme.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IonRow, {\n      className: \"studySIMProgListRow\",\n      class: \"ion-align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(IonCol, {\n      size: \"4\",\n      sizeSm: \"4\",\n      class: \"ion-text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: programme.uniLogo,\n      className: \"studyProgUniImg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"8\",\n      sizeSm: \"8\",\n      className: \"studySIMProgListColDetails\",\n      class: \"ion-text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(IonRow, {\n      className: \"progCourseRow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(IonRouterLink, {\n      id: \"progCourseTitleLink\",\n      href: `/u/study@SIMMain/Study@SIMProgInfo/${programme.id}/${discipline}/${category}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(IonTitle, {\n      className: \"progCourseTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 65\n      }\n    }, programme.programmeTitle)))), /*#__PURE__*/React.createElement(IonRow, {\n      className: \"progCourseRow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(IonCol, {\n      size: \"4\",\n      sizeSm: \"4\",\n      class: \"ion-text-left\",\n      className: \"progCourseAwardingUniCol\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(IonLabel, {\n      className: \"progCourseAwardingUniLabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 65\n      }\n    }, \"Awarded by:\"))), /*#__PURE__*/React.createElement(IonCol, {\n      size: \"8\",\n      sizeSm: \"8\",\n      class: \"ion-text-left\",\n      className: \"progCourseAwardingUniCol\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(IonLabel, {\n      className: \"progCourseAwardingUniName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ion-text-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 65\n      }\n    }, programme.awardedBy)))), /*#__PURE__*/React.createElement(IonRow, {\n      className: \"progCompareBtnRow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(IonCol, {\n      size: \"12\",\n      sizeSm: \"12\",\n      class: \"ion-text-right\",\n      className: \"progCompareBtnCol\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 57\n      }\n    }, compareProgList.includes(programme) ? /*#__PURE__*/React.createElement(IonButton, {\n      className: \"progCompareBtnSelected\",\n      size: \"small\",\n      type: \"submit\",\n      onClick: e => compareProgramme(programme),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 65\n      }\n    }, \"Compared\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        paddingLeft: \"3%\"\n      },\n      icon: faCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 53\n      }\n    })) : /*#__PURE__*/React.createElement(IonButton, {\n      className: \"progCompareBtn\",\n      size: \"small\",\n      type: \"submit\",\n      onClick: e => compareProgramme(programme),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 66\n      }\n    }, \"Compare\")))))));\n  }) : ''), /*#__PURE__*/React.createElement(IonPopover, {\n    id: \"compareProgPopover\",\n    cssClass: \"compareProgPopover\",\n    isOpen: showCompareProgPopover.open,\n    event: showCompareProgPopover.event,\n    onDidDismiss: e => setShowCompareProgPopover({\n      open: false,\n      event: undefined\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CompareProgPopoverContent, {\n    compareProgList: compareProgList,\n    removeProg: removeProg,\n    removeAllProg: removeAllProg,\n    viewResults: () => console.log('Add viewResults function here'),\n    href: `/u/study@SIMMain/${props.match.params.discipline}/${props.match.params.category}/courseComparator`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(IonPopover, {\n    id: \"progCourseFilterPopover\",\n    cssClass: \"progCourseFilterPopover\",\n    isOpen: showProgCourseFilterPopover.open,\n    event: showProgCourseFilterPopover.event,\n    onDidDismiss: e => setShowProgCourseFilterPopover({\n      open: false,\n      event: undefined\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FilterPopoverContent, {\n    filterFunction: filterProgrammes,\n    programmes: programmes,\n    filterFor: \"study@SIM\",\n    filterCondition: filterCondition,\n    onUpdateFilter: onUpdateFilter,\n    discipline: discipline,\n    category: category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default StudySIMProgList;","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/pages/Study@SIM/Study@SIMProgList.tsx"],"names":["IonAlert","IonBadge","IonButton","IonCol","IonContent","IonGrid","IonHeader","IonLabel","IonPage","IonPopover","IonRouterLink","IonRow","IonTitle","IonToolbar","React","useState","useEffect","FontAwesomeIcon","faCheck","faFilter","TopNav","CompareProgPopoverContent","FilterPopoverContent","db","StudySIMProgList","props","console","log","match","discipline","params","category","disciplineName","setDisciplineName","filterCondition","setFilterCondition","mos","uni","acadLvl","entry","subDisc","onUpdateFilter","mosFilter","discFilter","uniFilter","acadLvlFilter","entryFilter","subDiscFilter","prevState","filter","Object","keys","map","key","programmes","setProgrammes","compareProgList","setCompareProgList","allDisc","programme","disc","data","push","uniqueDisc","Set","window","sessionStorage","setItem","JSON","stringify","compareProgramme","newProgList","newProgID","id","length","includes","updatedProgList","existingProg","setShowCompareProgAlert","filterProgrammes","condition","initialList","filteredList","segmentFilter","collection","get","then","snapshot","docs","forEach","doc","entries","value","modeOfStudy","fullTime","partTime","concat","discFiltered","uniFiltered","awardedBy","acadFiltered","academicLevel","entryFiltered","entryQualifications","aLevel","oLevel","diploma","degree","subDiscFiltered","subDiscipline","removeProg","removeAllProg","showCompareProgPopover","setShowCompareProgPopover","open","event","undefined","showCompareProgAlert","showProgCourseFilterPopover","setShowProgCourseFilterPopover","fetchData","where","catch","error","sessionList","parse","padding","paddingLeft","e","nativeEvent","uniLogo","programmeTitle"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,SAA7B,EAAwCC,MAAxC,EAAgDC,UAAhD,EAA4DC,OAA5D,EAAqEC,SAArE,EAAgFC,QAAhF,EAA0FC,OAA1F,EAAmGC,UAAnG,EAA+GC,aAA/G,EAA8HC,MAA9H,EAAsIC,QAAtI,EAAgJC,UAAhJ,QAAkK,cAAlK;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAAuD,OAAvD;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,mCAAlC;AAEA,OAAO,sBAAP;AACA,OAAO,iCAAP;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,yBAAP,MAAsC,sDAAtC;AACA,OAAOC,oBAAP,MAAiC,uCAAjC;AACA,SAASC,EAAT,QAAmB,gBAAnB;;AAeA,MAAMC,gBAA4D,GAAIC,KAAD,IAAW;AAE5EC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAYH,KAAlB;AACA,QAAMI,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaD,UAAhC;AACA,QAAME,QAAQ,GAAGH,KAAK,CAACE,MAAN,CAAaC,QAA9B;AAEA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,CACjD,wBADiD,EAEjD,UAFiD,EAGjD,uBAHiD,EAIjD,SAJiD,EAKjD,WALiD,CAAD,CAApD;AAQA,QAAM,CAACmB,eAAD,EAAkBC,kBAAlB,IAAwCpB,QAAQ,CAAkB;AACpEqB,IAAAA,GAAG,EAAE,CAAC,cAAD,EAAiB,UAAjB,EAA6B,UAA7B,CAD+D;AAEpEP,IAAAA,UAAU,EAAE,CAACA,UAAD,CAFwD;AAGpEQ,IAAAA,GAAG,EAAE,EAH+D;AAIpEC,IAAAA,OAAO,EAAE,CAACP,QAAD,CAJ2D;AAKpEQ,IAAAA,KAAK,EAAE,EAL6D;AAMpEC,IAAAA,OAAO,EAAE;AAN2D,GAAlB,CAAtD;;AASA,QAAMC,cAAc,GAAG,CAACC,SAAD,EAAsBC,UAAtB,EAA4CC,SAA5C,EAAiEC,aAAjE,EAA0FC,WAA1F,EAAiHC,aAAjH,KAA6I;AAChKZ,IAAAA,kBAAkB,CAACa,SAAS,IAAI;AAC5B,UAAIC,MAAM,GAAG,EAAE,GAAGD;AAAL,OAAb;AACAE,MAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,GAApB,CAAwBC,GAAG,IAAI;AAC3B,YAAIA,GAAG,IAAI,KAAX,EACIJ,MAAM,CAACI,GAAD,CAAN,GAAcX,SAAd;AACJ,YAAIW,GAAG,IAAI,YAAX,EACIJ,MAAM,CAACI,GAAD,CAAN,GAAcV,UAAd;AACJ,YAAIU,GAAG,IAAI,KAAX,EACIJ,MAAM,CAACI,GAAD,CAAN,GAAcT,SAAd;AACJ,YAAIS,GAAG,IAAI,SAAX,EACIJ,MAAM,CAACI,GAAD,CAAN,GAAcR,aAAd;AACJ,YAAIQ,GAAG,IAAI,OAAX,EACIJ,MAAM,CAACI,GAAD,CAAN,GAAcP,WAAd;AACJ,YAAIO,GAAG,IAAI,SAAX,EACIJ,MAAM,CAACI,GAAD,CAAN,GAAcN,aAAd;AACP,OAbD;AAcA,aAAOE,MAAP;AACH,KAjBiB,CAAlB;AAkBH,GAnBD,CAxB4E,CA6C5E;;;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BxC,QAAQ,CAAc,EAAd,CAA5C;AACA,QAAM,CAACyC,eAAD,EAAkBC,kBAAlB,IAAwC1C,QAAQ,CAAc,EAAd,CAAtD,CA/C4E,CAiD5E;;AACA,QAAM2C,OAAO,GAAGJ,UAAU,CAACF,GAAX,CAAeO,SAAS,IAAIA,SAAS,CAAC9B,UAAtC,CAAhB;AACA,QAAM+B,IAAc,GAAG,EAAvB;AACAF,EAAAA,OAAO,CAACN,GAAR,CAAYS,IAAI,IAAIA,IAAI,CAACT,GAAL,CAASS,IAAI,IAAID,IAAI,CAACE,IAAL,CAAUD,IAAV,CAAjB,CAApB;AACA,MAAIE,UAAoB,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQJ,IAAR,CAAJ,CAA3B,CArD4E,CAuD5E;;AACA5C,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTiD,MAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,iBAA9B,EAAiDC,IAAI,CAACC,SAAL,CAAeb,eAAf,CAAjD;AACH,KAFD;AAGH,GAJQ,EAIN,CAACA,eAAD,CAJM,CAAT;AAMA;AAAC;AAA0E;;AAC3E,QAAMc,gBAAgB,GAAIX,SAAD,IAA0B;AAC/C,UAAMY,WAAW,GAAG,CAAC,GAAGf,eAAJ,CAApB;AACA,UAAMgB,SAAS,GAAGb,SAAS,CAACc,EAA5B;;AAEA,QAAIF,WAAW,CAACG,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,UAAIH,WAAW,CAACI,QAAZ,CAAqBhB,SAArB,CAAJ,EAAqC;AACjC,cAAMiB,eAAe,GAAGL,WAAW,CAACtB,MAAZ,CAAmB4B,YAAY,IAAI;AAAE,iBAAOA,YAAY,CAACJ,EAAb,IAAmBD,SAA1B;AAAqC,SAA1E,CAAxB;AACAf,QAAAA,kBAAkB,CAACmB,eAAD,CAAlB;AACH,OAHD,MAIK;AACDL,QAAAA,WAAW,CAACT,IAAZ,CAAiBH,SAAjB;AACAF,QAAAA,kBAAkB,CAACc,WAAD,CAAlB;AACH;AACJ,KATD,MAUK;AAED,UAAIA,WAAW,CAACI,QAAZ,CAAqBhB,SAArB,CAAJ,EAAqC;AACjC,cAAMiB,eAAe,GAAGL,WAAW,CAACtB,MAAZ,CAAmB4B,YAAY,IAAI;AAAE,iBAAOA,YAAY,CAACJ,EAAb,IAAmBD,SAA1B;AAAqC,SAA1E,CAAxB;AACAf,QAAAA,kBAAkB,CAACmB,eAAD,CAAlB;AACH,OAHD,MAIK;AACDE,QAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACH;AAEJ;AACJ,GAzBD;;AA2BA,QAAMC,gBAAgB,GAAG,MAAOC,SAAP,IAAsC;AAE3D,UAAMC,WAAwB,GAAG,EAAjC;AACA,QAAIC,YAAyB,GAAG,EAAhC;AACA,QAAIC,aAA0B,GAAG,EAAjC;AACAzD,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCyC,IAAI,CAACC,SAAL,CAAeW,SAAf,CAA7C;AACA,UAAMzD,EAAE,CAAC6D,UAAH,CAAc,gBAAd,EACDC,GADC,GAEDC,IAFC,CAEIC,QAAQ,IAAI;AACdA,MAAAA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAuBC,GAAD,IAAc;AAChC,cAAM7B,IAAI,GAAG6B,GAAG,CAAC7B,IAAJ,EAAb;AACAoB,QAAAA,WAAW,CAACnB,IAAZ,CAAiBD,IAAjB;AACH,OAHD;AAIH,KAPC,CAAN;AAQAnC,IAAAA,OAAO,CAACC,GAAR,CAAYsD,WAAW,CAACP,MAAZ,GAAqBN,IAAI,CAACC,SAAL,CAAeY,WAAf,CAAjC;AACA/B,IAAAA,MAAM,CAACyC,OAAP,CAAeX,SAAf,EAA0B5B,GAA1B,CAA8B,CAAC,CAACC,GAAD,EAAMuC,KAAN,CAAD,KAAkB;AAC5C,UAAIvC,GAAG,IAAI,KAAX,EAAkB;AACd,YAAIuC,KAAK,CAAClB,MAAN,GAAe,CAAf,IAAoBkB,KAAK,CAAClB,MAAN,GAAe,CAAvC,EAA0C;AACtCkB,UAAAA,KAAK,CAACH,OAAN,CAAeG,KAAD,IAAmB;AAC7B,gBAAIA,KAAK,IAAI,cAAb,EAA6B;AACzBT,cAAAA,aAAa,GAAGF,WAAW,CAAChC,MAAZ,CAAmBU,SAAS,IAAIA,SAAS,CAACkC,WAAV,CAAsBC,QAAtB,IAAkCnC,SAAS,CAACkC,WAAV,CAAsBE,QAAxF,CAAhB;AACArE,cAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCwD,aAAa,CAACT,MAA3D;AACAQ,cAAAA,YAAY,GAAGA,YAAY,CAACc,MAAb,CAAoBb,aAApB,CAAf;AACAzD,cAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BuD,YAAY,CAACR,MAAvC,GAAgDN,IAAI,CAACC,SAAL,CAAea,YAAf,CAA5D;AAGH;;AACD,gBAAIU,KAAK,IAAI,UAAb,EAAyB;AACrBT,cAAAA,aAAa,GAAGF,WAAW,CAAChC,MAAZ,CAAmBU,SAAS,IAAIA,SAAS,CAACkC,WAAV,CAAsBC,QAAtB,IAAkC,CAACnC,SAAS,CAACkC,WAAV,CAAsBE,QAAzF,CAAhB;AACArE,cAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBwD,aAAa,CAACT,MAAlD;AACAQ,cAAAA,YAAY,GAAGA,YAAY,CAACc,MAAb,CAAoBb,aAApB,CAAf;AAEH;;AACD,gBAAIS,KAAK,IAAI,UAAb,EAAyB;AACrBT,cAAAA,aAAa,GAAGF,WAAW,CAAChC,MAAZ,CAAmBU,SAAS,IAAI,CAACA,SAAS,CAACkC,WAAV,CAAsBC,QAAvB,IAAmCnC,SAAS,CAACkC,WAAV,CAAsBE,QAAzF,CAAhB;AACArE,cAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBwD,aAAa,CAACT,MAAlD;AACAQ,cAAAA,YAAY,GAAGA,YAAY,CAACc,MAAb,CAAoBb,aAApB,CAAf;AAEH;AACJ,WArBD;AAsBH,SAvBD,MAwBK,IAAIS,KAAK,CAAClB,MAAN,IAAgB,CAAhB,IAAqBkB,KAAK,CAAClB,MAAN,IAAgB,CAAzC,EAA4C;AAC7CQ,UAAAA,YAAY,GAAGD,WAAf;AACH;AACJ,OA5BD,MA6BK,IAAI5B,GAAG,IAAI,YAAX,EAAyB;AAC1B,YAAI4C,YAAyB,GAAG,EAAhC;;AACA,YAAIL,KAAK,CAAClB,MAAN,GAAe,CAAf,IAAoBkB,KAAK,CAAClB,MAAN,IAAgB,CAAxC,EAA2C;AACvChD,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAiE,UAAAA,KAAK,CAACH,OAAN,CAAeG,KAAD,IAAmB;AAC7BT,YAAAA,aAAa,GAAGD,YAAY,CAACjC,MAAb,CAAoBU,SAAS,IAAIA,SAAS,CAAC9B,UAAV,CAAqB8C,QAArB,CAA8BiB,KAA9B,CAAjC,CAAhB;AACAlE,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBiE,KAAzB,GAAiCT,aAAa,CAACT,MAA/C,GAAwDN,IAAI,CAACC,SAAL,CAAec,aAAf,CAApE;AACAc,YAAAA,YAAY,GAAGA,YAAY,CAACD,MAAb,CAAoBb,aAApB,CAAf;AACH,WAJD;AAKAD,UAAAA,YAAY,GAAGe,YAAf;AACH;AAEJ,OAZI,MAcA,IAAI5C,GAAG,IAAI,KAAX,EAAkB;AACnB,YAAI6C,WAAwB,GAAG,EAA/B;;AACA,YAAIN,KAAK,CAAClB,MAAN,GAAe,CAAnB,EAAsB;AAClBkB,UAAAA,KAAK,CAACH,OAAN,CAAeG,KAAD,IAAmB;AAC7BT,YAAAA,aAAa,GAAGD,YAAY,CAACjC,MAAb,CAAoBU,SAAS,IAAIA,SAAS,CAACwC,SAAV,IAAuBP,KAAxD,CAAhB;AACAlE,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBiE,KAAlB,GAA0BT,aAAa,CAACT,MAAxC,GAAiDN,IAAI,CAACC,SAAL,CAAec,aAAf,CAA7D;AACAe,YAAAA,WAAW,GAAGA,WAAW,CAACF,MAAZ,CAAmBb,aAAnB,CAAd,CAH6B,CAI7B;AACH,WALD;AAMAD,UAAAA,YAAY,GAAGgB,WAAf;AACH;AACJ,OAXI,MAYA,IAAI7C,GAAG,IAAI,SAAX,EAAsB;AACvB,YAAI+C,YAAyB,GAAG,EAAhC;;AACA,YAAIR,KAAK,CAAClB,MAAN,GAAe,CAAnB,EAAsB;AAClBkB,UAAAA,KAAK,CAACH,OAAN,CAAeG,KAAD,IAAmB;AAC7BT,YAAAA,aAAa,GAAGD,YAAY,CAACjC,MAAb,CAAoBU,SAAS,IAAIA,SAAS,CAAC0C,aAAV,IAA2BT,KAA5D,CAAhB;AACAlE,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBiE,KAAtB,GAA8BT,aAAa,CAACT,MAA5C,GAAqDN,IAAI,CAACC,SAAL,CAAec,aAAf,CAAjE;AACAiB,YAAAA,YAAY,GAAGA,YAAY,CAACJ,MAAb,CAAoBb,aAApB,CAAf;AACH,WAJD;AAKAD,UAAAA,YAAY,GAAGkB,YAAf;AACH;AACJ,OAVI,MAYA,IAAI/C,GAAG,IAAI,OAAX,EAAoB;AACrB,YAAIiD,aAA0B,GAAG,EAAjC;;AACA,YAAIV,KAAK,CAAClB,MAAN,GAAe,CAAnB,EAAsB;AAClBkB,UAAAA,KAAK,CAACH,OAAN,CAAeG,KAAD,IAAmB;AAC7B,gBAAIA,KAAK,IAAI,QAAb,EAAuB;AACnBT,cAAAA,aAAa,GAAGD,YAAY,CAACjC,MAAb,CAAoBU,SAAS,IAAIA,SAAS,CAAC4C,mBAAV,CAA8BC,MAA/D,CAAhB;AACA9E,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAciE,KAAd,GAAsBT,aAAa,CAACT,MAApC,GAA6CN,IAAI,CAACC,SAAL,CAAec,aAAf,CAAzD;AACAmB,cAAAA,aAAa,GAAGA,aAAa,CAACN,MAAd,CAAqBb,aAArB,CAAhB;AACH,aAJD,MAKK,IAAIS,KAAK,IAAI,QAAb,EAAuB;AACxBT,cAAAA,aAAa,GAAGD,YAAY,CAACjC,MAAb,CAAoBU,SAAS,IAAIA,SAAS,CAAC4C,mBAAV,CAA8BE,MAA/D,CAAhB;AACA/E,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAciE,KAAd,GAAsBT,aAAa,CAACT,MAApC,GAA6CN,IAAI,CAACC,SAAL,CAAec,aAAf,CAAzD;AACAmB,cAAAA,aAAa,GAAGA,aAAa,CAACN,MAAd,CAAqBb,aAArB,CAAhB;AACH,aAJI,MAKA,IAAIS,KAAK,IAAI,SAAb,EAAwB;AACzBT,cAAAA,aAAa,GAAGD,YAAY,CAACjC,MAAb,CAAoBU,SAAS,IAAIA,SAAS,CAAC4C,mBAAV,CAA8BG,OAA/D,CAAhB;AACAhF,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAciE,KAAd,GAAsBT,aAAa,CAACT,MAApC,GAA6CN,IAAI,CAACC,SAAL,CAAec,aAAf,CAAzD;AACAmB,cAAAA,aAAa,GAAGA,aAAa,CAACN,MAAd,CAAqBb,aAArB,CAAhB;AACH,aAJI,MAKA,IAAIS,KAAK,IAAI,QAAb,EAAuB;AACxBT,cAAAA,aAAa,GAAGD,YAAY,CAACjC,MAAb,CAAoBU,SAAS,IAAIA,SAAS,CAAC4C,mBAAV,CAA8BI,MAA/D,CAAhB;AACAjF,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAciE,KAAd,GAAsBT,aAAa,CAACT,MAApC,GAA6CN,IAAI,CAACC,SAAL,CAAec,aAAf,CAAzD;AACAmB,cAAAA,aAAa,GAAGA,aAAa,CAACN,MAAd,CAAqBb,aAArB,CAAhB;AACH;AACJ,WArBD;AAsBAD,UAAAA,YAAY,GAAGoB,aAAf;AACH;AACJ,OA3BI,MA4BA,IAAIjD,GAAG,IAAI,SAAX,EAAsB;AACvB,YAAIuD,eAA4B,GAAG,EAAnC;;AACA,YAAIhB,KAAK,CAAClB,MAAN,GAAe,CAAnB,EAAsB;AAClBkB,UAAAA,KAAK,CAACH,OAAN,CAAeG,KAAD,IAAmB;AAC7BT,YAAAA,aAAa,GAAGD,YAAY,CAACjC,MAAb,CAAoBU,SAAS,IAAIA,SAAS,CAACkD,aAAV,CAAwBlC,QAAxB,CAAiCiB,KAAjC,CAAjC,CAAhB;AACAlE,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBiE,KAArB,GAA6BT,aAAa,CAACT,MAA3C,GAAoDN,IAAI,CAACC,SAAL,CAAec,aAAf,CAAhE;AACAyB,YAAAA,eAAe,GAAGA,eAAe,CAACZ,MAAhB,CAAuBb,aAAvB,CAAlB;AACH,WAJD;AAKAD,UAAAA,YAAY,GAAG0B,eAAf;AAEH;AACJ;AACJ,KA5GD,CA6GI;AA7GJ;AA+GAlF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBuD,YAAY,CAACR,MAA/B,GAAwCN,IAAI,CAACC,SAAL,CAAea,YAAf,CAApD;AACA3B,IAAAA,aAAa,CAAC2B,YAAD,CAAb;AAEH,GAjID;AAmIA;;;AACA,QAAM4B,UAAU,GAAInD,SAAD,IAA0B;AACzC,UAAMY,WAAW,GAAG,CAAC,GAAGf,eAAJ,CAApB;AACA,UAAMgB,SAAS,GAAGb,SAAS,CAACc,EAA5B;AACA,UAAMG,eAAe,GAAGL,WAAW,CAACtB,MAAZ,CAAmBU,SAAS,IAAI;AAAE,aAAOA,SAAS,CAACc,EAAV,IAAgBD,SAAvB;AAAkC,KAApE,CAAxB;AACAf,IAAAA,kBAAkB,CAACmB,eAAD,CAAlB;AAEH,GAND;AAOA;;;AACA,QAAMmC,aAAa,GAAIzD,UAAD,IAA6B;AAC/C,UAAMiB,WAAW,GAAG,CAAC,GAAGf,eAAJ,CAApB;AACA,UAAMoB,eAAe,GAAGL,WAAW,CAACtB,MAAZ,CAAmBU,SAAS,IAAI;AAAE,aAAOA,SAAS,CAACc,EAAV,IAAgB,EAAvB;AAA2B,KAA7D,CAAxB;AACAhB,IAAAA,kBAAkB,CAACmB,eAAD,CAAlB;AAEH,GALD;;AAQA;AAAC;AAAoC;AACrC,QAAM,CAACoC,sBAAD,EAAyBC,yBAAzB,IAAsDlG,QAAQ,CAA8C;AAC9GmG,IAAAA,IAAI,EAAE,KADwG;AAE9GC,IAAAA,KAAK,EAAEC;AAFuG,GAA9C,CAApE;AAKA;AAAC;AAA8C;AAC/C,QAAM,CAACC,oBAAD,EAAuBvC,uBAAvB,IAAkD/D,QAAQ,CAAC,KAAD,CAAhE;AAEA;AAAC;AAAmC;AACpC,QAAM,CAACuG,2BAAD,EAA8BC,8BAA9B,IAAgExG,QAAQ,CAA8C;AACxHmG,IAAAA,IAAI,EAAE,KADkH;AAExHC,IAAAA,KAAK,EAAEC;AAFiH,GAA9C,CAA9E;AAKA;AAAC;AAA4B;AAC7BpG,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA;AAAC;AAA6C;;AAC9C,UAAM6F,SAAS,GAAG,OAAO3F,UAAP,EAA2BE,QAA3B,KAAgD;AAC9D,YAAMuB,UAAe,GAAG,EAAxB;AACA,YAAM/B,EAAE,CAAC6D,UAAH,CAAc,gBAAd,EACDqC,KADC,CACK,YADL,EACmB,gBADnB,EACqC7F,KAAK,CAACE,MAAN,CAAaD,UADlD,EAED4F,KAFC,CAEK,eAFL,EAEsB,IAFtB,EAE4B7F,KAAK,CAACE,MAAN,CAAaC,QAFzC,EAGDsD,GAHC,GAIDC,IAJC,CAIKC,QAAD,IAAmB;AACrBA,QAAAA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAuBC,GAAD,IAAc;AAChC,gBAAM7B,IAAI,GAAG6B,GAAG,CAAC7B,IAAJ,EAAb;AACAP,UAAAA,UAAU,CAACQ,IAAX,CAAgBD,IAAhB;AACAnC,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBkC,IAArC;AACH,SAJD;AAKAN,QAAAA,aAAa,CAACD,UAAD,CAAb;AACH,OAXC,EAWCoE,KAXD,CAWQC,KAAD,IAAWjG,OAAO,CAACC,GAAR,CAAYgG,KAAZ,CAXlB,CAAN;AAaH,KAfD;;AAiBAH,IAAAA,SAAS,CAAC5F,KAAK,CAACE,MAAN,CAAaD,UAAd,EAA0BD,KAAK,CAACE,MAAN,CAAaC,QAAvC,CAAT;AAEA,UAAM6F,WAAwB,GAAG3D,MAAM,CAACC,cAAP,CAAsBV,eAAtB,GAAwCY,IAAI,CAACyD,KAAL,CAAW5D,MAAM,CAACC,cAAP,CAAsBV,eAAjC,CAAxC,GAA4F,EAA7H;AACA9B,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BiG,WAAzC;AACAnE,IAAAA,kBAAkB,CAACmE,WAAD,CAAlB;AACH,GAzBQ,EAyBN,EAzBM,CAAT;AA2BA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKlG,OAAO,CAACC,GAAR,CAAY,aAAaiC,IAAb,GAAoBA,IAAI,CAACc,MAArC,CADL,EAEKhD,OAAO,CAACC,GAAR,CAAY,mBAAmBoC,UAA/B,CAFL,eAGI,oBAAC,QAAD;AACI,IAAA,MAAM,EAAEsD,oBADZ;AAEI,IAAA,YAAY,EAAE,MAAMvC,uBAAuB,CAAC,KAAD,CAF/C;AAGI,IAAA,QAAQ,EAAC,UAHb;AAII,IAAA,IAAI,EAAC,IAJT;AAKI,IAAA,OAAO,EAAE,oGALb;AAMI,IAAA,OAAO,EAAE,CAAC,IAAD,CANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAaI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,WAAd;AAA0B,IAAA,KAAK,EAAC,kBAAhC;AAAmD,IAAA,SAAS,EAAE,IAA9D;AAAoE,IAAA,SAAS,EAAE,IAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAGI,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAAEgD,MAAAA,OAAO,EAAE;AAAX,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,2BAAX;AAAuC,IAAA,KAAK,EAAC,wBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,KAAK,EAAC,eAAlC;AAAkD,IAAA,SAAS,EAAC,qBAA5D;AAAkF,IAAA,KAAK,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhE,UAAU,CAACW,MAAX,IAAqB,CAArB,GAAyBX,UAAU,CAACX,GAAX,CAAeQ,IAAI,IAAI;AAC7C,wBAAQ;AAAK,MAAA,GAAG,EAAEA,IAAV;AAAgB,MAAA,SAAS,EAAC,eAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2CA,IAA3C,CAAR;AACH,GAFyB,CAAzB,GAEI,EAHT,CADJ,CADJ,eAUI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,KAAK,EAAC,gBAAlC;AAAmD,IAAA,SAAS,EAAC,qBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,EAAE,EAAC,YAAd;AAA2B,IAAA,IAAI,EAAC,OAAhC;AAAwC,IAAA,OAAO,EAAGoE,CAAD,IAAO;AACpD,UAAIxE,eAAe,CAACkB,MAAhB,GAAyB,CAAzB,IAA8BlB,eAAe,CAACkB,MAAhB,GAAyB,CAA3D,EAA8D;AAC1DI,QAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACH,OAFD,MAEO;AACHmC,QAAAA,yBAAyB,CAAC;AAAEC,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,KAAK,EAAEa,CAAC,CAACC;AAAvB,SAAD,CAAzB;AACH;AACJ,KAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQI,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARJ,eASI,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BzE,eAAe,CAACkB,MAA7C,CATJ,CADJ,CAVJ,eAwBI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC,GAAxB;AAA4B,IAAA,KAAK,EAAC,iBAAlC;AAAoD,IAAA,SAAS,EAAC,qBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,EAAE,EAAC,WAAd;AAA0B,IAAA,IAAI,EAAC,OAA/B;AAAuC,IAAA,OAAO,EAAGsD,CAAD,IAAO;AACnDT,MAAAA,8BAA8B,CAAC;AAAEL,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,KAAK,EAAEa,CAAC,CAACC;AAAvB,OAAD,CAA9B;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAC,YAA3B;AAAwC,IAAA,IAAI,EAAC,IAA7C;AAAkD,IAAA,IAAI,EAAE9G,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,CAxBJ,CADJ,CADJ,CAHJ,CADJ,eA4CI,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAE,IAAxB;AAA8B,IAAA,EAAE,EAAC,yBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAC,sBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKmC,UAAU,GACPA,UAAU,CAACF,GAAX,CAAgBO,SAAD,IAA0B;AACrC,wBACI;AAAK,MAAA,GAAG,EAAEA,SAAS,CAACc,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,uDACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,qBAAlB;AAAwC,MAAA,KAAK,EAAC,wBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,GAAb;AAAiB,MAAA,MAAM,EAAC,GAAxB;AAA4B,MAAA,KAAK,EAAC,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAEd,SAAS,CAACuE,OAApB;AAA6B,MAAA,SAAS,EAAC,iBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAKI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,GAAb;AAAiB,MAAA,MAAM,EAAC,GAAxB;AAA4B,MAAA,SAAS,EAAC,4BAAtC;AAAmE,MAAA,KAAK,EAAC,eAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,aAAD;AAAe,MAAA,EAAE,EAAC,qBAAlB;AAAwC,MAAA,IAAI,EAAG,sCAAqCvE,SAAS,CAACc,EAAG,IAAG5C,UAAW,IAAGE,QAAS,EAA3H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAC,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgC4B,SAAS,CAACwE,cAA1C,CADJ,CADJ,CAFJ,CAFJ,eAYI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,GAAb;AAAiB,MAAA,MAAM,EAAC,GAAxB;AAA4B,MAAA,KAAK,EAAC,eAAlC;AAAkD,MAAA,SAAS,EAAC,0BAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAC,4BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CADJ,CADJ,eAOI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,GAAb;AAAiB,MAAA,MAAM,EAAC,GAAxB;AAA4B,MAAA,KAAK,EAAC,eAAlC;AAAkD,MAAA,SAAS,EAAC,0BAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAC,2BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCxE,SAAS,CAACwC,SAA1C,CADJ,CADJ,CAPJ,CAZJ,eA0BI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,IAAb;AAAkB,MAAA,MAAM,EAAC,IAAzB;AAA8B,MAAA,KAAK,EAAC,gBAApC;AAAqD,MAAA,SAAS,EAAC,mBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK3C,eAAe,CAACmB,QAAhB,CAAyBhB,SAAzB,iBACG,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,wBAArB;AAA8C,MAAA,IAAI,EAAC,OAAnD;AAA2D,MAAA,IAAI,EAAC,QAAhE;AAAyE,MAAA,OAAO,EAAEqE,CAAC,IAAI1D,gBAAgB,CAACX,SAAD,CAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACZ,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAE;AAAEoE,QAAAA,WAAW,EAAE;AAAf,OAAxB;AAA+C,MAAA,IAAI,EAAE7G,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADY,CADH,gBAKI,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,gBAArB;AAAsC,MAAA,IAAI,EAAC,OAA3C;AAAmD,MAAA,IAAI,EAAC,QAAxD;AAAiE,MAAA,OAAO,EAAE8G,CAAC,IAAI1D,gBAAgB,CAACX,SAAD,CAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANT,CADJ,CA1BJ,CALJ,CADJ,CADJ,CADJ;AAkDH,GAnDD,CADO,GAsDL,EAzDV,CADJ,eAgEI,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAC,oBAAf;AACI,IAAA,QAAQ,EAAC,oBADb;AAEI,IAAA,MAAM,EAAEqD,sBAAsB,CAACE,IAFnC;AAGI,IAAA,KAAK,EAAEF,sBAAsB,CAACG,KAHlC;AAII,IAAA,YAAY,EAAEa,CAAC,IAAIf,yBAAyB,CAAC;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAEC;AAAtB,KAAD,CAJhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,yBAAD;AAA2B,IAAA,eAAe,EAAE5D,eAA5C;AAA6D,IAAA,UAAU,EAAEsD,UAAzE;AAAqF,IAAA,aAAa,EAAEC,aAApG;AAAmH,IAAA,WAAW,EAAE,MAAOrF,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAAvI;AACI,IAAA,IAAI,EAAG,oBAAmBF,KAAK,CAACG,KAAN,CAAYE,MAAZ,CAAmBD,UAAW,IAAGJ,KAAK,CAACG,KAAN,CAAYE,MAAZ,CAAmBC,QAAS,mBAD3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CAhEJ,eA6EI,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAC,yBAAf;AACI,IAAA,QAAQ,EAAC,yBADb;AAEI,IAAA,MAAM,EAAEuF,2BAA2B,CAACJ,IAFxC;AAGI,IAAA,KAAK,EAAEI,2BAA2B,CAACH,KAHvC;AAII,IAAA,YAAY,EAAEa,CAAC,IAAIT,8BAA8B,CAAC;AAAEL,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAEC;AAAtB,KAAD,CAJrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI,oBAAC,oBAAD;AAAsB,IAAA,cAAc,EAAErC,gBAAtC;AAAwD,IAAA,UAAU,EAAEzB,UAApE;AAAgF,IAAA,SAAS,EAAE,WAA3F;AAAwG,IAAA,eAAe,EAAEpB,eAAzH;AAA0I,IAAA,cAAc,EAAEO,cAA1J;AAA0K,IAAA,UAAU,EAAEZ,UAAtL;AAAkM,IAAA,QAAQ,EAAEE,QAA5M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CA7EJ,CA5CJ,CAbJ,CADJ;AAkLH,CA3cD;;AA6cA,eAAeP,gBAAf","sourcesContent":["import { IonAlert, IonBadge, IonButton, IonCol, IonContent, IonGrid, IonHeader, IonLabel, IonPage, IonPopover, IonRouterLink, IonRow, IonTitle, IonToolbar } from '@ionic/react';\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faFilter } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport '../../css/Global.css';\r\nimport '../../css/Study@SIMProgList.css';\r\nimport TopNav from '../../components/TopNav';\r\nimport CompareProgPopoverContent from '../../components/Study@SIM/CompareProgPopoverContent';\r\nimport FilterPopoverContent from '../../components/FilterPopoverContent';\r\nimport { db } from '../../firebase';\r\nimport { Programme } from './Study@SIMProgInfo';\r\nimport { FilterCondition } from '../../components/FilterPopoverContent'\r\nimport { filter } from 'ionicons/icons';\r\nimport { ObjectFlags } from 'typescript';\r\n\r\ninterface StudySIMProgList_Props extends RouteComponentProps<{\r\n    discipline: string;\r\n    category: string;\r\n}> { }\r\n\r\ninterface myProps {\r\n    compareProgList: Programme[],\r\n    onCompareProgListChange: (programmes: Programme[]) => void\r\n}\r\nconst StudySIMProgList: React.FC<myProps & StudySIMProgList_Props> = (props) => {\r\n\r\n    console.log(props);\r\n    const { match } = props;\r\n    const discipline = match.params.discipline\r\n    const category = match.params.category\r\n\r\n    const [disciplineName, setDisciplineName] = useState([\r\n        'Arts & Social Sciences',\r\n        'Business',\r\n        'IT & Computer Science',\r\n        'Nursing',\r\n        'Specialty'\r\n    ]);\r\n\r\n    const [filterCondition, setFilterCondition] = useState<FilterCondition>({\r\n        mos: ['fullPartTime', 'partTime', 'fullTime'],\r\n        discipline: [discipline],\r\n        uni: [],\r\n        acadLvl: [category],\r\n        entry: [],\r\n        subDisc: []\r\n    })\r\n\r\n    const onUpdateFilter = (mosFilter: string[], discFilter: string[], uniFilter: string[], acadLvlFilter: string[], entryFilter: string[], subDiscFilter: string[]) => {\r\n        setFilterCondition(prevState => {\r\n            let filter = { ...prevState };\r\n            Object.keys(filter).map(key => {\r\n                if (key == 'mos')\r\n                    filter[key] = mosFilter;\r\n                if (key == 'discipline')\r\n                    filter[key] = discFilter;\r\n                if (key == 'uni')\r\n                    filter[key] = uniFilter;\r\n                if (key == 'acadLvl')\r\n                    filter[key] = acadLvlFilter;\r\n                if (key == 'entry')\r\n                    filter[key] = entryFilter;\r\n                if (key == 'subDisc')\r\n                    filter[key] = subDiscFilter;\r\n            })\r\n            return filter;\r\n        })\r\n    }\r\n\r\n    //programmes to be rendered and the comparepopover list\r\n    const [programmes, setProgrammes] = useState<Programme[]>([])\r\n    const [compareProgList, setCompareProgList] = useState<Programme[]>([])\r\n\r\n    //To get the unique disciplines for rendering at the header\r\n    const allDisc = programmes.map(programme => programme.discipline)\r\n    const disc: string[] = []\r\n    allDisc.map(data => data.map(data => disc.push(data)))\r\n    let uniqueDisc: string[] = [...new Set(disc)]\r\n\r\n    //For storing the compare list into session\r\n    useEffect(() => {\r\n        return () => {\r\n            window.sessionStorage.setItem(\"compareProgList\", JSON.stringify(compareProgList));\r\n        }\r\n    }, [compareProgList])\r\n\r\n    {/* Adding programme for comparison - Need to be generated dynamically */ }\r\n    const compareProgramme = (programme: Programme) => {\r\n        const newProgList = [...compareProgList]\r\n        const newProgID = programme.id\r\n\r\n        if (newProgList.length < 3) {\r\n            if (newProgList.includes(programme)) {\r\n                const updatedProgList = newProgList.filter(existingProg => { return existingProg.id != newProgID })\r\n                setCompareProgList(updatedProgList)\r\n            }\r\n            else {\r\n                newProgList.push(programme)\r\n                setCompareProgList(newProgList)\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (newProgList.includes(programme)) {\r\n                const updatedProgList = newProgList.filter(existingProg => { return existingProg.id != newProgID })\r\n                setCompareProgList(updatedProgList)\r\n            }\r\n            else {\r\n                setShowCompareProgAlert(true);\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    const filterProgrammes = async (condition: FilterCondition) => {\r\n\r\n        const initialList: Programme[] = []\r\n        let filteredList: Programme[] = []\r\n        let segmentFilter: Programme[] = []\r\n        console.log(\"In filterProgrammes, inputs:\" + JSON.stringify(condition))\r\n        await db.collection('TestProgrammes')\r\n            .get()\r\n            .then(snapshot => {\r\n                snapshot.docs.forEach((doc: any) => {\r\n                    const data = doc.data()\r\n                    initialList.push(data)\r\n                })\r\n            })\r\n        console.log(initialList.length + JSON.stringify(initialList))\r\n        Object.entries(condition).map(([key, value]) => {\r\n            if (key == 'mos') {\r\n                if (value.length < 3 && value.length > 0) {\r\n                    value.forEach((value: string) => {\r\n                        if (value == 'fullPartTime') {\r\n                            segmentFilter = initialList.filter(programme => programme.modeOfStudy.fullTime && programme.modeOfStudy.partTime)\r\n                            console.log(\"filtering full and part time\" + segmentFilter.length)\r\n                            filteredList = filteredList.concat(segmentFilter)\r\n                            console.log(\"Current filtered list\" + filteredList.length + JSON.stringify(filteredList))\r\n\r\n\r\n                        }\r\n                        if (value == 'fullTime') {\r\n                            segmentFilter = initialList.filter(programme => programme.modeOfStudy.fullTime && !programme.modeOfStudy.partTime)\r\n                            console.log(\"filtering full time\" + segmentFilter.length)\r\n                            filteredList = filteredList.concat(segmentFilter)\r\n\r\n                        }\r\n                        if (value == 'partTime') {\r\n                            segmentFilter = initialList.filter(programme => !programme.modeOfStudy.fullTime && programme.modeOfStudy.partTime)\r\n                            console.log(\"filtering part time\" + segmentFilter.length)\r\n                            filteredList = filteredList.concat(segmentFilter)\r\n\r\n                        }\r\n                    })\r\n                }\r\n                else if (value.length == 0 || value.length == 3) {\r\n                    filteredList = initialList\r\n                }\r\n            }\r\n            else if (key == 'discipline') {\r\n                let discFiltered: Programme[] = []\r\n                if (value.length > 0 && value.length <= 4) {\r\n                    console.log(\"Entered discipline filter\")\r\n                    value.forEach((value: string) => {\r\n                        segmentFilter = filteredList.filter(programme => programme.discipline.includes(value))\r\n                        console.log(\"filtering discipline\" + value + segmentFilter.length + JSON.stringify(segmentFilter))\r\n                        discFiltered = discFiltered.concat(segmentFilter)\r\n                    })\r\n                    filteredList = discFiltered\r\n                }\r\n\r\n            }\r\n\r\n            else if (key == 'uni') {\r\n                let uniFiltered: Programme[] = []\r\n                if (value.length > 0) {\r\n                    value.forEach((value: string) => {\r\n                        segmentFilter = filteredList.filter(programme => programme.awardedBy == value)\r\n                        console.log(\"filtering uni\" + value + segmentFilter.length + JSON.stringify(segmentFilter))\r\n                        uniFiltered = uniFiltered.concat(segmentFilter)\r\n                        // console.log(\"current list\" + JSON.stringify(filteredList))\r\n                    })\r\n                    filteredList = uniFiltered\r\n                }\r\n            }\r\n            else if (key == 'acadLvl') {\r\n                let acadFiltered: Programme[] = []\r\n                if (value.length > 0) {\r\n                    value.forEach((value: string) => {\r\n                        segmentFilter = filteredList.filter(programme => programme.academicLevel == value)\r\n                        console.log(\"filtering acadLvl\" + value + segmentFilter.length + JSON.stringify(segmentFilter))\r\n                        acadFiltered = acadFiltered.concat(segmentFilter)\r\n                    })\r\n                    filteredList = acadFiltered\r\n                }\r\n            }\r\n\r\n            else if (key == 'entry') {\r\n                let entryFiltered: Programme[] = []\r\n                if (value.length > 0) {\r\n                    value.forEach((value: string) => {\r\n                        if (value == 'aLevel') {\r\n                            segmentFilter = filteredList.filter(programme => programme.entryQualifications.aLevel)\r\n                            console.log(\"Filering \" + value + segmentFilter.length + JSON.stringify(segmentFilter))\r\n                            entryFiltered = entryFiltered.concat(segmentFilter)\r\n                        }\r\n                        else if (value == 'oLevel') {\r\n                            segmentFilter = filteredList.filter(programme => programme.entryQualifications.oLevel)\r\n                            console.log(\"Filering \" + value + segmentFilter.length + JSON.stringify(segmentFilter))\r\n                            entryFiltered = entryFiltered.concat(segmentFilter)\r\n                        }\r\n                        else if (value == 'diploma') {\r\n                            segmentFilter = filteredList.filter(programme => programme.entryQualifications.diploma)\r\n                            console.log(\"Filering \" + value + segmentFilter.length + JSON.stringify(segmentFilter))\r\n                            entryFiltered = entryFiltered.concat(segmentFilter)\r\n                        }\r\n                        else if (value == 'degree') {\r\n                            segmentFilter = filteredList.filter(programme => programme.entryQualifications.degree)\r\n                            console.log(\"Filering \" + value + segmentFilter.length + JSON.stringify(segmentFilter))\r\n                            entryFiltered = entryFiltered.concat(segmentFilter)\r\n                        }\r\n                    })\r\n                    filteredList = entryFiltered\r\n                }\r\n            }\r\n            else if (key == 'subDisc') {\r\n                let subDiscFiltered: Programme[] = []\r\n                if (value.length > 0) {\r\n                    value.forEach((value: string) => {\r\n                        segmentFilter = filteredList.filter(programme => programme.subDiscipline.includes(value))\r\n                        console.log(\"Filering subDisc\" + value + segmentFilter.length + JSON.stringify(segmentFilter))\r\n                        subDiscFiltered = subDiscFiltered.concat(segmentFilter)\r\n                    })\r\n                    filteredList = subDiscFiltered\r\n\r\n                }\r\n            }\r\n        }\r\n            //newList.filter(programme=>{return programme.modeOfStudy})\r\n        )\r\n        console.log(\"New List are \" + filteredList.length + JSON.stringify(filteredList))\r\n        setProgrammes(filteredList)\r\n\r\n    }\r\n\r\n    /*To remove selected programmes in comparePopOver */\r\n    const removeProg = (programme: Programme) => {\r\n        const newProgList = [...compareProgList]\r\n        const newProgID = programme.id\r\n        const updatedProgList = newProgList.filter(programme => { return programme.id != newProgID })\r\n        setCompareProgList(updatedProgList)\r\n\r\n    }\r\n    /*To remove all selected programmes in comparePopOver */\r\n    const removeAllProg = (programmes: Programme[]) => {\r\n        const newProgList = [...compareProgList]\r\n        const updatedProgList = newProgList.filter(programme => { return programme.id == '' })\r\n        setCompareProgList(updatedProgList)\r\n\r\n    }\r\n\r\n\r\n    {/* Display Compare Prog Popover */ }\r\n    const [showCompareProgPopover, setShowCompareProgPopover] = useState<{ open: boolean, event: Event | undefined }>({\r\n        open: false,\r\n        event: undefined,\r\n    });\r\n\r\n    {/* \"If no prog is added to compare\" Alert */ }\r\n    const [showCompareProgAlert, setShowCompareProgAlert] = useState(false);\r\n\r\n    {/* Display Filter Menu Popover */ }\r\n    const [showProgCourseFilterPopover, setShowProgCourseFilterPopover] = useState<{ open: boolean, event: Event | undefined }>({\r\n        open: false,\r\n        event: undefined,\r\n    });\r\n\r\n    {/* When page first load */ }\r\n    useEffect(() => {\r\n        console.log(\"proglist rendered\")\r\n        {/*Fetching Programmes Data from firestore*/ }\r\n        const fetchData = async (discipline: string, category: string) => {\r\n            const programmes: any = []\r\n            await db.collection('TestProgrammes')\r\n                .where(\"discipline\", \"array-contains\", match.params.discipline)\r\n                .where(\"academicLevel\", '==', match.params.category)\r\n                .get()\r\n                .then((snapshot: any) => {\r\n                    snapshot.docs.forEach((doc: any) => {\r\n                        const data = doc.data()\r\n                        programmes.push(data)\r\n                        console.log(\"programme retrieved \" + data)\r\n                    })\r\n                    setProgrammes(programmes)\r\n                }).catch((error) => console.log(error));\r\n\r\n        }\r\n\r\n        fetchData(match.params.discipline, match.params.category)\r\n\r\n        const sessionList: Programme[] = window.sessionStorage.compareProgList ? JSON.parse(window.sessionStorage.compareProgList) : [];\r\n        console.log(\"Session list retrieved! \" + sessionList)\r\n        setCompareProgList(sessionList);\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {console.log(\"disc are\" + disc + disc.length)}\r\n            {console.log(\"uniqueDisc are\" + uniqueDisc)}\r\n            <IonAlert\r\n                isOpen={showCompareProgAlert}\r\n                onDidDismiss={() => setShowCompareProgAlert(false)}\r\n                cssClass='alertBox'\r\n                mode='md'\r\n                message={'You may compare up to 3 programmes at a time by tapping on the Compare button of the programme(s).'}\r\n                buttons={['OK']}\r\n            ></IonAlert>\r\n\r\n\r\n            <IonPage>\r\n                <IonHeader>\r\n                    <TopNav title=\"Study@SIM\" route='/u/study@SIMMain' backarrow={true} hamburger={true} />\r\n\r\n                    <IonToolbar id=\"studySIMProgListHeaderToolbar\">\r\n                        <IonGrid style={{ padding: \"0\" }}>\r\n                            <IonRow id=\"studySIMProgListHeaderRow\" class=\"ion-align-items-center\">\r\n                                <IonCol size=\"6\" sizeSm=\"6\" class=\"ion-text-left\" className=\"studySIMProgListCol\" style={{ paddingLeft: \"3%\" }}>\r\n                                    <IonTitle className=\"studyProgListTitle\">\r\n                                        {uniqueDisc.length == 1 ? uniqueDisc.map(disc => {\r\n                                            return (<div key={disc} className=\"ion-text-wrap\">{disc}</div>)\r\n                                        }) : ''}\r\n\r\n                                    </IonTitle>\r\n                                </IonCol>\r\n\r\n                                <IonCol size=\"4\" sizeSm=\"4\" class=\"ion-text-right\" className=\"studySIMProgListCol\">\r\n                                    <IonButton id=\"compareBtn\" fill=\"clear\" onClick={(e) => {\r\n                                        if (compareProgList.length < 1 || compareProgList.length > 3) {\r\n                                            setShowCompareProgAlert(true);\r\n                                        } else {\r\n                                            setShowCompareProgPopover({ open: true, event: e.nativeEvent })\r\n                                        }\r\n                                    }\r\n                                    }>\r\n                                        <IonLabel className=\"compareLabel\">Compare</IonLabel>\r\n                                        <IonBadge id=\"compareBadge\">{compareProgList.length}</IonBadge>\r\n                                    </IonButton>\r\n                                </IonCol>\r\n\r\n                                <IonCol size=\"2\" sizeSm=\"2\" class=\"ion-text-center\" className=\"studySIMProgListCol\">\r\n                                    <IonButton id=\"filterBtn\" fill=\"clear\" onClick={(e) => {\r\n                                        setShowProgCourseFilterPopover({ open: true, event: e.nativeEvent })\r\n                                    }\r\n                                    }>\r\n                                        <FontAwesomeIcon className=\"filterIcon\" size=\"lg\" icon={faFilter} />\r\n                                    </IonButton>\r\n                                </IonCol>\r\n                            </IonRow>\r\n                        </IonGrid>\r\n                    </IonToolbar>\r\n\r\n                </IonHeader>\r\n\r\n                <IonContent fullscreen={true} id=\"studySIMProgListContent\">\r\n                    <IonGrid id=\"studySIMProgListGrid\">\r\n\r\n                        {/* Programme List */}\r\n                        {programmes ?\r\n                            programmes.map((programme: Programme) => {\r\n                                return (\r\n                                    <div key={programme.id}>\r\n                                        <>\r\n                                            <IonRow className=\"studySIMProgListRow\" class=\"ion-align-items-center\">\r\n                                                <IonCol size=\"4\" sizeSm=\"4\" class=\"ion-text-center\">\r\n                                                    <img src={programme.uniLogo} className=\"studyProgUniImg\"></img>\r\n                                                </IonCol>\r\n\r\n                                                <IonCol size=\"8\" sizeSm=\"8\" className=\"studySIMProgListColDetails\" class=\"ion-text-left\">\r\n                                                    {/* Programme Title */}\r\n                                                    <IonRow className=\"progCourseRow\">\r\n                                                        {/* <IonRouterLink id=\"progCourseTitleLink\" href={`/u/study@SIMMain/Study@SIMProgInfo/${programme.id}`}> */}\r\n                                                        <IonRouterLink id=\"progCourseTitleLink\" href={`/u/study@SIMMain/Study@SIMProgInfo/${programme.id}/${discipline}/${category}`}>\r\n                                                            <IonTitle className=\"progCourseTitle\">\r\n                                                                <div className=\"ion-text-wrap\">{programme.programmeTitle}</div>\r\n                                                            </IonTitle>\r\n                                                        </IonRouterLink>\r\n                                                    </IonRow>\r\n\r\n                                                    {/* Awarding Uni */}\r\n                                                    <IonRow className=\"progCourseRow\">\r\n                                                        <IonCol size=\"4\" sizeSm=\"4\" class=\"ion-text-left\" className=\"progCourseAwardingUniCol\">\r\n                                                            <IonLabel className=\"progCourseAwardingUniLabel\">\r\n                                                                <div className=\"ion-text-wrap\">Awarded by:</div>\r\n                                                            </IonLabel>\r\n                                                        </IonCol>\r\n\r\n                                                        <IonCol size=\"8\" sizeSm=\"8\" class=\"ion-text-left\" className=\"progCourseAwardingUniCol\">\r\n                                                            <IonLabel className=\"progCourseAwardingUniName\">\r\n                                                                <div className=\"ion-text-wrap\">{programme.awardedBy}</div>\r\n                                                            </IonLabel>\r\n                                                        </IonCol>\r\n                                                    </IonRow>\r\n\r\n                                                    <IonRow className=\"progCompareBtnRow\">\r\n                                                        <IonCol size=\"12\" sizeSm=\"12\" class=\"ion-text-right\" className=\"progCompareBtnCol\">\r\n                                                            {compareProgList.includes(programme) ?\r\n                                                                <IonButton className=\"progCompareBtnSelected\" size=\"small\" type=\"submit\" onClick={e => compareProgramme(programme)}>Compared\r\n                                                    <FontAwesomeIcon style={{ paddingLeft: \"3%\" }} icon={faCheck} />\r\n                                                                </IonButton>\r\n                                                                :\r\n                                                                (<IonButton className=\"progCompareBtn\" size=\"small\" type=\"submit\" onClick={e => compareProgramme(programme)}>Compare</IonButton>)\r\n                                                            }\r\n\r\n                                                        </IonCol>\r\n                                                    </IonRow>\r\n                                                </IonCol>\r\n                                            </IonRow>\r\n                                        </></div>\r\n                                )\r\n                            })\r\n\r\n                            : ''\r\n                        }\r\n\r\n                    </IonGrid>\r\n\r\n                    {/* Compare Programme Popover */}\r\n                    <IonPopover id=\"compareProgPopover\"\r\n                        cssClass='compareProgPopover'\r\n                        isOpen={showCompareProgPopover.open}\r\n                        event={showCompareProgPopover.event}\r\n                        onDidDismiss={e => setShowCompareProgPopover({ open: false, event: undefined })}\r\n                    >\r\n                        <CompareProgPopoverContent compareProgList={compareProgList} removeProg={removeProg} removeAllProg={removeAllProg} viewResults={() => (console.log('Add viewResults function here'))}\r\n                            href={`/u/study@SIMMain/${props.match.params.discipline}/${props.match.params.category}/courseComparator`} />\r\n\r\n                    </IonPopover>\r\n\r\n\r\n                    {/* Filter Programmes Popover */}\r\n                    <IonPopover id=\"progCourseFilterPopover\"\r\n                        cssClass='progCourseFilterPopover'\r\n                        isOpen={showProgCourseFilterPopover.open}\r\n                        event={showProgCourseFilterPopover.event}\r\n                        onDidDismiss={e => setShowProgCourseFilterPopover({ open: false, event: undefined })}\r\n                    >\r\n\r\n                        <FilterPopoverContent filterFunction={filterProgrammes} programmes={programmes} filterFor={\"study@SIM\"} filterCondition={filterCondition} onUpdateFilter={onUpdateFilter} discipline={discipline} category={category} />\r\n\r\n\r\n\r\n                        {/* {match.params.discipline === \"Business\" ?\r\n                            <FilterPopoverContent filterFunction={filterProgrammes}\r\n                                params={match.params.discipline === \"Business\"} href={\"/u/study@SIMMain/Business/test\"} programmes={programmes} filterFor={\"study@SIM\"} filterCondition={filterCondition} onUpdateFilter={onUpdateFilter} discipline={discipline} category={category} />\r\n                            : ''\r\n                        }\r\n\r\n                        {match.params.discipline === \"IT & Computer Science\" ?\r\n                            <FilterPopoverContent filterFunction={filterProgrammes}\r\n                                params={match.params.discipline === \"IT & Computer Science\"} href={\"/u/study@SIMMain/IT & Computer Science\"} programmes={programmes} filterFor={\"study@SIM\"} filterCondition={filterCondition} onUpdateFilter={onUpdateFilter} discipline={discipline} category={category} />\r\n                            : ''\r\n                        }\r\n\r\n                        {match.params.discipline === \"Nursing\" ?\r\n                            <FilterPopoverContent filterFunction={filterProgrammes}\r\n                                params={match.params.discipline === \"Nursing\"} href={\"/u/study@SIMMain/Nursing\"} filterFor={\"study@SIM\"} programmes={programmes} filterCondition={filterCondition} onUpdateFilter={onUpdateFilter} discipline={discipline} category={category} />\r\n                            : ''\r\n                        }\r\n\r\n                        {match.params.discipline === \"Specialty\" ?\r\n                            <FilterPopoverContent filterFunction={filterProgrammes}\r\n                                params={match.params.discipline === \"Specialty\"} href={\"/u/study@SIMMain/Specialty\"} filterFor={\"study@SIM\"} programmes={programmes} filterCondition={filterCondition} onUpdateFilter={onUpdateFilter} discipline={discipline} category={category} />\r\n                            : ''\r\n                        } */}\r\n\r\n                    </IonPopover>\r\n\r\n\r\n                </IonContent>\r\n\r\n            </IonPage>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default StudySIMProgList;"]},"metadata":{},"sourceType":"module"}