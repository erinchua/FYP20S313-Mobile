{"ast":null,"code":"var _jsxFileName = \"D:\\\\BearBear\\\\Coding_Projects\\\\UOW-CSIT321 (FYP)\\\\FYP20S313-Mobile\\\\SIM-OpenHouse\\\\src\\\\pages\\\\Test.tsx\";\nimport { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonAlert, IonMenu, IonSplitPane } from '@ionic/react';\nimport React, { useRef, useState } from 'react';\nimport '../css/Global.css';\nimport '../css/Test.css';\nimport { useForm } from \"react-hook-form\";\n{\n  /*import { useHistory } from 'react-router-dom';*/\n}\n\nconst Test = () => {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch,\n    reset,\n    getValues\n  } = useForm();\n\n  const onSubmit = data => {\n    console.log(\"Submitted\");\n    console.log(data);\n  };\n\n  const newPassword = useRef({});\n  newPassword.current = watch(\"newPassword\", \"\");\n  const newPasswordRef = useRef(null);\n  const confirmNewPasswordRef = useRef(null);\n\n  const validatePassword = () => {};\n\n  const [showAlert, setShowAlert] = useState(false);\n  const [showAlert2, setShowAlert2] = useState(false);\n  const [test1, setTest1] = useState();\n  const [test2, setTest2] = useState();\n\n  const display = () => {\n    const values1 = getValues(\"input1\");\n    const values2 = getValues(\"input2\");\n\n    if (values1 !== \"\" || values2 !== \"\") {\n      setShowAlert(true);\n      console.log(values1, values2);\n      setTest1(values1);\n      setTest2(values2);\n      return;\n    }\n\n    setShowAlert2(true);\n    console.log(\"Fields are empty!\");\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: showAlert,\n    onDidDismiss: () => setShowAlert(false),\n    cssClass: \"alert-css\",\n    mode: \"md\",\n    header: 'Have Value',\n    subHeader: 'Subtitle',\n    message: 'This is an alert message.',\n    buttons: ['Close'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonAlert, {\n    isOpen: showAlert2,\n    onDidDismiss: () => setShowAlert2(false),\n    cssClass: \"my-custom-class\",\n    header: 'No Value',\n    message: 'This is an alert message.',\n    buttons: ['Okay'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 14\n    }\n  }), /*#__PURE__*/React.createElement(IonContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonSplitPane, {\n    contentId: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IonMenu, {\n    contentId: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IonToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(IonTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 33\n    }\n  }, \"Menu\")))), /*#__PURE__*/React.createElement(IonPage, {\n    id: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }\n  }, \"Content here\")))));\n};\n\nexport default Test;","map":{"version":3,"sources":["D:/BearBear/Coding_Projects/UOW-CSIT321 (FYP)/FYP20S313-Mobile/SIM-OpenHouse/src/pages/Test.tsx"],"names":["IonContent","IonHeader","IonPage","IonTitle","IonToolbar","IonAlert","IonMenu","IonSplitPane","React","useRef","useState","useForm","Test","register","handleSubmit","errors","watch","reset","getValues","onSubmit","data","console","log","newPassword","current","newPasswordRef","confirmNewPasswordRef","validatePassword","showAlert","setShowAlert","showAlert2","setShowAlert2","test1","setTest1","test2","setTest2","display","values1","values2"],"mappings":"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","sourcesContent":["import { IonContent, \r\n    IonHeader, \r\n    IonPage, \r\n    IonTitle, \r\n    IonToolbar, \r\n    IonGrid, \r\n    IonRow, \r\n    IonCol, \r\n    IonIcon, \r\n    IonButtons, \r\n    IonButton, \r\n    IonItem, \r\n    IonInput, \r\n    IonList, \r\n    IonAlert, IonMenu, IonSplitPane } from '@ionic/react';\r\nimport React, {useRef, useState} from 'react';\r\nimport '../css/Global.css';\r\nimport '../css/Test.css';\r\nimport { arrowBackOutline, shieldCheckmarkOutline } from 'ionicons/icons';\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport TestControl from '../components/TestControl';\r\nimport TestCom from '../components/TestCom';\r\nimport ReactCodeInput from 'react-verification-code-input';\r\n\r\n{/*import { useHistory } from 'react-router-dom';*/}\r\n \r\n\r\n\r\nconst Test: React.FC = () => {\r\n    const { register, handleSubmit, errors, watch, reset, getValues } = useForm();\r\n\r\n    const onSubmit = (data: any) => {\r\n        console.log(\"Submitted\");\r\n        console.log(data);\r\n    };\r\n\r\n    const newPassword = useRef({});\r\n    newPassword.current = watch(\"newPassword\", \"\");\r\n\r\n    const newPasswordRef = useRef<HTMLIonInputElement>(null);\r\n    const confirmNewPasswordRef = useRef<HTMLIonInputElement>(null);\r\n\r\n    const validatePassword = () => {};\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [showAlert2, setShowAlert2] = useState(false);\r\n\r\n    const [test1, setTest1] = useState<string>();\r\n    const [test2, setTest2] = useState<string>();\r\n    \r\n    const display = () => {\r\n        const values1 = getValues(\"input1\");\r\n        const values2 = getValues(\"input2\");\r\n        if (values1 !== \"\" || values2 !== \"\") {\r\n            setShowAlert(true);\r\n            console.log(values1, values2);\r\n            setTest1(values1);\r\n            setTest2(values2);\r\n            return;\r\n        }    \r\n        setShowAlert2(true);\r\n        console.log(\"Fields are empty!\");\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <IonAlert\r\n                isOpen={showAlert}\r\n                onDidDismiss={() => setShowAlert(false)}\r\n                cssClass='alert-css'\r\n                mode='md'\r\n                header={'Have Value'}\r\n                subHeader={'Subtitle'}\r\n                message={'This is an alert message.'}\r\n                buttons={['Close']}\r\n             ></IonAlert>\r\n\r\n             <IonAlert\r\n                isOpen={showAlert2}\r\n                onDidDismiss={() => setShowAlert2(false)}\r\n                cssClass='my-custom-class'\r\n                header={'No Value'}\r\n                message={'This is an alert message.'}\r\n                buttons={['Okay']}\r\n             ></IonAlert>\r\n\r\n            <IonContent>\r\n                <IonSplitPane contentId=\"main\">\r\n                    {/*--  the side menu  --*/}\r\n                    <IonMenu contentId=\"main\">\r\n                        <IonHeader>\r\n                            <IonToolbar>\r\n                                <IonTitle>Menu</IonTitle>\r\n                            </IonToolbar>\r\n                        </IonHeader>\r\n                    </IonMenu>\r\n\r\n                    {/*-- the main content --*/}\r\n                    <IonPage id=\"main\">\r\n                        <h2>Content here</h2>\r\n                    </IonPage>\r\n                </IonSplitPane>\r\n            </IonContent>\r\n             \r\n\r\n            {/* <IonPage>\r\n                <IonHeader>\r\n                    <IonToolbar id=\"topBar\">\r\n                    <IonButtons slot=\"start\">\r\n                        <IonButton routerLink=\"/main\" onClick={() => {reset()}}>\r\n                            <IonIcon id=\"back_button\" slot=\"icon-only\" icon={arrowBackOutline} />\r\n                        </IonButton>\r\n                    </IonButtons>\r\n        \r\n                    <IonTitle id=\"title\">\r\n                        Reset Password \r\n                    </IonTitle>\r\n                    </IonToolbar>\r\n                </IonHeader>\r\n        \r\n                {/* Screen Content*/}\r\n                {/*<IonContent fullscreen style={{display: \"flex\"}}>\r\n                    <IonGrid>\r\n                        <form>\r\n                            <input name=\"input1\" ref={register} />\r\n                            <input name=\"input2\" ref={register} />\r\n\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={display}>\r\n                                Get Values\r\n                            </button>\r\n\r\n                            {display && (\r\n                                <>\r\n                                    <div>\r\n                                        <h1>Value 1: {test1}</h1>\r\n                                        <h1>Value 2: {test2}</h1>\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            \r\n                        </form>\r\n\r\n                    </IonGrid>\r\n                </IonContent>\r\n            </IonPage> */}\r\n        </React.Fragment>\r\n    );\r\n  }\r\n\r\nexport default Test;"]},"metadata":{},"sourceType":"module"}